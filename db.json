{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9fb334e21f03dc62babee16f3375cd122162e039","modified":1742444800337},{"_id":"source/_posts/JS类型判断.md","hash":"1b87f0b45ff486b3173bc580ca960c05b55aeb10","modified":1742442992437},{"_id":"source/_posts/20道vue面试题.md","hash":"02818fe6dd773a8daf866b2ab313a789d329c5ed","modified":1742442992436},{"_id":"source/_posts/JS数组之reduce.md","hash":"a599071a2a98a6e18950b121299d1ad5bc3f8b7c","modified":1742442992437},{"_id":"source/_posts/LeetCode算法题之两数之和.md","hash":"f947533ec23c983eceb65f34b9d98aed7a58ba48","modified":1742442992438},{"_id":"source/_posts/defer-async.md","hash":"04ba6a7dbc0a9704d67565d76973173aad885354","modified":1742442992438},{"_id":"source/_posts/github-actions-前端部署服务器.md","hash":"063a578ddf245174e3a183ccc3d9eb487353d51d","modified":1742442992440},{"_id":"source/_posts/es6数组方法.md","hash":"eaaabaa0dc9f02fdf0e30c20f770e99ad94981b0","modified":1742442992439},{"_id":"source/_posts/http和https.md","hash":"c2e33c8c57c75d4b3a27d7e35898d4b99f3bedeb","modified":1742442992440},{"_id":"source/_posts/js-单引号替换成双引号-双引号替换成单引号.md","hash":"360ca16723e9818272098d2ddafc753dac2e760b","modified":1742442992440},{"_id":"source/_posts/jsonp原理与实现.md","hash":"dda29e32c5099ba9d57a93d4ce1ecb97751f141c","modified":1742442992440},{"_id":"source/_posts/js面试题.md","hash":"3504da93be17f94f475c93ec2ea039a1d1f45d97","modified":1742442992441},{"_id":"source/_posts/rails单元测试github-actions.md","hash":"00f39b1459a67fb8b6b86e1bea4b779587dce962","modified":1742442992442},{"_id":"source/_posts/var-let-const.md","hash":"bc24d0c51cbc3a0bd11e5203f7c36bd568088406","modified":1742442992442},{"_id":"source/_posts/vps一键搭建ss脚本.md","hash":"12d70fce313179b25c1e1fafb90bc778b6f5a7a5","modified":1742442992442},{"_id":"source/_posts/promise面试题.md","hash":"f55ab17b7ef2bbeb958030112ece3da1e4e815f0","modified":1742442992442},{"_id":"source/_posts/事件捕获-冒泡-代理.md","hash":"678428a4caf976b96b9f930ec3e5054bca231ec9","modified":1742442992443},{"_id":"source/_posts/二分查找.md","hash":"17200ac099fe92b09360692157bf9548363ac573","modified":1742442992443},{"_id":"source/_posts/从输入url到页面展现.md","hash":"d8c53c6c2b4c9f107da77af1f594f5f8dcc099bc","modified":1742442992443},{"_id":"source/_posts/优化打包体积.md","hash":"20c96e049f085775caedbc4b85fc9722e95a1fb3","modified":1742442992443},{"_id":"source/_posts/你不知道的JS之作用域闭包.md","hash":"a38b0071f3cf1799a596c6af1747b4b680647645","modified":1742442992444},{"_id":"source/_posts/前端下载-excel.md","hash":"abf731e24a41f062ff19d00c08e19cf61af439bc","modified":1742442992444},{"_id":"source/_posts/加油.md","hash":"4fc167f13f832735739520e1cab56fcd77eec7cf","modified":1742442992445},{"_id":"source/_posts/多条件判断的另一种写法.md","hash":"fa8c6481e5295156f2464ef90ee76d20cc3537bc","modified":1742442992445},{"_id":"source/_posts/前端面试.md","hash":"23c66e8a12b773dae89ad5e59884528a02f5d525","modified":1742444603970},{"_id":"source/_posts/手写instanceof.md","hash":"8becedb1167a239f7e594d9fe749b06a64088e53","modified":1742442992446},{"_id":"source/_posts/数组与树互转.md","hash":"6ded7e6413d46109bbfdcd1f659753afe84b0b64","modified":1742442992446},{"_id":"source/_posts/测试持续集成.md","hash":"0a11491631f0a455d09e38b118d8d3a7bc649ed1","modified":1742442992447},{"_id":"source/_posts/根据子节点寻找父节点路径.md","hash":"9b171f93fb894ee73117f06295f4904c4d5b1d9b","modified":1742442992447},{"_id":"source/_posts/深拷贝.md","hash":"51a40701a820fad26072410212f86d9fe6ceabca","modified":1742442992448},{"_id":"source/_posts/算法之数组-一.md","hash":"2eafcec3c5413e5ba8b0421ba54adcc52a5ce0f4","modified":1742442992448},{"_id":"source/_posts/箭头函数this.md","hash":"d96a09c505055c03dc04d05ba52e092eff4e3590","modified":1742442992448},{"_id":"source/_posts/终于看完老友记了.md","hash":"3474ffc2da427281bbc184fc2a57692a6c34ee0e","modified":1742442992449},{"_id":"source/_posts/递归实现1-100求和.md","hash":"aef0abc3e26f53c3ced5f712b510e4aa8009f887","modified":1742442992449},{"_id":"source/_posts/锚点导航.md","hash":"cd259efbcfd5aff682167438d41c7a940b1e5bdf","modified":1742442992450},{"_id":"source/_posts/防抖节流.md","hash":"2ccdc9e43681944f5b6b541c8f5ab98ea77c6377","modified":1742442992450},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1742443697557},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1742443697308},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1742443697308},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1742443697560},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1742443697248},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"e62d2e25cae57e8469e3f48c9d17be1fd284a969","modified":1742443697560},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1742443697561},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1742443697562},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1742443697562},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1742443697563},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1742443697562},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1742443697563},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1742443697563},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1742443697251},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1742443697563},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1742443697251},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1742443697254},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1742443697258},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1742443697259},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1742443697266},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1742443697266},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1742443697289},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1742443697282},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1742443697293},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1742443697267},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1742443697298},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1742443697288},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1742443697271},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1742443697281},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1742443697291},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1742443697295},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1742443697286},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1742443697271},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1742443697282},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1742443697294},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1742443697283},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1742443697290},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1742443697303},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1742443697305},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1742443697307},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1742443697306},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1742443697277},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1742443697278},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1742443697291},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1742443697284},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1742443697284},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1742443697294},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1742443697281},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1742443697294},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1742443697279},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1742443697294},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1742443697303},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1742443697305},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1742443697253},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1742443697259},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1742443697259},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1742443697261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1742443697265},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1742443697266},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1742443697260},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1742443697267},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1742443697266},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1742443697271},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1742443697250},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1742443697541},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1742443697543},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1742443697546},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1742443697309},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1742443697559},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1742443697525},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1742443697530},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1742443697277},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1742443697283},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1742443697275},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1742443697278},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1742443697286},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1742443697291},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1742443697281},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1742443697292},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1742443697284},{"_id":"node_modules/hexo-theme-fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1742443697304},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1742443697285},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1742443697285},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1742443697291},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1742443697293},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1742443697290},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1742443697306},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1742443697255},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1742443697296},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1742443697254},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1742443697260},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1742443697270},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1742443697261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1742443697261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1742443697265},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1742443697262},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1742443697265},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1742443697271},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1742443697267},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1742443697252},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1742443697263},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1742443697260},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1742443697252},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1742443697264},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1742443697266},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1742443697270},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1742443697267},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1742443697270},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1742443697268},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1742443697258},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1742443697260},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1742443697269},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1742443697269},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1742443697273},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1742443697272},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1742443697552},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1742443697534},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1742443697535},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1742443697532},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1742443697534},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1742443697536},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1742443697536},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1742443697545},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1742443697538},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1742443697537},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1742443697537},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1742443697537},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1742443697545},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1742443697554},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1742443697545},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1742443697542},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1742443697539},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1742443697557},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1742443697546},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1742443697548},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1742443697553},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1742443697533},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1742443697536},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1742443697534},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1742443697538},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1742443697553},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1742443697540},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1742443697541},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1742443697540},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1742443697548},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1742443697540},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1742443697553},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1742443697555},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1742443697551},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1742443697551},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1742443697555},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1742443697557},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1742443697556},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1742443697524},{"_id":"public/local-search.xml","hash":"1ac6a5ff4b5ae8ace85c5868de20558b801c3d8c","modified":1742450836729},{"_id":"public/2022/03/15/手写instanceof/index.html","hash":"371364e2e37b5476cb5ad994be450cf8fb878e74","modified":1742450836729},{"_id":"public/2025/03/20/前端面试/index.html","hash":"2b059f79a96e72dd8abe3a4ff1771776629f8140","modified":1742450836729},{"_id":"public/2022/03/10/二分查找/index.html","hash":"bb09f188bda7924ac5d8f4383d8d2d8f8961fe0e","modified":1742450836729},{"_id":"public/2022/03/08/数组与树互转/index.html","hash":"69a13ceb65bbf1d24a7805a8a7e502f1b66e1b8e","modified":1742450836729},{"_id":"public/2022/03/03/var-let-const/index.html","hash":"6169fefe02f90893928fb4811c4da5c8eaddca95","modified":1742450836729},{"_id":"public/2022/03/02/你不知道的JS之作用域闭包/index.html","hash":"fbe067dfd16ac9c015d21c76ae6f0eba696556b4","modified":1742450836729},{"_id":"public/2022/02/24/promise面试题/index.html","hash":"83aebb7c00061b983e26e98c61b9f686cb8f96b6","modified":1742450836729},{"_id":"public/2022/02/24/http和https/index.html","hash":"8976666c92ac71d216f7449f1c5b101291aabe42","modified":1742450836729},{"_id":"public/2022/02/23/jsonp原理与实现/index.html","hash":"377290a95b2c5b8317c02db63579b4970c72f60d","modified":1742450836729},{"_id":"public/2022/02/21/js面试题/index.html","hash":"2d1a8ffc295d025592ab7679c0c7aeacf89b15cf","modified":1742450836729},{"_id":"public/2022/02/20/20道vue面试题/index.html","hash":"797bcfbef6ba41e0e04d7cbb4daa395e735065f5","modified":1742450836729},{"_id":"public/2022/02/19/defer-async/index.html","hash":"9384320300ab9754cddb442856b7060ae4de395f","modified":1742450836729},{"_id":"public/2022/02/17/es6数组方法/index.html","hash":"956b470252e57674f77a553fb5ad994a82bd28e3","modified":1742450836729},{"_id":"public/2022/02/17/从输入url到页面展现/index.html","hash":"13405d2c35f49e59b2817c06a80bd33a694118a6","modified":1742450836729},{"_id":"public/2022/02/17/箭头函数this/index.html","hash":"29f34e3ef852cb1d719dfe93db84e355af36314c","modified":1742450836729},{"_id":"public/2022/02/15/深拷贝/index.html","hash":"21bf1cc979e5b8da1890514d3589e2d599ba0ec2","modified":1742450836729},{"_id":"public/2022/02/12/递归实现1-100求和/index.html","hash":"6cddc1eb3ce1db02bc7518a973cc1b712bde8f69","modified":1742450836729},{"_id":"public/2022/02/12/防抖节流/index.html","hash":"6e77a448d3f86473342749fc2a76fc9ec2c0e58b","modified":1742450836729},{"_id":"public/2022/02/12/加油/index.html","hash":"ac348fcab1e547e08c6b750ce081fb780c19be72","modified":1742450836729},{"_id":"public/2022/01/26/事件捕获-冒泡-代理/index.html","hash":"32e8fcfafc2626df122f3c273ff937553541a7be","modified":1742450836729},{"_id":"public/2022/01/24/优化打包体积/index.html","hash":"47dbd4361c2eb6f4b545183c6ded4371984f1ab8","modified":1742450836729},{"_id":"public/2021/07/08/rails单元测试github-actions/index.html","hash":"8d691fdf223038c361daaf5f4e4b7dd0fcbda356","modified":1742450836729},{"_id":"public/2021/07/04/github-actions-前端部署服务器/index.html","hash":"50c656daa0a1577d723d99c738b0355592ae76a1","modified":1742450836729},{"_id":"public/2021/07/02/前端下载-excel/index.html","hash":"44946109c9e149071373497d030cea1faa5d411d","modified":1742450836729},{"_id":"public/2021/03/25/js-单引号替换成双引号-双引号替换成单引号/index.html","hash":"7fb0366ca0c67fa28799d1776018498e89206b8f","modified":1742450836729},{"_id":"public/2021/03/16/锚点导航/index.html","hash":"9dd90528b808e2b5eb7e51fa07359cf4b6c533eb","modified":1742450836729},{"_id":"public/2020/09/27/测试持续集成/index.html","hash":"3193f97790fd6c15d9060c5cfc49549dfb1c17b2","modified":1742450836729},{"_id":"public/2020/04/25/算法之数组-一/index.html","hash":"c8fa94af9ca134ed80f0802090e428977acf6c44","modified":1742450836729},{"_id":"public/2020/05/13/JS数组之reduce/index.html","hash":"70c9e3eea95161354e3c451fac755616c9e5f658","modified":1742450836729},{"_id":"public/2020/05/03/根据子节点寻找父节点路径/index.html","hash":"09fcf2ca154efd46dcca04fa4283abc0229648a9","modified":1742450836729},{"_id":"public/2020/04/14/JS类型判断/index.html","hash":"e7356360da3a3c9adc6db5de5483dd6e1f702d8e","modified":1742450836729},{"_id":"public/2020/04/12/终于看完老友记了/index.html","hash":"1073885bf826b397c0c0cc8acc283c7fcddbb595","modified":1742450836729},{"_id":"public/2020/02/23/多条件判断的另一种写法/index.html","hash":"68b08b6ca53d51c36dd9ada70cb85d7fb7a322ff","modified":1742450836729},{"_id":"public/2019/07/27/vps一键搭建ss脚本/index.html","hash":"41bf83c55a3c94c1944103f1595f06376ff5ee04","modified":1742450836729},{"_id":"public/2019/01/09/LeetCode算法题之两数之和/index.html","hash":"f75753de4c5e306f8031c649d05beaf8f7e8cace","modified":1742450836729},{"_id":"public/index.html","hash":"139f5fd0a2490579950b869d66b2389f59801576","modified":1742450836729},{"_id":"public/page/2/index.html","hash":"0a3a95f858bfce621f84f11c9815098eb165c301","modified":1742450836729},{"_id":"public/page/3/index.html","hash":"bdfd5165d5d0f2d0534489c3999ca3c2386cd6d9","modified":1742450836729},{"_id":"public/page/4/index.html","hash":"6c76e84463ae4b6aacaf8e2f90e3d71d65bd8184","modified":1742450836729},{"_id":"public/archives/index.html","hash":"763027ea4b424797f9be19e4ec7c3fa01dd9a645","modified":1742450836729},{"_id":"public/archives/page/2/index.html","hash":"fc3f2b1acc388c882357b8c82f9a4f48d76610d8","modified":1742450836729},{"_id":"public/archives/page/3/index.html","hash":"c60a883a33bc6c8bbd0f96f3b0d006846616de1c","modified":1742450836729},{"_id":"public/archives/page/4/index.html","hash":"eb4a92da326f5e150c46e1754000c212e8d25bb1","modified":1742450836729},{"_id":"public/archives/2019/index.html","hash":"f3272a4138f537ba022d9192b50480d08ed7aac2","modified":1742450836729},{"_id":"public/archives/2019/01/index.html","hash":"8607bd5ae39a95b080d3b6162fec4f887124b366","modified":1742450836729},{"_id":"public/archives/2019/07/index.html","hash":"b2bd7926e236b96232c1599f5bf9d9b1c0c6f8a2","modified":1742450836729},{"_id":"public/archives/2020/index.html","hash":"f2f694388f867c24d8d41271ce4f9022f216b50d","modified":1742450836729},{"_id":"public/archives/2020/02/index.html","hash":"b40fb48068ecc789477cad0eb2b616f37c086b9b","modified":1742450836729},{"_id":"public/archives/2020/04/index.html","hash":"5791795052e37b5fe785412eb5189c62e1f6dab8","modified":1742450836729},{"_id":"public/archives/2020/05/index.html","hash":"7b19e1fa920df7dc681d9f00023988b54d4427cb","modified":1742450836729},{"_id":"public/archives/2020/09/index.html","hash":"b8bb2f7e7e4992490cf7ccdc9a97f1578ab04732","modified":1742450836729},{"_id":"public/archives/2021/index.html","hash":"fd35604af3a9d4e99535f1f970d5daa209ca2486","modified":1742450836729},{"_id":"public/archives/2021/03/index.html","hash":"61cdca0c5c0d95f6a00489a2fb1af36236c2993c","modified":1742450836729},{"_id":"public/archives/2021/07/index.html","hash":"cf5c7258f61e93718d1801c372bc827be6922aaa","modified":1742450836729},{"_id":"public/archives/2022/index.html","hash":"8c34f0c310ba04b998b4ae4f134298eb38a771e2","modified":1742450836729},{"_id":"public/archives/2022/page/2/index.html","hash":"14bbcd3b3d83e1d9568c5b69f710503839ee59b4","modified":1742450836729},{"_id":"public/archives/2022/01/index.html","hash":"5029b56f0d0e8f5a15ec766a7a158b7549c9ac86","modified":1742450836729},{"_id":"public/archives/2022/02/index.html","hash":"f555fe8b7da06383955d55528c9855a71665aef1","modified":1742450836729},{"_id":"public/archives/2022/02/page/2/index.html","hash":"f498385c6f9f47256740e842ceebff0e7117aaf2","modified":1742450836729},{"_id":"public/archives/2022/03/index.html","hash":"b2e4d95dea60d34906e838a8e9a41520e16f7361","modified":1742450836729},{"_id":"public/archives/2025/index.html","hash":"3c80174c4df0db4874d54abc67f8c892df7420bf","modified":1742450836729},{"_id":"public/archives/2025/03/index.html","hash":"2eeb768f2f9b185c03cd8a1a06fc510705f00748","modified":1742450836729},{"_id":"public/tags/面试/index.html","hash":"4f4711d48dd4ae8aa3e3a04640f5953a09c00d39","modified":1742450836729},{"_id":"public/tags/vue/index.html","hash":"6c0eb7673e4ef51e6b268187cd88d528295557e8","modified":1742450836729},{"_id":"public/tags/JS/index.html","hash":"56d1c44612d4e3fcc59b912c4b3d6380b150d2eb","modified":1742450836729},{"_id":"public/tags/JS/page/2/index.html","hash":"abae44adba61c5e37d35d7762a3ed9f7fbd4ae81","modified":1742450836729},{"_id":"public/tags/reduce/index.html","hash":"86a4be11e55ead87a754fcfcebd1576381cc9303","modified":1742450836729},{"_id":"public/tags/js类型/index.html","hash":"f95465ea381eeab3b5a23879a73395c4ee1cbcc8","modified":1742450836729},{"_id":"public/tags/LeetCode/index.html","hash":"d52026e68db2f134c2498ba9fb2e6a311090e4f0","modified":1742450836729},{"_id":"public/tags/算法/index.html","hash":"895cd7d65bd446d4634081640a47d490569dcef2","modified":1742450836729},{"_id":"public/tags/两数之和/index.html","hash":"be44906597352b4ba5d77c116119184aa31d7eeb","modified":1742450836729},{"_id":"public/tags/CI/index.html","hash":"3743b44bea3bfdc6a4081691bdf72afa3a28ea62","modified":1742450836729},{"_id":"public/tags/部署/index.html","hash":"207cc665b9851e4b7a186e267eb58a41df75ab6a","modified":1742450836729},{"_id":"public/tags/持续集成/index.html","hash":"1122ae6b1ec0a8a9a19a8d22e4486df96421bed2","modified":1742450836729},{"_id":"public/tags/http/index.html","hash":"77790f6753c1c9347a782fc04f72785c45e61640","modified":1742450836729},{"_id":"public/tags/https/index.html","hash":"807f17067070e967d6801f087b104c4284ce32db","modified":1742450836729},{"_id":"public/tags/JSONP/index.html","hash":"05cb08569da8d306d22c96dc74243b3a4646e95b","modified":1742450836729},{"_id":"public/tags/promise/index.html","hash":"e92bd9c37246685c5e43c30f61e0246ddc193dbd","modified":1742450836729},{"_id":"public/tags/github-actions/index.html","hash":"cffae3aad15b0d2e970bdcc2c869eb5b5f78c586","modified":1742450836729},{"_id":"public/tags/vps/index.html","hash":"c636d7932789f0e9bbaa07f23bf46122d15891bc","modified":1742450836729},{"_id":"public/tags/ss/index.html","hash":"e7868296bcf7b199569f34ee8e51a1d24cd90522","modified":1742450836729},{"_id":"public/tags/事件捕获/index.html","hash":"1b3c730dfa76bf54671259699faae4f00b0e6451","modified":1742450836729},{"_id":"public/tags/事件冒泡/index.html","hash":"8c59f78eebb0a1a5187c0aaaaba0f0cd4fc653c5","modified":1742450836729},{"_id":"public/tags/浏览器/index.html","hash":"cd49c39f48dc890674ded04c43d0277fd3230420","modified":1742450836729},{"_id":"public/tags/webpack/index.html","hash":"8d209393226790735e14342ba6f7d0921b8b3840","modified":1742450836729},{"_id":"public/tags/打包/index.html","hash":"5e5ca05313bbbd50264336d1a897af3250778262","modified":1742450836729},{"_id":"public/tags/闭包/index.html","hash":"53c9fac444188144130629b5f1e62364801ebb4e","modified":1742450836729},{"_id":"public/tags/测试/index.html","hash":"6027d4a636f8776794f4d44ddc1e49496b4cead2","modified":1742450836729},{"_id":"public/tags/深拷贝/index.html","hash":"653f295073462279441c497944bcbd13c8799d2f","modified":1742450836729},{"_id":"public/tags/js/index.html","hash":"687e9aeed4eb310da4fdde2219852be783c1c8d0","modified":1742450836729},{"_id":"public/tags/箭头函数/index.html","hash":"5fbbd239875c62241b5a4ba9c7e81ca4cdc16a00","modified":1742450836729},{"_id":"public/tags/老友记/index.html","hash":"bb0a2d0b0d3a883c695d99a68aa2998bc8a66cb2","modified":1742450836729},{"_id":"public/tags/美剧/index.html","hash":"beb479a3db13dfad40c48abfb0504ebc8d35293c","modified":1742450836729},{"_id":"public/tags/递归/index.html","hash":"eca5cd3af91ae21a66cfea1ad805c81a03a8837a","modified":1742450836729},{"_id":"public/tags/防抖/index.html","hash":"0fc3c1590a619e6b0aa71a12fb0d90af71f70e43","modified":1742450836729},{"_id":"public/tags/节流/index.html","hash":"785eee6962c74b568f1c4eae54db5e0c20e9dd5c","modified":1742450836729},{"_id":"public/404.html","hash":"c60b2770ddaa670001c2c9113f03d7b66ef2f566","modified":1742450836729},{"_id":"public/tags/index.html","hash":"0c254e6526227078c8c52b21398ffd801b57b633","modified":1742450836729},{"_id":"public/categories/index.html","hash":"946c3ec8db6f363f036eca2c4c9ca42bb28ef602","modified":1742450836729},{"_id":"public/links/index.html","hash":"09745501839f22c1ca959cf80f068d3004b103cc","modified":1742450836729},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1742450836729},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1742450836729},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1742450836729},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1742450836729},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1742450836729},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1742450836729},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1742450836729},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1742450836729},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1742450836729},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1742450836729},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1742450836729},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1742450836729},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1742450836729},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1742450836729},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1742450836729},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1742450836729},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1742450836729},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1742450836729},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1742450836729}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"20道vue面试题","date":"2022-02-19T17:10:01.000Z","_content":"常见的vue面试题，整理如下：\n<!-- more -->\n### 单页应用(spa)\n单页Web应用，就是只有一张Web页面的应用。浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面完成，这一切都由JavaScript来控制。\n\n单页应用得优势：\n\n操作体验流畅，媲美本地应用的感觉，切换过程中不会频繁有被“打断”的感觉。\n因为界面框架都在本地，与服务端的通讯基本只有数据，所以便于迁移，可以用比较小的代价，迁移成桌面产品，或者各种移动端Hybrid产品。\n完全的前端组件化，前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；\nAPI 共享，如果你的服务是多端的（浏览器端、Android、iOS、微信等），单页应用的模式便于你在多个端共用 API，可以显著减少服务端的工作量。容易变化的 UI 部分都已经前置到了多端，只受到业务数据模型影响的 API，更容易稳定下来，便于提供更棒的服务；\n组件共享，在某些对性能体验要求不高的场景，或者产品处于快速试错阶段，借助于一些技术（Hybrid、React Native），可以在多端共享组件，便于产品的快速迭代，节约资源。\n\n单页应用得缺点：\n\n首次加载大量资源，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长；\n对搜索引擎不友好，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n开发难度相对较高，开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n### MVVM\nMVVM全名是 Model View View-Model的缩写\nModel(模型)：是用于处理应用程序数据逻辑部分。\nView(视图)：是应用程序中处理数据显示的本分。通常视图是依据模型数据创建的\nViewModel层：做了两件事达到了数据的双向绑定，一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。 实现的方式时：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转换成后端的数据。实现的方式是：DOM事件监听。\n\n### Vue 的响应式原理（双向数据绑定）\n整体思路是数据劫持 + 观察者模式\n\n对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存在它所依赖的 watcher （依赖收集）get，当属性变化后会通知自己对应的 watcher 去更新（派发更新）set。\n\n1、Object.defineProperty 数据劫持\n2、使用 getter 收集依赖 ，setter 通知 watcher派发更新。\n3、watcher 发布订阅模式。\n### data 为什么是函数\n\n组件的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一分新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果\n\n### v-model 的原理\nv-model 只是语法糖而已。\nv-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件。\ntext 和 textarea 元素使用 value property 和 input 事件；\ncheckbox 和 radio 使用 checked property 和 change事件；\nselect 字段将 value 作为 prop 并将 change 作为事件。\n注意：对于需要使用输入法的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。\n在普通元素上：\ninput v-model='sth'\ninput v-bind:value='sth' v-on:input='sth = $event.target.value'\n\n### v-if 和 v-show 的区别\n控制手段不同\n编译过程不同\n编译条件不同\n\n控制手段：v-show隐藏则是为该元素添加css--display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除\n\n编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换\n\n编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染\n\nv-show 由false变为true的时候不会触发组件的生命周期\n\nv-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法\n\n性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n\n\n### computed、 watch 区别\n\ncomputed\n1、computed是计算属性，也就是依赖某个值或者props通过计算得来得数据；\n2、 computed的值是在getter执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用getter来计算；\n3、 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；\n\nwatch\n1、watch是监听器，可以监听某一个数据，然后执行相应的操作；\n2、不支持缓存，数据变直接会触发相应的操作；\n3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n4、支持异步操作；\n\n### Vue 的生命周期\nbeforeCreate 在实例初始化之后，数据观测（data observe）和 event/watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。\n\ncreated 实例已经创建完成之后被调用。在这一步，实例已经完成以下的配置：数据观测（data observe ），属性和方法的运算，watch/event 事件回调。这里没有 $el，如果非要想与 DOM 进行交互，可以通过vm.$nextTick 来访问 DOM。\n\nbeforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。\n\nmounted 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom节点。\n\nbeforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁 （patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\nupdated 发生在更新完成之后，当前阶段组件 Dom 已经完成更新。要注意的是避免在此期间更新数据，因为这个可能导致无限循环的更新，该钩子在服务器渲染期间不被调用。\n\nbeforeDestroy 实例销毁之前调用。在这一步，实力仍然完全可用。我们可以在这时进行 善后收尾工作，比如清除定时器。\n\ndestroy Vue实例销毁后调用。调用后，Vue实例指示的东西都会解绑定，所有的事件监听器会被移除，左右的子实例也会被销毁，该钩子在服务器端渲染不被调用。\n\nactivated keep-alive 专属，组件被激活时调用\n\ndeactivated keep-alive 专属，组件被销毁时调用\n\n### 父子组件生命周期顺序\n加载渲染过程\n父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount -> 子mounted -> 父mounted\n子组件更新过程\n父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n父组件更新过程\n父beforeUpdate -> 父updated\n销毁过程\n父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n### Vue 组件间通信方式\n1、props 和 $emit。父组件向子组件传递数据是通过props传递的，子组件传递给父组件是通过$emit触发事件来做到的。\n\n2、$parent 和 $children 获取单签组件的父组件和当前组件的子组件。\n\n3、$attrs 和 $listeners A -> B -> C。Vue2.4开始提供了$attrs和$listeners来解决这个问题。\n\n4、父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。（官方不推荐在实际业务中适用，但是写组件库时很常用。）\n\n5、$refs 获取组件实例。\n\n6、envetBus 兄弟组件数据传递，这种情况下可以使用事件总线的方式。\n\n7、vuex 状态管理。\n### Vue 的单项数据流\n数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父组件的状态，从而导致你的应用的数据流向难以理解\n\n### keep-alive 组件\nkeep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载\n### slot 插槽\nvue里提供了一种将父组件的内容和子组件的模板整合的方法：内容分发，通过slot插槽来实现。\n\n在组件标签内部写入的内容默认的会被替换掉，如果想要在组件的模板里使用这些内容，就在对应的位置写上slot标签，这个slot标签就代表着这些内容\n### Vue 检测数组或对象的变化\n对象是用defineProperty setter。\n数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对7种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写（AOP 切片思想）。\n\n所以在 Vue 中修改数组的索引和长度无法监控到。需要通过以上7种变异方法修改数组才会触发数组对应的watcher进行更新\n### 虚拟dom\n由于在浏览器中操作DOM是很昂贵的。频繁操作DOM，会产生一定性能问题。这就是虚拟Dom的产生原因。Vue2的Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点，是对真实DOM的一层抽象。\n优点：\n1、保证性能下限：框架的虚拟DOM需要适配任何上层API可能产生的操作，他的一些DOM操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的DOM操作性能要好很多，因此框架的虚拟DOM至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，既保证性能的下限。\n2、无需手动操作DOM：我们不需手动去操作DOM，只需要写好 View-Model的 代码逻辑，框架会根据虚拟DOM和数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率。\n3、跨平台：虚拟DOM本质上是JavaScript对象，而DOM与平台强相关，相比之下虚拟DOM可以进行更方便地跨平台操作，例如服务器端渲染、weex开发等等。\n缺点：\n1、无法进行极致优化：虽然虚拟DOM + 合理的优化，足以应对大部分应用的性能需要，但在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化。\n2、首次渲染大量DOM时，由于多了一层DOM计算，会比innerHTML插入慢。\n### Vue 中 key 的作用\n如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。key 是为Vue中Vnode的唯一标识，通过这个key，我们的diff操作可以更准确、更快速。\n更准确：因为带key就不是就地复用了，在sameNode函数 a.key === b.key 对比中可以避免就地复用的情况。所以更加准确。\n更快速：利用key的唯一性生成map对象来获取对应节点，比遍历方式块。\n### nextTick 的原理\nnextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法\n### Vuex\nvuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存\n\n主要包括以下几个模块：\n\nState:定义了应用状态的数据结构，可以在这里设置默认的初始化状态。\nGetter:允许组件从Store中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。\nMutation:是唯一更改 store 中状态的方法，且必须是同步函数。\nAction:用于提交 mutation，而不是直接变更状态，可以包含任意异步请求。\nModule:允许将单一的 Store 拆分更多个 store 且同时保存在单一的状态树中。\n### vue-router 的两种模式\nhash 模式\n1、location.has 的值实际就是 URL 中 # 后面的东西。它的特点在于：hash虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。\n\n2、可以为 hash 的改变添加监听事件\nwindow.addEventListener(\"hashchange\",funcRef,false)\n每一次改变 hash (window.location.hash)，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由“更新视图但不重新请求页面”的功能了\n特点：兼容性好但是不美观\n\nhistory 模式\n利用 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。\n\n这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上，他们提供了对历史记录进行修改的功能。这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n\n特点：虽然美观，但是刷新会出现 404 需要后端进行配置\n### vue-router 有几种导航钩子\n路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。\n完整的导航解析流程：\n1、导航被触发。\n2、在失活的组件里调用 beforeRouterLeave 守卫。\n3、调用全局的 beforeEach 守卫。\n4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。\n5、在路由配置里面 beforeEnter。\n6、解析异步路由组件。\n7、在被激活的组件里调用 beforeRouterEnter。\n8、调用全局的 beforeResolve 守卫（2.5+）。\n9、导航被确认。\n10、调用全局的 afterEach 钩子。\n11、触发 DOM 更新。\n12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。\n\n\n\n","source":"_posts/20道vue面试题.md","raw":"---\ntitle: 20道vue面试题\ndate: 2022-02-20 01:10:01\ntags: ['面试', 'vue']\n---\n常见的vue面试题，整理如下：\n<!-- more -->\n### 单页应用(spa)\n单页Web应用，就是只有一张Web页面的应用。浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面完成，这一切都由JavaScript来控制。\n\n单页应用得优势：\n\n操作体验流畅，媲美本地应用的感觉，切换过程中不会频繁有被“打断”的感觉。\n因为界面框架都在本地，与服务端的通讯基本只有数据，所以便于迁移，可以用比较小的代价，迁移成桌面产品，或者各种移动端Hybrid产品。\n完全的前端组件化，前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；\nAPI 共享，如果你的服务是多端的（浏览器端、Android、iOS、微信等），单页应用的模式便于你在多个端共用 API，可以显著减少服务端的工作量。容易变化的 UI 部分都已经前置到了多端，只受到业务数据模型影响的 API，更容易稳定下来，便于提供更棒的服务；\n组件共享，在某些对性能体验要求不高的场景，或者产品处于快速试错阶段，借助于一些技术（Hybrid、React Native），可以在多端共享组件，便于产品的快速迭代，节约资源。\n\n单页应用得缺点：\n\n首次加载大量资源，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长；\n对搜索引擎不友好，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n开发难度相对较高，开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n### MVVM\nMVVM全名是 Model View View-Model的缩写\nModel(模型)：是用于处理应用程序数据逻辑部分。\nView(视图)：是应用程序中处理数据显示的本分。通常视图是依据模型数据创建的\nViewModel层：做了两件事达到了数据的双向绑定，一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。 实现的方式时：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转换成后端的数据。实现的方式是：DOM事件监听。\n\n### Vue 的响应式原理（双向数据绑定）\n整体思路是数据劫持 + 观察者模式\n\n对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存在它所依赖的 watcher （依赖收集）get，当属性变化后会通知自己对应的 watcher 去更新（派发更新）set。\n\n1、Object.defineProperty 数据劫持\n2、使用 getter 收集依赖 ，setter 通知 watcher派发更新。\n3、watcher 发布订阅模式。\n### data 为什么是函数\n\n组件的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一分新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果\n\n### v-model 的原理\nv-model 只是语法糖而已。\nv-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件。\ntext 和 textarea 元素使用 value property 和 input 事件；\ncheckbox 和 radio 使用 checked property 和 change事件；\nselect 字段将 value 作为 prop 并将 change 作为事件。\n注意：对于需要使用输入法的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。\n在普通元素上：\ninput v-model='sth'\ninput v-bind:value='sth' v-on:input='sth = $event.target.value'\n\n### v-if 和 v-show 的区别\n控制手段不同\n编译过程不同\n编译条件不同\n\n控制手段：v-show隐藏则是为该元素添加css--display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除\n\n编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换\n\n编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染\n\nv-show 由false变为true的时候不会触发组件的生命周期\n\nv-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法\n\n性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n\n\n### computed、 watch 区别\n\ncomputed\n1、computed是计算属性，也就是依赖某个值或者props通过计算得来得数据；\n2、 computed的值是在getter执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用getter来计算；\n3、 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；\n\nwatch\n1、watch是监听器，可以监听某一个数据，然后执行相应的操作；\n2、不支持缓存，数据变直接会触发相应的操作；\n3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n4、支持异步操作；\n\n### Vue 的生命周期\nbeforeCreate 在实例初始化之后，数据观测（data observe）和 event/watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。\n\ncreated 实例已经创建完成之后被调用。在这一步，实例已经完成以下的配置：数据观测（data observe ），属性和方法的运算，watch/event 事件回调。这里没有 $el，如果非要想与 DOM 进行交互，可以通过vm.$nextTick 来访问 DOM。\n\nbeforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。\n\nmounted 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom节点。\n\nbeforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁 （patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\nupdated 发生在更新完成之后，当前阶段组件 Dom 已经完成更新。要注意的是避免在此期间更新数据，因为这个可能导致无限循环的更新，该钩子在服务器渲染期间不被调用。\n\nbeforeDestroy 实例销毁之前调用。在这一步，实力仍然完全可用。我们可以在这时进行 善后收尾工作，比如清除定时器。\n\ndestroy Vue实例销毁后调用。调用后，Vue实例指示的东西都会解绑定，所有的事件监听器会被移除，左右的子实例也会被销毁，该钩子在服务器端渲染不被调用。\n\nactivated keep-alive 专属，组件被激活时调用\n\ndeactivated keep-alive 专属，组件被销毁时调用\n\n### 父子组件生命周期顺序\n加载渲染过程\n父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount -> 子mounted -> 父mounted\n子组件更新过程\n父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n父组件更新过程\n父beforeUpdate -> 父updated\n销毁过程\n父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n### Vue 组件间通信方式\n1、props 和 $emit。父组件向子组件传递数据是通过props传递的，子组件传递给父组件是通过$emit触发事件来做到的。\n\n2、$parent 和 $children 获取单签组件的父组件和当前组件的子组件。\n\n3、$attrs 和 $listeners A -> B -> C。Vue2.4开始提供了$attrs和$listeners来解决这个问题。\n\n4、父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。（官方不推荐在实际业务中适用，但是写组件库时很常用。）\n\n5、$refs 获取组件实例。\n\n6、envetBus 兄弟组件数据传递，这种情况下可以使用事件总线的方式。\n\n7、vuex 状态管理。\n### Vue 的单项数据流\n数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父组件的状态，从而导致你的应用的数据流向难以理解\n\n### keep-alive 组件\nkeep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载\n### slot 插槽\nvue里提供了一种将父组件的内容和子组件的模板整合的方法：内容分发，通过slot插槽来实现。\n\n在组件标签内部写入的内容默认的会被替换掉，如果想要在组件的模板里使用这些内容，就在对应的位置写上slot标签，这个slot标签就代表着这些内容\n### Vue 检测数组或对象的变化\n对象是用defineProperty setter。\n数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对7种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写（AOP 切片思想）。\n\n所以在 Vue 中修改数组的索引和长度无法监控到。需要通过以上7种变异方法修改数组才会触发数组对应的watcher进行更新\n### 虚拟dom\n由于在浏览器中操作DOM是很昂贵的。频繁操作DOM，会产生一定性能问题。这就是虚拟Dom的产生原因。Vue2的Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点，是对真实DOM的一层抽象。\n优点：\n1、保证性能下限：框架的虚拟DOM需要适配任何上层API可能产生的操作，他的一些DOM操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的DOM操作性能要好很多，因此框架的虚拟DOM至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，既保证性能的下限。\n2、无需手动操作DOM：我们不需手动去操作DOM，只需要写好 View-Model的 代码逻辑，框架会根据虚拟DOM和数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率。\n3、跨平台：虚拟DOM本质上是JavaScript对象，而DOM与平台强相关，相比之下虚拟DOM可以进行更方便地跨平台操作，例如服务器端渲染、weex开发等等。\n缺点：\n1、无法进行极致优化：虽然虚拟DOM + 合理的优化，足以应对大部分应用的性能需要，但在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化。\n2、首次渲染大量DOM时，由于多了一层DOM计算，会比innerHTML插入慢。\n### Vue 中 key 的作用\n如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。key 是为Vue中Vnode的唯一标识，通过这个key，我们的diff操作可以更准确、更快速。\n更准确：因为带key就不是就地复用了，在sameNode函数 a.key === b.key 对比中可以避免就地复用的情况。所以更加准确。\n更快速：利用key的唯一性生成map对象来获取对应节点，比遍历方式块。\n### nextTick 的原理\nnextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法\n### Vuex\nvuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存\n\n主要包括以下几个模块：\n\nState:定义了应用状态的数据结构，可以在这里设置默认的初始化状态。\nGetter:允许组件从Store中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。\nMutation:是唯一更改 store 中状态的方法，且必须是同步函数。\nAction:用于提交 mutation，而不是直接变更状态，可以包含任意异步请求。\nModule:允许将单一的 Store 拆分更多个 store 且同时保存在单一的状态树中。\n### vue-router 的两种模式\nhash 模式\n1、location.has 的值实际就是 URL 中 # 后面的东西。它的特点在于：hash虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。\n\n2、可以为 hash 的改变添加监听事件\nwindow.addEventListener(\"hashchange\",funcRef,false)\n每一次改变 hash (window.location.hash)，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由“更新视图但不重新请求页面”的功能了\n特点：兼容性好但是不美观\n\nhistory 模式\n利用 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。\n\n这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上，他们提供了对历史记录进行修改的功能。这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n\n特点：虽然美观，但是刷新会出现 404 需要后端进行配置\n### vue-router 有几种导航钩子\n路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。\n完整的导航解析流程：\n1、导航被触发。\n2、在失活的组件里调用 beforeRouterLeave 守卫。\n3、调用全局的 beforeEach 守卫。\n4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。\n5、在路由配置里面 beforeEnter。\n6、解析异步路由组件。\n7、在被激活的组件里调用 beforeRouterEnter。\n8、调用全局的 beforeResolve 守卫（2.5+）。\n9、导航被确认。\n10、调用全局的 afterEach 钩子。\n11、触发 DOM 更新。\n12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。\n\n\n\n","slug":"20道vue面试题","published":1,"updated":"2025-03-20T03:56:32.436Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8moi00009cck7lgpg3bp","content":"<p>常见的vue面试题，整理如下：</p>\n<span id=\"more\"></span>\n<h3 id=\"单页应用-spa\"><a href=\"#单页应用-spa\" class=\"headerlink\" title=\"单页应用(spa)\"></a>单页应用(spa)</h3><p>单页Web应用，就是只有一张Web页面的应用。浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面完成，这一切都由JavaScript来控制。</p>\n<p>单页应用得优势：</p>\n<p>操作体验流畅，媲美本地应用的感觉，切换过程中不会频繁有被“打断”的感觉。<br>因为界面框架都在本地，与服务端的通讯基本只有数据，所以便于迁移，可以用比较小的代价，迁移成桌面产品，或者各种移动端Hybrid产品。<br>完全的前端组件化，前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；<br>API 共享，如果你的服务是多端的（浏览器端、Android、iOS、微信等），单页应用的模式便于你在多个端共用 API，可以显著减少服务端的工作量。容易变化的 UI 部分都已经前置到了多端，只受到业务数据模型影响的 API，更容易稳定下来，便于提供更棒的服务；<br>组件共享，在某些对性能体验要求不高的场景，或者产品处于快速试错阶段，借助于一些技术（Hybrid、React Native），可以在多端共享组件，便于产品的快速迭代，节约资源。</p>\n<p>单页应用得缺点：</p>\n<p>首次加载大量资源，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长；<br>对搜索引擎不友好，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。<br>开发难度相对较高，开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>MVVM全名是 Model View View-Model的缩写<br>Model(模型)：是用于处理应用程序数据逻辑部分。<br>View(视图)：是应用程序中处理数据显示的本分。通常视图是依据模型数据创建的<br>ViewModel层：做了两件事达到了数据的双向绑定，一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。 实现的方式时：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转换成后端的数据。实现的方式是：DOM事件监听。</p>\n<h3 id=\"Vue-的响应式原理（双向数据绑定）\"><a href=\"#Vue-的响应式原理（双向数据绑定）\" class=\"headerlink\" title=\"Vue 的响应式原理（双向数据绑定）\"></a>Vue 的响应式原理（双向数据绑定）</h3><p>整体思路是数据劫持 + 观察者模式</p>\n<p>对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存在它所依赖的 watcher （依赖收集）get，当属性变化后会通知自己对应的 watcher 去更新（派发更新）set。</p>\n<p>1、Object.defineProperty 数据劫持<br>2、使用 getter 收集依赖 ，setter 通知 watcher派发更新。<br>3、watcher 发布订阅模式。</p>\n<h3 id=\"data-为什么是函数\"><a href=\"#data-为什么是函数\" class=\"headerlink\" title=\"data 为什么是函数\"></a>data 为什么是函数</h3><p>组件的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一分新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果</p>\n<h3 id=\"v-model-的原理\"><a href=\"#v-model-的原理\" class=\"headerlink\" title=\"v-model 的原理\"></a>v-model 的原理</h3><p>v-model 只是语法糖而已。<br>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件。<br>text 和 textarea 元素使用 value property 和 input 事件；<br>checkbox 和 radio 使用 checked property 和 change事件；<br>select 字段将 value 作为 prop 并将 change 作为事件。<br>注意：对于需要使用输入法的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。<br>在普通元素上：<br>input v-model&#x3D;’sth’<br>input v-bind:value&#x3D;’sth’ v-on:input&#x3D;’sth &#x3D; $event.target.value’</p>\n<h3 id=\"v-if-和-v-show-的区别\"><a href=\"#v-if-和-v-show-的区别\" class=\"headerlink\" title=\"v-if 和 v-show 的区别\"></a>v-if 和 v-show 的区别</h3><p>控制手段不同<br>编译过程不同<br>编译条件不同</p>\n<p>控制手段：v-show隐藏则是为该元素添加css–display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除</p>\n<p>编译过程：v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换</p>\n<p>编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</p>\n<p>v-show 由false变为true的时候不会触发组件的生命周期</p>\n<p>v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法</p>\n<p>性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p>\n<h3 id=\"computed、-watch-区别\"><a href=\"#computed、-watch-区别\" class=\"headerlink\" title=\"computed、 watch 区别\"></a>computed、 watch 区别</h3><p>computed<br>1、computed是计算属性，也就是依赖某个值或者props通过计算得来得数据；<br>2、 computed的值是在getter执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用getter来计算；<br>3、 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；</p>\n<p>watch<br>1、watch是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；</p>\n<h3 id=\"Vue-的生命周期\"><a href=\"#Vue-的生命周期\" class=\"headerlink\" title=\"Vue 的生命周期\"></a>Vue 的生命周期</h3><p>beforeCreate 在实例初始化之后，数据观测（data observe）和 event&#x2F;watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。</p>\n<p>created 实例已经创建完成之后被调用。在这一步，实例已经完成以下的配置：数据观测（data observe ），属性和方法的运算，watch&#x2F;event 事件回调。这里没有 $el，如果非要想与 DOM 进行交互，可以通过vm.$nextTick 来访问 DOM。</p>\n<p>beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<p>mounted 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom节点。</p>\n<p>beforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁 （patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<p>updated 发生在更新完成之后，当前阶段组件 Dom 已经完成更新。要注意的是避免在此期间更新数据，因为这个可能导致无限循环的更新，该钩子在服务器渲染期间不被调用。</p>\n<p>beforeDestroy 实例销毁之前调用。在这一步，实力仍然完全可用。我们可以在这时进行 善后收尾工作，比如清除定时器。</p>\n<p>destroy Vue实例销毁后调用。调用后，Vue实例指示的东西都会解绑定，所有的事件监听器会被移除，左右的子实例也会被销毁，该钩子在服务器端渲染不被调用。</p>\n<p>activated keep-alive 专属，组件被激活时调用</p>\n<p>deactivated keep-alive 专属，组件被销毁时调用</p>\n<h3 id=\"父子组件生命周期顺序\"><a href=\"#父子组件生命周期顺序\" class=\"headerlink\" title=\"父子组件生命周期顺序\"></a>父子组件生命周期顺序</h3><p>加载渲染过程<br>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted<br>子组件更新过程<br>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated<br>父组件更新过程<br>父beforeUpdate -&gt; 父updated<br>销毁过程<br>父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n<h3 id=\"Vue-组件间通信方式\"><a href=\"#Vue-组件间通信方式\" class=\"headerlink\" title=\"Vue 组件间通信方式\"></a>Vue 组件间通信方式</h3><p>1、props 和 $emit。父组件向子组件传递数据是通过props传递的，子组件传递给父组件是通过$emit触发事件来做到的。</p>\n<p>2、$parent 和 $children 获取单签组件的父组件和当前组件的子组件。</p>\n<p>3、$attrs 和 $listeners A -&gt; B -&gt; C。Vue2.4开始提供了$attrs和$listeners来解决这个问题。</p>\n<p>4、父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。（官方不推荐在实际业务中适用，但是写组件库时很常用。）</p>\n<p>5、$refs 获取组件实例。</p>\n<p>6、envetBus 兄弟组件数据传递，这种情况下可以使用事件总线的方式。</p>\n<p>7、vuex 状态管理。</p>\n<h3 id=\"Vue-的单项数据流\"><a href=\"#Vue-的单项数据流\" class=\"headerlink\" title=\"Vue 的单项数据流\"></a>Vue 的单项数据流</h3><p>数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父组件的状态，从而导致你的应用的数据流向难以理解</p>\n<h3 id=\"keep-alive-组件\"><a href=\"#keep-alive-组件\" class=\"headerlink\" title=\"keep-alive 组件\"></a>keep-alive 组件</h3><p>keep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载</p>\n<h3 id=\"slot-插槽\"><a href=\"#slot-插槽\" class=\"headerlink\" title=\"slot 插槽\"></a>slot 插槽</h3><p>vue里提供了一种将父组件的内容和子组件的模板整合的方法：内容分发，通过slot插槽来实现。</p>\n<p>在组件标签内部写入的内容默认的会被替换掉，如果想要在组件的模板里使用这些内容，就在对应的位置写上slot标签，这个slot标签就代表着这些内容</p>\n<h3 id=\"Vue-检测数组或对象的变化\"><a href=\"#Vue-检测数组或对象的变化\" class=\"headerlink\" title=\"Vue 检测数组或对象的变化\"></a>Vue 检测数组或对象的变化</h3><p>对象是用defineProperty setter。<br>数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对7种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写（AOP 切片思想）。</p>\n<p>所以在 Vue 中修改数组的索引和长度无法监控到。需要通过以上7种变异方法修改数组才会触发数组对应的watcher进行更新</p>\n<h3 id=\"虚拟dom\"><a href=\"#虚拟dom\" class=\"headerlink\" title=\"虚拟dom\"></a>虚拟dom</h3><p>由于在浏览器中操作DOM是很昂贵的。频繁操作DOM，会产生一定性能问题。这就是虚拟Dom的产生原因。Vue2的Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点，是对真实DOM的一层抽象。<br>优点：<br>1、保证性能下限：框架的虚拟DOM需要适配任何上层API可能产生的操作，他的一些DOM操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的DOM操作性能要好很多，因此框架的虚拟DOM至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，既保证性能的下限。<br>2、无需手动操作DOM：我们不需手动去操作DOM，只需要写好 View-Model的 代码逻辑，框架会根据虚拟DOM和数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率。<br>3、跨平台：虚拟DOM本质上是JavaScript对象，而DOM与平台强相关，相比之下虚拟DOM可以进行更方便地跨平台操作，例如服务器端渲染、weex开发等等。<br>缺点：<br>1、无法进行极致优化：虽然虚拟DOM + 合理的优化，足以应对大部分应用的性能需要，但在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化。<br>2、首次渲染大量DOM时，由于多了一层DOM计算，会比innerHTML插入慢。</p>\n<h3 id=\"Vue-中-key-的作用\"><a href=\"#Vue-中-key-的作用\" class=\"headerlink\" title=\"Vue 中 key 的作用\"></a>Vue 中 key 的作用</h3><p>如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改&#x2F;复用相同类型元素的算法。key 是为Vue中Vnode的唯一标识，通过这个key，我们的diff操作可以更准确、更快速。<br>更准确：因为带key就不是就地复用了，在sameNode函数 a.key &#x3D;&#x3D;&#x3D; b.key 对比中可以避免就地复用的情况。所以更加准确。<br>更快速：利用key的唯一性生成map对象来获取对应节点，比遍历方式块。</p>\n<h3 id=\"nextTick-的原理\"><a href=\"#nextTick-的原理\" class=\"headerlink\" title=\"nextTick 的原理\"></a>nextTick 的原理</h3><p>nextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>vuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存</p>\n<p>主要包括以下几个模块：</p>\n<p>State:定义了应用状态的数据结构，可以在这里设置默认的初始化状态。<br>Getter:允许组件从Store中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br>Mutation:是唯一更改 store 中状态的方法，且必须是同步函数。<br>Action:用于提交 mutation，而不是直接变更状态，可以包含任意异步请求。<br>Module:允许将单一的 Store 拆分更多个 store 且同时保存在单一的状态树中。</p>\n<h3 id=\"vue-router-的两种模式\"><a href=\"#vue-router-的两种模式\" class=\"headerlink\" title=\"vue-router 的两种模式\"></a>vue-router 的两种模式</h3><p>hash 模式<br>1、location.has 的值实际就是 URL 中 # 后面的东西。它的特点在于：hash虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p>\n<p>2、可以为 hash 的改变添加监听事件<br>window.addEventListener(“hashchange”,funcRef,false)<br>每一次改变 hash (window.location.hash)，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由“更新视图但不重新请求页面”的功能了<br>特点：兼容性好但是不美观</p>\n<p>history 模式<br>利用 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。</p>\n<p>这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上，他们提供了对历史记录进行修改的功能。这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础</p>\n<p>特点：虽然美观，但是刷新会出现 404 需要后端进行配置</p>\n<h3 id=\"vue-router-有几种导航钩子\"><a href=\"#vue-router-有几种导航钩子\" class=\"headerlink\" title=\"vue-router 有几种导航钩子\"></a>vue-router 有几种导航钩子</h3><p>路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。<br>完整的导航解析流程：<br>1、导航被触发。<br>2、在失活的组件里调用 beforeRouterLeave 守卫。<br>3、调用全局的 beforeEach 守卫。<br>4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。<br>5、在路由配置里面 beforeEnter。<br>6、解析异步路由组件。<br>7、在被激活的组件里调用 beforeRouterEnter。<br>8、调用全局的 beforeResolve 守卫（2.5+）。<br>9、导航被确认。<br>10、调用全局的 afterEach 钩子。<br>11、触发 DOM 更新。<br>12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。</p>\n","excerpt":"<p>常见的vue面试题，整理如下：</p>","more":"<h3 id=\"单页应用-spa\"><a href=\"#单页应用-spa\" class=\"headerlink\" title=\"单页应用(spa)\"></a>单页应用(spa)</h3><p>单页Web应用，就是只有一张Web页面的应用。浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面完成，这一切都由JavaScript来控制。</p>\n<p>单页应用得优势：</p>\n<p>操作体验流畅，媲美本地应用的感觉，切换过程中不会频繁有被“打断”的感觉。<br>因为界面框架都在本地，与服务端的通讯基本只有数据，所以便于迁移，可以用比较小的代价，迁移成桌面产品，或者各种移动端Hybrid产品。<br>完全的前端组件化，前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；<br>API 共享，如果你的服务是多端的（浏览器端、Android、iOS、微信等），单页应用的模式便于你在多个端共用 API，可以显著减少服务端的工作量。容易变化的 UI 部分都已经前置到了多端，只受到业务数据模型影响的 API，更容易稳定下来，便于提供更棒的服务；<br>组件共享，在某些对性能体验要求不高的场景，或者产品处于快速试错阶段，借助于一些技术（Hybrid、React Native），可以在多端共享组件，便于产品的快速迭代，节约资源。</p>\n<p>单页应用得缺点：</p>\n<p>首次加载大量资源，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长；<br>对搜索引擎不友好，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。<br>开发难度相对较高，开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>MVVM全名是 Model View View-Model的缩写<br>Model(模型)：是用于处理应用程序数据逻辑部分。<br>View(视图)：是应用程序中处理数据显示的本分。通常视图是依据模型数据创建的<br>ViewModel层：做了两件事达到了数据的双向绑定，一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。 实现的方式时：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转换成后端的数据。实现的方式是：DOM事件监听。</p>\n<h3 id=\"Vue-的响应式原理（双向数据绑定）\"><a href=\"#Vue-的响应式原理（双向数据绑定）\" class=\"headerlink\" title=\"Vue 的响应式原理（双向数据绑定）\"></a>Vue 的响应式原理（双向数据绑定）</h3><p>整体思路是数据劫持 + 观察者模式</p>\n<p>对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存在它所依赖的 watcher （依赖收集）get，当属性变化后会通知自己对应的 watcher 去更新（派发更新）set。</p>\n<p>1、Object.defineProperty 数据劫持<br>2、使用 getter 收集依赖 ，setter 通知 watcher派发更新。<br>3、watcher 发布订阅模式。</p>\n<h3 id=\"data-为什么是函数\"><a href=\"#data-为什么是函数\" class=\"headerlink\" title=\"data 为什么是函数\"></a>data 为什么是函数</h3><p>组件的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一分新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果</p>\n<h3 id=\"v-model-的原理\"><a href=\"#v-model-的原理\" class=\"headerlink\" title=\"v-model 的原理\"></a>v-model 的原理</h3><p>v-model 只是语法糖而已。<br>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件。<br>text 和 textarea 元素使用 value property 和 input 事件；<br>checkbox 和 radio 使用 checked property 和 change事件；<br>select 字段将 value 作为 prop 并将 change 作为事件。<br>注意：对于需要使用输入法的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。<br>在普通元素上：<br>input v-model&#x3D;’sth’<br>input v-bind:value&#x3D;’sth’ v-on:input&#x3D;’sth &#x3D; $event.target.value’</p>\n<h3 id=\"v-if-和-v-show-的区别\"><a href=\"#v-if-和-v-show-的区别\" class=\"headerlink\" title=\"v-if 和 v-show 的区别\"></a>v-if 和 v-show 的区别</h3><p>控制手段不同<br>编译过程不同<br>编译条件不同</p>\n<p>控制手段：v-show隐藏则是为该元素添加css–display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除</p>\n<p>编译过程：v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换</p>\n<p>编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</p>\n<p>v-show 由false变为true的时候不会触发组件的生命周期</p>\n<p>v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法</p>\n<p>性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p>\n<h3 id=\"computed、-watch-区别\"><a href=\"#computed、-watch-区别\" class=\"headerlink\" title=\"computed、 watch 区别\"></a>computed、 watch 区别</h3><p>computed<br>1、computed是计算属性，也就是依赖某个值或者props通过计算得来得数据；<br>2、 computed的值是在getter执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用getter来计算；<br>3、 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；</p>\n<p>watch<br>1、watch是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；</p>\n<h3 id=\"Vue-的生命周期\"><a href=\"#Vue-的生命周期\" class=\"headerlink\" title=\"Vue 的生命周期\"></a>Vue 的生命周期</h3><p>beforeCreate 在实例初始化之后，数据观测（data observe）和 event&#x2F;watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。</p>\n<p>created 实例已经创建完成之后被调用。在这一步，实例已经完成以下的配置：数据观测（data observe ），属性和方法的运算，watch&#x2F;event 事件回调。这里没有 $el，如果非要想与 DOM 进行交互，可以通过vm.$nextTick 来访问 DOM。</p>\n<p>beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<p>mounted 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom节点。</p>\n<p>beforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁 （patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<p>updated 发生在更新完成之后，当前阶段组件 Dom 已经完成更新。要注意的是避免在此期间更新数据，因为这个可能导致无限循环的更新，该钩子在服务器渲染期间不被调用。</p>\n<p>beforeDestroy 实例销毁之前调用。在这一步，实力仍然完全可用。我们可以在这时进行 善后收尾工作，比如清除定时器。</p>\n<p>destroy Vue实例销毁后调用。调用后，Vue实例指示的东西都会解绑定，所有的事件监听器会被移除，左右的子实例也会被销毁，该钩子在服务器端渲染不被调用。</p>\n<p>activated keep-alive 专属，组件被激活时调用</p>\n<p>deactivated keep-alive 专属，组件被销毁时调用</p>\n<h3 id=\"父子组件生命周期顺序\"><a href=\"#父子组件生命周期顺序\" class=\"headerlink\" title=\"父子组件生命周期顺序\"></a>父子组件生命周期顺序</h3><p>加载渲染过程<br>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted<br>子组件更新过程<br>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated<br>父组件更新过程<br>父beforeUpdate -&gt; 父updated<br>销毁过程<br>父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n<h3 id=\"Vue-组件间通信方式\"><a href=\"#Vue-组件间通信方式\" class=\"headerlink\" title=\"Vue 组件间通信方式\"></a>Vue 组件间通信方式</h3><p>1、props 和 $emit。父组件向子组件传递数据是通过props传递的，子组件传递给父组件是通过$emit触发事件来做到的。</p>\n<p>2、$parent 和 $children 获取单签组件的父组件和当前组件的子组件。</p>\n<p>3、$attrs 和 $listeners A -&gt; B -&gt; C。Vue2.4开始提供了$attrs和$listeners来解决这个问题。</p>\n<p>4、父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。（官方不推荐在实际业务中适用，但是写组件库时很常用。）</p>\n<p>5、$refs 获取组件实例。</p>\n<p>6、envetBus 兄弟组件数据传递，这种情况下可以使用事件总线的方式。</p>\n<p>7、vuex 状态管理。</p>\n<h3 id=\"Vue-的单项数据流\"><a href=\"#Vue-的单项数据流\" class=\"headerlink\" title=\"Vue 的单项数据流\"></a>Vue 的单项数据流</h3><p>数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父组件的状态，从而导致你的应用的数据流向难以理解</p>\n<h3 id=\"keep-alive-组件\"><a href=\"#keep-alive-组件\" class=\"headerlink\" title=\"keep-alive 组件\"></a>keep-alive 组件</h3><p>keep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载</p>\n<h3 id=\"slot-插槽\"><a href=\"#slot-插槽\" class=\"headerlink\" title=\"slot 插槽\"></a>slot 插槽</h3><p>vue里提供了一种将父组件的内容和子组件的模板整合的方法：内容分发，通过slot插槽来实现。</p>\n<p>在组件标签内部写入的内容默认的会被替换掉，如果想要在组件的模板里使用这些内容，就在对应的位置写上slot标签，这个slot标签就代表着这些内容</p>\n<h3 id=\"Vue-检测数组或对象的变化\"><a href=\"#Vue-检测数组或对象的变化\" class=\"headerlink\" title=\"Vue 检测数组或对象的变化\"></a>Vue 检测数组或对象的变化</h3><p>对象是用defineProperty setter。<br>数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对7种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写（AOP 切片思想）。</p>\n<p>所以在 Vue 中修改数组的索引和长度无法监控到。需要通过以上7种变异方法修改数组才会触发数组对应的watcher进行更新</p>\n<h3 id=\"虚拟dom\"><a href=\"#虚拟dom\" class=\"headerlink\" title=\"虚拟dom\"></a>虚拟dom</h3><p>由于在浏览器中操作DOM是很昂贵的。频繁操作DOM，会产生一定性能问题。这就是虚拟Dom的产生原因。Vue2的Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点，是对真实DOM的一层抽象。<br>优点：<br>1、保证性能下限：框架的虚拟DOM需要适配任何上层API可能产生的操作，他的一些DOM操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的DOM操作性能要好很多，因此框架的虚拟DOM至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，既保证性能的下限。<br>2、无需手动操作DOM：我们不需手动去操作DOM，只需要写好 View-Model的 代码逻辑，框架会根据虚拟DOM和数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率。<br>3、跨平台：虚拟DOM本质上是JavaScript对象，而DOM与平台强相关，相比之下虚拟DOM可以进行更方便地跨平台操作，例如服务器端渲染、weex开发等等。<br>缺点：<br>1、无法进行极致优化：虽然虚拟DOM + 合理的优化，足以应对大部分应用的性能需要，但在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化。<br>2、首次渲染大量DOM时，由于多了一层DOM计算，会比innerHTML插入慢。</p>\n<h3 id=\"Vue-中-key-的作用\"><a href=\"#Vue-中-key-的作用\" class=\"headerlink\" title=\"Vue 中 key 的作用\"></a>Vue 中 key 的作用</h3><p>如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改&#x2F;复用相同类型元素的算法。key 是为Vue中Vnode的唯一标识，通过这个key，我们的diff操作可以更准确、更快速。<br>更准确：因为带key就不是就地复用了，在sameNode函数 a.key &#x3D;&#x3D;&#x3D; b.key 对比中可以避免就地复用的情况。所以更加准确。<br>更快速：利用key的唯一性生成map对象来获取对应节点，比遍历方式块。</p>\n<h3 id=\"nextTick-的原理\"><a href=\"#nextTick-的原理\" class=\"headerlink\" title=\"nextTick 的原理\"></a>nextTick 的原理</h3><p>nextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>vuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存</p>\n<p>主要包括以下几个模块：</p>\n<p>State:定义了应用状态的数据结构，可以在这里设置默认的初始化状态。<br>Getter:允许组件从Store中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br>Mutation:是唯一更改 store 中状态的方法，且必须是同步函数。<br>Action:用于提交 mutation，而不是直接变更状态，可以包含任意异步请求。<br>Module:允许将单一的 Store 拆分更多个 store 且同时保存在单一的状态树中。</p>\n<h3 id=\"vue-router-的两种模式\"><a href=\"#vue-router-的两种模式\" class=\"headerlink\" title=\"vue-router 的两种模式\"></a>vue-router 的两种模式</h3><p>hash 模式<br>1、location.has 的值实际就是 URL 中 # 后面的东西。它的特点在于：hash虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p>\n<p>2、可以为 hash 的改变添加监听事件<br>window.addEventListener(“hashchange”,funcRef,false)<br>每一次改变 hash (window.location.hash)，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由“更新视图但不重新请求页面”的功能了<br>特点：兼容性好但是不美观</p>\n<p>history 模式<br>利用 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。</p>\n<p>这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上，他们提供了对历史记录进行修改的功能。这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础</p>\n<p>特点：虽然美观，但是刷新会出现 404 需要后端进行配置</p>\n<h3 id=\"vue-router-有几种导航钩子\"><a href=\"#vue-router-有几种导航钩子\" class=\"headerlink\" title=\"vue-router 有几种导航钩子\"></a>vue-router 有几种导航钩子</h3><p>路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。<br>完整的导航解析流程：<br>1、导航被触发。<br>2、在失活的组件里调用 beforeRouterLeave 守卫。<br>3、调用全局的 beforeEach 守卫。<br>4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。<br>5、在路由配置里面 beforeEnter。<br>6、解析异步路由组件。<br>7、在被激活的组件里调用 beforeRouterEnter。<br>8、调用全局的 beforeResolve 守卫（2.5+）。<br>9、导航被确认。<br>10、调用全局的 afterEach 钩子。<br>11、触发 DOM 更新。<br>12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。</p>"},{"title":"JS数组之reduce","date":"2020-05-12T16:21:42.000Z","_content":"#### Reduce\nJS 数组中的数组方法reduce经常用到，该方法对数组中的每个元素执行callback函数(升序执行)，将其结果汇总为单个返回值。\n<!--more -->\n##### 语法：\n```\narr.reduce(callback(accumulator, currentValue, index, array), initialValue)\n\n```\n##### 参数:\n<code>callback</code>\n执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：\naccumulator\n累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。\n\n<code>currentValue</code>\n数组中正在处理的元素。\n<code>index </code>可选\n数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。\n<code>array</code>可选\n调用reduce()的数组\n<code>initialValue</code>可选\n作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。\n\n回调函数第一次执行时，<code>accumulator</code> 和<code>currentValue</code>的取值有两种情况：如果调用reduce()时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；如果没有提供 <code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。\n\n<strong>\n注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。\n</strong>\n\n#### 例子\n##### 数组求和\n```\nconst  total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n)\n```\n##### 将二维数组转化为一维\n```\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n\n```\n\n##### 计算数组中每个元素出现的次数\n```\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n##### 按属性对object分类\n```\nvar people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    var key = obj[property];\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n}\n\nvar groupedPeople = groupBy(people, 'age');\n// groupedPeople is:\n// { \n//   20: [\n//     { name: 'Max', age: 20 }, \n//     { name: 'Jane', age: 20 }\n//   ], \n//   21: [{ name: 'Alice', age: 21 }] \n// }\n```\n\n##### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n```\n// friends - 对象数组\n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n##### 数组去重\n<strong>\n注意： 如果你正在使用一个可以兼容<code>Set </code>和<code> Array.from() </code>的环境， 你可以使用<code>let orderedArray = Array.from(new Set(myArray)); <code>来获得一个相同元素被移除的数组。\n</strong>\n方法一：\n```\nvar myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd'];\nvar myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue);\n  }\n  return accumulator\n}, [])\n```\n方法二：\n```\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current) => {\n    if(init.length === 0 || init[init.length-1] !== current) {\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n##### 按顺序运行Promise\n```\n/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  );\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5);\n  });\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2);\n  });\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3;\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4);\n  });\n}\n\nconst promiseArr = [p1, p2, f3, p4];\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log);   // 1200\n```\n##### 功能型函数管道\n```\n// Building-blocks to use for composition\nconst double = x => x + x;\nconst triple = x => 3 * x;\nconst quadruple = x => 4 * x;\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n);\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple);\nconst multiply9 = pipe(triple, triple);\nconst multiply16 = pipe(quadruple, quadruple);\nconst multiply24 = pipe(double, triple, quadruple);\n\n// Usage\nmultiply6(6); // 36\nmultiply9(9); // 81\nmultiply16(16); // 256\nmultiply24(10); // 240\n```\n##### 使用 reduce实现map\n```\nif (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, thisArg) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(thisArg, currentValue, index, array);\n      return mappedArray;\n    }, []);\n  };\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n); // [5, 7, , 10]\n```\n\n总之，reduce 方法功能十分强大，以后在项目中多多使用吧。😁","source":"_posts/JS数组之reduce.md","raw":"---\ntitle: JS数组之reduce\ndate: 2020-05-13 00:21:42\ntags: ['JS','reduce']\n---\n#### Reduce\nJS 数组中的数组方法reduce经常用到，该方法对数组中的每个元素执行callback函数(升序执行)，将其结果汇总为单个返回值。\n<!--more -->\n##### 语法：\n```\narr.reduce(callback(accumulator, currentValue, index, array), initialValue)\n\n```\n##### 参数:\n<code>callback</code>\n执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：\naccumulator\n累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。\n\n<code>currentValue</code>\n数组中正在处理的元素。\n<code>index </code>可选\n数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。\n<code>array</code>可选\n调用reduce()的数组\n<code>initialValue</code>可选\n作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。\n\n回调函数第一次执行时，<code>accumulator</code> 和<code>currentValue</code>的取值有两种情况：如果调用reduce()时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；如果没有提供 <code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。\n\n<strong>\n注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。\n</strong>\n\n#### 例子\n##### 数组求和\n```\nconst  total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n)\n```\n##### 将二维数组转化为一维\n```\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n\n```\n\n##### 计算数组中每个元素出现的次数\n```\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n##### 按属性对object分类\n```\nvar people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    var key = obj[property];\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n}\n\nvar groupedPeople = groupBy(people, 'age');\n// groupedPeople is:\n// { \n//   20: [\n//     { name: 'Max', age: 20 }, \n//     { name: 'Jane', age: 20 }\n//   ], \n//   21: [{ name: 'Alice', age: 21 }] \n// }\n```\n\n##### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n```\n// friends - 对象数组\n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n##### 数组去重\n<strong>\n注意： 如果你正在使用一个可以兼容<code>Set </code>和<code> Array.from() </code>的环境， 你可以使用<code>let orderedArray = Array.from(new Set(myArray)); <code>来获得一个相同元素被移除的数组。\n</strong>\n方法一：\n```\nvar myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd'];\nvar myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue);\n  }\n  return accumulator\n}, [])\n```\n方法二：\n```\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current) => {\n    if(init.length === 0 || init[init.length-1] !== current) {\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n##### 按顺序运行Promise\n```\n/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  );\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5);\n  });\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2);\n  });\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3;\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4);\n  });\n}\n\nconst promiseArr = [p1, p2, f3, p4];\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log);   // 1200\n```\n##### 功能型函数管道\n```\n// Building-blocks to use for composition\nconst double = x => x + x;\nconst triple = x => 3 * x;\nconst quadruple = x => 4 * x;\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n);\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple);\nconst multiply9 = pipe(triple, triple);\nconst multiply16 = pipe(quadruple, quadruple);\nconst multiply24 = pipe(double, triple, quadruple);\n\n// Usage\nmultiply6(6); // 36\nmultiply9(9); // 81\nmultiply16(16); // 256\nmultiply24(10); // 240\n```\n##### 使用 reduce实现map\n```\nif (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, thisArg) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(thisArg, currentValue, index, array);\n      return mappedArray;\n    }, []);\n  };\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n); // [5, 7, , 10]\n```\n\n总之，reduce 方法功能十分强大，以后在项目中多多使用吧。😁","slug":"JS数组之reduce","published":1,"updated":"2025-03-20T03:56:32.437Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mos00019cck97mrgxy6","content":"<h4 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h4><p>JS 数组中的数组方法reduce经常用到，该方法对数组中的每个元素执行callback函数(升序执行)，将其结果汇总为单个返回值。</p>\n<span id=\"more\"></span>\n<h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">arr.<span class=\"hljs-built_in\">reduce</span>(callback(accumulator, currentValue, index, <span class=\"hljs-built_in\">array</span>), initialValue)<br><br></code></pre></td></tr></table></figure>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数:\"></a>参数:</h5><p><code>callback</code><br>执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：<br>accumulator<br>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</p>\n<p><code>currentValue</code><br>数组中正在处理的元素。<br><code>index </code>可选<br>数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。<br><code>array</code>可选<br>调用reduce()的数组<br><code>initialValue</code>可选<br>作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>\n<p>回调函数第一次执行时，<code>accumulator</code> 和<code>currentValue</code>的取值有两种情况：如果调用reduce()时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；如果没有提供 <code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<strong>\n注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。\n</strong>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><h5 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">const  total = [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ].<span class=\"hljs-built_in\">reduce</span>(<br>  <span class=\"hljs-function\">(<span class=\"hljs-params\"> acc, cur </span>) =&gt;</span> acc + cur,<br>  <span class=\"hljs-number\">0</span><br>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h5><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">var flattened = <span class=\"hljs-string\">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<br> ( acc, cur ) =&gt; acc.<span class=\"hljs-built_in\">concat</span>(cur),<br> []<br>);<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h5><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">var names = [<span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Tiff&#x27;</span>, <span class=\"hljs-string\">&#x27;Bruce&#x27;</span>, <span class=\"hljs-string\">&#x27;Alice&#x27;</span>];<br><br>var countedNames = names.reduce(<span class=\"hljs-keyword\">function</span> (allNames,<span class=\"hljs-built_in\"> name</span>) &#123; <br>  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(name</span> <span class=\"hljs-keyword\">in</span> allNames) &#123;<br>    allNames<span class=\"hljs-built_in\">[name</span>]++;<br>  &#125;<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    allNames<span class=\"hljs-built_in\">[name</span>] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> allNames;<br>&#125;, &#123;&#125;);<br>// countedNames is:<br>// &#123; <span class=\"hljs-string\">&#x27;Alice&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Tiff&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Bruce&#x27;</span>: <span class=\"hljs-number\">1</span> &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"按属性对object分类\"><a href=\"#按属性对object分类\" class=\"headerlink\" title=\"按属性对object分类\"></a>按属性对object分类</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> people = [<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span> &#125;,<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Max&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;,<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Jane&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;<br>];<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">groupBy</span>(<span class=\"hljs-params\">objectArray, property</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> objectArray.<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">acc, obj</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> key = obj[property];<br>    <span class=\"hljs-keyword\">if</span> (!acc[key]) &#123;<br>      acc[key] = [];<br>    &#125;<br>    acc[key].<span class=\"hljs-built_in\">push</span>(obj);<br>    <span class=\"hljs-keyword\">return</span> acc;<br>  &#125;, &#123;&#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> groupedPeople = <span class=\"hljs-built_in\">groupBy</span>(people, <span class=\"hljs-string\">&#x27;age&#x27;</span>);<br><span class=\"hljs-comment\">// groupedPeople is:</span><br><span class=\"hljs-comment\">// &#123; </span><br><span class=\"hljs-comment\">//   20: [</span><br><span class=\"hljs-comment\">//     &#123; name: &#x27;Max&#x27;, age: 20 &#125;, </span><br><span class=\"hljs-comment\">//     &#123; name: &#x27;Jane&#x27;, age: 20 &#125;</span><br><span class=\"hljs-comment\">//   ], </span><br><span class=\"hljs-comment\">//   21: [&#123; name: &#x27;Alice&#x27;, age: 21 &#125;] </span><br><span class=\"hljs-comment\">// &#125;</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h5><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">// friends - 对象数组<br>// <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">object</span> field &quot;books&quot; - list <span class=\"hljs-keyword\">of</span> favorite books <br>var friends = [&#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Anna&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;Bible&#x27;</span>, <span class=\"hljs-string\">&#x27;Harry Potter&#x27;</span>],<br>  age: <span class=\"hljs-number\">21</span><br>&#125;, &#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;War and peace&#x27;</span>, <span class=\"hljs-string\">&#x27;Romeo and Juliet&#x27;</span>],<br>  age: <span class=\"hljs-number\">26</span><br>&#125;, &#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;The Lord of the Rings&#x27;</span>, <span class=\"hljs-string\">&#x27;The Shining&#x27;</span>],<br>  age: <span class=\"hljs-number\">18</span><br>&#125;];<br><br>// allbooks - list which will contain <span class=\"hljs-keyword\">all</span> friends<span class=\"hljs-string\">&#x27; books +  </span><br><span class=\"hljs-string\">// additional list contained in initialValue</span><br><span class=\"hljs-string\">var allbooks = friends.reduce(function(prev, curr) &#123;</span><br><span class=\"hljs-string\">  return [...prev, ...curr.books];</span><br><span class=\"hljs-string\">&#125;, [&#x27;</span>Alphabet<span class=\"hljs-string\">&#x27;]);</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// allbooks = [</span><br><span class=\"hljs-string\">//   &#x27;</span>Alphabet<span class=\"hljs-string\">&#x27;, &#x27;</span>Bibl<span class=\"hljs-string\">e&#x27;, &#x27;</span>Harry Potter<span class=\"hljs-string\">&#x27;, &#x27;</span>War <span class=\"hljs-keyword\">and</span> peac<span class=\"hljs-string\">e&#x27;, </span><br><span class=\"hljs-string\">//   &#x27;</span>Romeo <span class=\"hljs-keyword\">and</span> Juliet<span class=\"hljs-string\">&#x27;, &#x27;</span>The Lord <span class=\"hljs-keyword\">of</span> the Rings<span class=\"hljs-string\">&#x27;,</span><br><span class=\"hljs-string\">//   &#x27;</span>The Shining<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">// ]</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h5><strong>\n注意： 如果你正在使用一个可以兼容<code>Set </code>和<code> Array.from() </code>的环境， 你可以使用<code>let orderedArray = Array.from(new Set(myArray)); <code>来获得一个相同元素被移除的数组。\n</strong>\n方法一：\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>];<br><span class=\"hljs-keyword\">var</span> myOrderedArray = myArray.<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">accumulator, currentValue</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (accumulator.<span class=\"hljs-built_in\">indexOf</span>(currentValue) === <span class=\"hljs-number\">-1</span>) &#123;<br>    accumulator.<span class=\"hljs-built_in\">push</span>(currentValue);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> accumulator<br>&#125;, [])<br></code></pre></td></tr></table></figure>\n方法二：\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>];<br>let result = arr.<span class=\"hljs-built_in\">sort</span>().<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">init, current</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(init.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">0</span> || init[init.<span class=\"hljs-built_in\">length</span><span class=\"hljs-number\">-1</span>] !== current) &#123;<br>        init.<span class=\"hljs-built_in\">push</span>(current);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> init;<br>&#125;, []);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result); <span class=\"hljs-comment\">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"按顺序运行Promise\"><a href=\"#按顺序运行Promise\" class=\"headerlink\" title=\"按顺序运行Promise\"></a>按顺序运行Promise</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Runs promises from array of functions that can return promises</span><br><span class=\"hljs-comment\"> * in chained manner</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">array</span>&#125; <span class=\"hljs-variable\">arr</span> - promise arr</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">Object</span>&#125; promise object</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runPromiseInSequence</span>(<span class=\"hljs-params\">arr, input</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> arr.<span class=\"hljs-title function_\">reduce</span>(<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">promiseChain, currentFunction</span>) =&gt;</span> promiseChain.<span class=\"hljs-title function_\">then</span>(currentFunction),<br>    <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(input)<br>  );<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 1</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p1</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">5</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 2</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p2</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">2</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-comment\">// function 3  - will be wrapped in a resolved promise by .then()</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f3</span>(<span class=\"hljs-params\">a</span>) &#123;<br> <span class=\"hljs-keyword\">return</span> a * <span class=\"hljs-number\">3</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 4</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p4</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">4</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> promiseArr = [p1, p2, f3, p4];<br><span class=\"hljs-title function_\">runPromiseInSequence</span>(promiseArr, <span class=\"hljs-number\">10</span>)<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);   <span class=\"hljs-comment\">// 1200</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"功能型函数管道\"><a href=\"#功能型函数管道\" class=\"headerlink\" title=\"功能型函数管道\"></a>功能型函数管道</h5><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">// Building-blocks to use for composition</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">double</span> = x =&gt; x + x;<br><span class=\"hljs-keyword\">const</span> triple = x =&gt; <span class=\"hljs-number\">3</span> * x;<br><span class=\"hljs-keyword\">const</span> quadruple = x =&gt; <span class=\"hljs-number\">4</span> * x;<br><br><span class=\"hljs-comment\">// Function composition enabling pipe functionality</span><br><span class=\"hljs-keyword\">const</span> pipe = (...functions) =&gt; input =&gt; functions.reduce(<br>    (acc, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span>) =&gt; <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(acc)</span>,</span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">input</span></span><br><span class=\"hljs-function\">)</span>;<br><br><span class=\"hljs-comment\">// Composed functions for multiplication of specific values</span><br><span class=\"hljs-keyword\">const</span> multiply6 = pipe(<span class=\"hljs-keyword\">double</span>, triple);<br><span class=\"hljs-keyword\">const</span> multiply9 = pipe(triple, triple);<br><span class=\"hljs-keyword\">const</span> multiply16 = pipe(quadruple, quadruple);<br><span class=\"hljs-keyword\">const</span> multiply24 = pipe(<span class=\"hljs-keyword\">double</span>, triple, quadruple);<br><br><span class=\"hljs-comment\">// Usage</span><br>multiply6(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// 36</span><br>multiply9(<span class=\"hljs-number\">9</span>); <span class=\"hljs-comment\">// 81</span><br>multiply16(<span class=\"hljs-number\">16</span>); <span class=\"hljs-comment\">// 256</span><br>multiply24(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 240</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"使用-reduce实现map\"><a href=\"#使用-reduce实现map\" class=\"headerlink\" title=\"使用 reduce实现map\"></a>使用 reduce实现map</h5><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">Array</span>.prototype.mapUsingReduce) &#123;<br>  <span class=\"hljs-keyword\">Array</span>.prototype.mapUsingReduce = functio<span class=\"hljs-meta\">n</span>(callback, thisArg) &#123;<br>    <span class=\"hljs-keyword\">return</span> this.reduce(functio<span class=\"hljs-meta\">n</span>(mappedArray, currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>) &#123;<br>      mappedArray[<span class=\"hljs-keyword\">index</span>] = callback.<span class=\"hljs-keyword\">call</span>(thisArg, currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>);<br>      <span class=\"hljs-keyword\">return</span> mappedArray;<br>    &#125;, []);<br>  &#125;;<br>&#125;<br><br>[1, 2, , 3].mapUsingReduce(<br>  (currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>) =&gt; currentValue + <span class=\"hljs-keyword\">index</span> + <span class=\"hljs-keyword\">array</span>.<span class=\"hljs-keyword\">length</span><br>); // [5, 7, , 10]<br></code></pre></td></tr></table></figure>\n\n<p>总之，reduce 方法功能十分强大，以后在项目中多多使用吧。😁</p>\n","excerpt":"<h4 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h4><p>JS 数组中的数组方法reduce经常用到，该方法对数组中的每个元素执行callback函数(升序执行)，将其结果汇总为单个返回值。</p>","more":"<h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">arr.<span class=\"hljs-built_in\">reduce</span>(callback(accumulator, currentValue, index, <span class=\"hljs-built_in\">array</span>), initialValue)<br><br></code></pre></td></tr></table></figure>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数:\"></a>参数:</h5><p><code>callback</code><br>执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：<br>accumulator<br>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</p>\n<p><code>currentValue</code><br>数组中正在处理的元素。<br><code>index </code>可选<br>数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。<br><code>array</code>可选<br>调用reduce()的数组<br><code>initialValue</code>可选<br>作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>\n<p>回调函数第一次执行时，<code>accumulator</code> 和<code>currentValue</code>的取值有两种情况：如果调用reduce()时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；如果没有提供 <code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<strong>\n注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。\n</strong>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><h5 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">const  total = [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ].<span class=\"hljs-built_in\">reduce</span>(<br>  <span class=\"hljs-function\">(<span class=\"hljs-params\"> acc, cur </span>) =&gt;</span> acc + cur,<br>  <span class=\"hljs-number\">0</span><br>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h5><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">var flattened = <span class=\"hljs-string\">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<br> ( acc, cur ) =&gt; acc.<span class=\"hljs-built_in\">concat</span>(cur),<br> []<br>);<br><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h5><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">var names = [<span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Tiff&#x27;</span>, <span class=\"hljs-string\">&#x27;Bruce&#x27;</span>, <span class=\"hljs-string\">&#x27;Alice&#x27;</span>];<br><br>var countedNames = names.reduce(<span class=\"hljs-keyword\">function</span> (allNames,<span class=\"hljs-built_in\"> name</span>) &#123; <br>  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(name</span> <span class=\"hljs-keyword\">in</span> allNames) &#123;<br>    allNames<span class=\"hljs-built_in\">[name</span>]++;<br>  &#125;<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    allNames<span class=\"hljs-built_in\">[name</span>] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> allNames;<br>&#125;, &#123;&#125;);<br>// countedNames is:<br>// &#123; <span class=\"hljs-string\">&#x27;Alice&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Bob&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Tiff&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Bruce&#x27;</span>: <span class=\"hljs-number\">1</span> &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"按属性对object分类\"><a href=\"#按属性对object分类\" class=\"headerlink\" title=\"按属性对object分类\"></a>按属性对object分类</h5><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> people = [<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span> &#125;,<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Max&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;,<br>  &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Jane&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;<br>];<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">groupBy</span>(<span class=\"hljs-params\">objectArray, property</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> objectArray.<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">acc, obj</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> key = obj[property];<br>    <span class=\"hljs-keyword\">if</span> (!acc[key]) &#123;<br>      acc[key] = [];<br>    &#125;<br>    acc[key].<span class=\"hljs-built_in\">push</span>(obj);<br>    <span class=\"hljs-keyword\">return</span> acc;<br>  &#125;, &#123;&#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> groupedPeople = <span class=\"hljs-built_in\">groupBy</span>(people, <span class=\"hljs-string\">&#x27;age&#x27;</span>);<br><span class=\"hljs-comment\">// groupedPeople is:</span><br><span class=\"hljs-comment\">// &#123; </span><br><span class=\"hljs-comment\">//   20: [</span><br><span class=\"hljs-comment\">//     &#123; name: &#x27;Max&#x27;, age: 20 &#125;, </span><br><span class=\"hljs-comment\">//     &#123; name: &#x27;Jane&#x27;, age: 20 &#125;</span><br><span class=\"hljs-comment\">//   ], </span><br><span class=\"hljs-comment\">//   21: [&#123; name: &#x27;Alice&#x27;, age: 21 &#125;] </span><br><span class=\"hljs-comment\">// &#125;</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h5><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">// friends - 对象数组<br>// <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">object</span> field &quot;books&quot; - list <span class=\"hljs-keyword\">of</span> favorite books <br>var friends = [&#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Anna&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;Bible&#x27;</span>, <span class=\"hljs-string\">&#x27;Harry Potter&#x27;</span>],<br>  age: <span class=\"hljs-number\">21</span><br>&#125;, &#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;War and peace&#x27;</span>, <span class=\"hljs-string\">&#x27;Romeo and Juliet&#x27;</span>],<br>  age: <span class=\"hljs-number\">26</span><br>&#125;, &#123;<br>  <span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>,<br>  books: [<span class=\"hljs-string\">&#x27;The Lord of the Rings&#x27;</span>, <span class=\"hljs-string\">&#x27;The Shining&#x27;</span>],<br>  age: <span class=\"hljs-number\">18</span><br>&#125;];<br><br>// allbooks - list which will contain <span class=\"hljs-keyword\">all</span> friends<span class=\"hljs-string\">&#x27; books +  </span><br><span class=\"hljs-string\">// additional list contained in initialValue</span><br><span class=\"hljs-string\">var allbooks = friends.reduce(function(prev, curr) &#123;</span><br><span class=\"hljs-string\">  return [...prev, ...curr.books];</span><br><span class=\"hljs-string\">&#125;, [&#x27;</span>Alphabet<span class=\"hljs-string\">&#x27;]);</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// allbooks = [</span><br><span class=\"hljs-string\">//   &#x27;</span>Alphabet<span class=\"hljs-string\">&#x27;, &#x27;</span>Bibl<span class=\"hljs-string\">e&#x27;, &#x27;</span>Harry Potter<span class=\"hljs-string\">&#x27;, &#x27;</span>War <span class=\"hljs-keyword\">and</span> peac<span class=\"hljs-string\">e&#x27;, </span><br><span class=\"hljs-string\">//   &#x27;</span>Romeo <span class=\"hljs-keyword\">and</span> Juliet<span class=\"hljs-string\">&#x27;, &#x27;</span>The Lord <span class=\"hljs-keyword\">of</span> the Rings<span class=\"hljs-string\">&#x27;,</span><br><span class=\"hljs-string\">//   &#x27;</span>The Shining<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">// ]</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h5><strong>\n注意： 如果你正在使用一个可以兼容<code>Set </code>和<code> Array.from() </code>的环境， 你可以使用<code>let orderedArray = Array.from(new Set(myArray)); <code>来获得一个相同元素被移除的数组。\n</strong>\n方法一：\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>];<br><span class=\"hljs-keyword\">var</span> myOrderedArray = myArray.<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">accumulator, currentValue</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (accumulator.<span class=\"hljs-built_in\">indexOf</span>(currentValue) === <span class=\"hljs-number\">-1</span>) &#123;<br>    accumulator.<span class=\"hljs-built_in\">push</span>(currentValue);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> accumulator<br>&#125;, [])<br></code></pre></td></tr></table></figure>\n方法二：\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>];<br>let result = arr.<span class=\"hljs-built_in\">sort</span>().<span class=\"hljs-built_in\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">init, current</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(init.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">0</span> || init[init.<span class=\"hljs-built_in\">length</span><span class=\"hljs-number\">-1</span>] !== current) &#123;<br>        init.<span class=\"hljs-built_in\">push</span>(current);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> init;<br>&#125;, []);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result); <span class=\"hljs-comment\">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"按顺序运行Promise\"><a href=\"#按顺序运行Promise\" class=\"headerlink\" title=\"按顺序运行Promise\"></a>按顺序运行Promise</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Runs promises from array of functions that can return promises</span><br><span class=\"hljs-comment\"> * in chained manner</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">array</span>&#125; <span class=\"hljs-variable\">arr</span> - promise arr</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> &#123;<span class=\"hljs-type\">Object</span>&#125; promise object</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">runPromiseInSequence</span>(<span class=\"hljs-params\">arr, input</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> arr.<span class=\"hljs-title function_\">reduce</span>(<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">promiseChain, currentFunction</span>) =&gt;</span> promiseChain.<span class=\"hljs-title function_\">then</span>(currentFunction),<br>    <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(input)<br>  );<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 1</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p1</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">5</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 2</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p2</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">2</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-comment\">// function 3  - will be wrapped in a resolved promise by .then()</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f3</span>(<span class=\"hljs-params\">a</span>) &#123;<br> <span class=\"hljs-keyword\">return</span> a * <span class=\"hljs-number\">3</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// promise function 4</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p4</span>(<span class=\"hljs-params\">a</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">resolve</span>(a * <span class=\"hljs-number\">4</span>);<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> promiseArr = [p1, p2, f3, p4];<br><span class=\"hljs-title function_\">runPromiseInSequence</span>(promiseArr, <span class=\"hljs-number\">10</span>)<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);   <span class=\"hljs-comment\">// 1200</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"功能型函数管道\"><a href=\"#功能型函数管道\" class=\"headerlink\" title=\"功能型函数管道\"></a>功能型函数管道</h5><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">// Building-blocks to use for composition</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">double</span> = x =&gt; x + x;<br><span class=\"hljs-keyword\">const</span> triple = x =&gt; <span class=\"hljs-number\">3</span> * x;<br><span class=\"hljs-keyword\">const</span> quadruple = x =&gt; <span class=\"hljs-number\">4</span> * x;<br><br><span class=\"hljs-comment\">// Function composition enabling pipe functionality</span><br><span class=\"hljs-keyword\">const</span> pipe = (...functions) =&gt; input =&gt; functions.reduce(<br>    (acc, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span>) =&gt; <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(acc)</span>,</span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">input</span></span><br><span class=\"hljs-function\">)</span>;<br><br><span class=\"hljs-comment\">// Composed functions for multiplication of specific values</span><br><span class=\"hljs-keyword\">const</span> multiply6 = pipe(<span class=\"hljs-keyword\">double</span>, triple);<br><span class=\"hljs-keyword\">const</span> multiply9 = pipe(triple, triple);<br><span class=\"hljs-keyword\">const</span> multiply16 = pipe(quadruple, quadruple);<br><span class=\"hljs-keyword\">const</span> multiply24 = pipe(<span class=\"hljs-keyword\">double</span>, triple, quadruple);<br><br><span class=\"hljs-comment\">// Usage</span><br>multiply6(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// 36</span><br>multiply9(<span class=\"hljs-number\">9</span>); <span class=\"hljs-comment\">// 81</span><br>multiply16(<span class=\"hljs-number\">16</span>); <span class=\"hljs-comment\">// 256</span><br>multiply24(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 240</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"使用-reduce实现map\"><a href=\"#使用-reduce实现map\" class=\"headerlink\" title=\"使用 reduce实现map\"></a>使用 reduce实现map</h5><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">Array</span>.prototype.mapUsingReduce) &#123;<br>  <span class=\"hljs-keyword\">Array</span>.prototype.mapUsingReduce = functio<span class=\"hljs-meta\">n</span>(callback, thisArg) &#123;<br>    <span class=\"hljs-keyword\">return</span> this.reduce(functio<span class=\"hljs-meta\">n</span>(mappedArray, currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>) &#123;<br>      mappedArray[<span class=\"hljs-keyword\">index</span>] = callback.<span class=\"hljs-keyword\">call</span>(thisArg, currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>);<br>      <span class=\"hljs-keyword\">return</span> mappedArray;<br>    &#125;, []);<br>  &#125;;<br>&#125;<br><br>[1, 2, , 3].mapUsingReduce(<br>  (currentValue, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-keyword\">array</span>) =&gt; currentValue + <span class=\"hljs-keyword\">index</span> + <span class=\"hljs-keyword\">array</span>.<span class=\"hljs-keyword\">length</span><br>); // [5, 7, , 10]<br></code></pre></td></tr></table></figure>\n\n<p>总之，reduce 方法功能十分强大，以后在项目中多多使用吧。😁</p>"},{"title":"JS类型判断","date":"2020-04-13T16:29:04.000Z","_content":"\n我们都知道 JS 是弱类型语言，跟java等强类型语言不同，我们只能在运行时才真正知道某个变量是属于哪一种类型，因为在此之前，你可能有意无意的改变了变量的类型，因为变量的值及其数据类型可在声明周期内改变，这也是bug的来源，相信很多小伙伴都深有体会😆。\n<!-- more -->\n### 数据类型\n\n我们都知道，JS 中变量分为两种类型。基本类型和引用类型。\n\n#### 基本类型\n基本类型包括```Undefined、Null、String、Number、Boolean、Symbol```。基本类型按值访问，所以我们可操作保存在变量中实际的值。\n\n基本类型的值在内存中占据固定大小的空间，是被保存在栈内存中。从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本，这两个值完全独立地存放在栈内存中。\n\n#### 引用类型\n引用类型是对象类型，包括```Object、Array、Function、Data、Regexp、Error```。引用类型的值是保存在堆内存中的对象，JS不允许直接访问内存中的位置，也就是说不能直接访问操作对象的内存空间。\n\n操作对象时，实际上是在操作对象的引用，所以说引用类型的值是按引用访问的。从而有```[1, 2] === [1, 2]```为```false```。","source":"_posts/JS类型判断.md","raw":"---\ntitle: JS类型判断\ndate: 2020-04-14 00:29:04\ntags: ['JS','js类型']\n---\n\n我们都知道 JS 是弱类型语言，跟java等强类型语言不同，我们只能在运行时才真正知道某个变量是属于哪一种类型，因为在此之前，你可能有意无意的改变了变量的类型，因为变量的值及其数据类型可在声明周期内改变，这也是bug的来源，相信很多小伙伴都深有体会😆。\n<!-- more -->\n### 数据类型\n\n我们都知道，JS 中变量分为两种类型。基本类型和引用类型。\n\n#### 基本类型\n基本类型包括```Undefined、Null、String、Number、Boolean、Symbol```。基本类型按值访问，所以我们可操作保存在变量中实际的值。\n\n基本类型的值在内存中占据固定大小的空间，是被保存在栈内存中。从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本，这两个值完全独立地存放在栈内存中。\n\n#### 引用类型\n引用类型是对象类型，包括```Object、Array、Function、Data、Regexp、Error```。引用类型的值是保存在堆内存中的对象，JS不允许直接访问内存中的位置，也就是说不能直接访问操作对象的内存空间。\n\n操作对象时，实际上是在操作对象的引用，所以说引用类型的值是按引用访问的。从而有```[1, 2] === [1, 2]```为```false```。","slug":"JS类型判断","published":1,"updated":"2025-03-20T03:56:32.437Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mov00039cck635mb5f8","content":"<p>我们都知道 JS 是弱类型语言，跟java等强类型语言不同，我们只能在运行时才真正知道某个变量是属于哪一种类型，因为在此之前，你可能有意无意的改变了变量的类型，因为变量的值及其数据类型可在声明周期内改变，这也是bug的来源，相信很多小伙伴都深有体会😆。</p>\n<span id=\"more\"></span>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>我们都知道，JS 中变量分为两种类型。基本类型和引用类型。</p>\n<h4 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h4><p>基本类型包括<code>Undefined、Null、String、Number、Boolean、Symbol</code>。基本类型按值访问，所以我们可操作保存在变量中实际的值。</p>\n<p>基本类型的值在内存中占据固定大小的空间，是被保存在栈内存中。从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本，这两个值完全独立地存放在栈内存中。</p>\n<h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>引用类型是对象类型，包括<code>Object、Array、Function、Data、Regexp、Error</code>。引用类型的值是保存在堆内存中的对象，JS不允许直接访问内存中的位置，也就是说不能直接访问操作对象的内存空间。</p>\n<p>操作对象时，实际上是在操作对象的引用，所以说引用类型的值是按引用访问的。从而有<code>[1, 2] === [1, 2]</code>为<code>false</code>。</p>\n","excerpt":"<p>我们都知道 JS 是弱类型语言，跟java等强类型语言不同，我们只能在运行时才真正知道某个变量是属于哪一种类型，因为在此之前，你可能有意无意的改变了变量的类型，因为变量的值及其数据类型可在声明周期内改变，这也是bug的来源，相信很多小伙伴都深有体会😆。</p>","more":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>我们都知道，JS 中变量分为两种类型。基本类型和引用类型。</p>\n<h4 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h4><p>基本类型包括<code>Undefined、Null、String、Number、Boolean、Symbol</code>。基本类型按值访问，所以我们可操作保存在变量中实际的值。</p>\n<p>基本类型的值在内存中占据固定大小的空间，是被保存在栈内存中。从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本，这两个值完全独立地存放在栈内存中。</p>\n<h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>引用类型是对象类型，包括<code>Object、Array、Function、Data、Regexp、Error</code>。引用类型的值是保存在堆内存中的对象，JS不允许直接访问内存中的位置，也就是说不能直接访问操作对象的内存空间。</p>\n<p>操作对象时，实际上是在操作对象的引用，所以说引用类型的值是按引用访问的。从而有<code>[1, 2] === [1, 2]</code>为<code>false</code>。</p>"},{"title":"LeetCode算法题之两数之和","date":"2019-01-09T15:08:29.000Z","_content":"### 题目\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n<!-- more -->\n示例:\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n\n所以返回 [0, 1]\n```\n### 解答\n我的解答，简单暴力。。\n#### 解答一\n* 时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n^2)。\n* 空间复杂度：O(1)\n* 执行时间 148ms\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    let length = nums.length;\n    for(let i = 0; i <length; i++){\n        for(let j = i+1; j < length; j++){\n            if(nums[i] + nums[j] === target){\n                return [i,j];\n            }\n        }\n    }\n};\n```\n#### 解答二\n\n用es6的Map , 遍历一次即可\n\n```\nvar twoSum = function(nums, target) {\n    let targetMap = new Map()\n    for (let i = 0; i < nums.length; i++) {\n      const key = target - nums[i]\n      if (targetMap.has(key)) {\n        return [targetMap.get(key), i]\n      }\n      targetMap.set(nums[i], i)\n    }\n};\n```","source":"_posts/LeetCode算法题之两数之和.md","raw":"---\ntitle: LeetCode算法题之两数之和\ndate: 2019-01-09 23:08:29\ntags: ['LeetCode', '算法', '两数之和']\n---\n### 题目\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n<!-- more -->\n示例:\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n\n所以返回 [0, 1]\n```\n### 解答\n我的解答，简单暴力。。\n#### 解答一\n* 时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n^2)。\n* 空间复杂度：O(1)\n* 执行时间 148ms\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    let length = nums.length;\n    for(let i = 0; i <length; i++){\n        for(let j = i+1; j < length; j++){\n            if(nums[i] + nums[j] === target){\n                return [i,j];\n            }\n        }\n    }\n};\n```\n#### 解答二\n\n用es6的Map , 遍历一次即可\n\n```\nvar twoSum = function(nums, target) {\n    let targetMap = new Map()\n    for (let i = 0; i < nums.length; i++) {\n      const key = target - nums[i]\n      if (targetMap.has(key)) {\n        return [targetMap.get(key), i]\n      }\n      targetMap.set(nums[i], i)\n    }\n};\n```","slug":"LeetCode算法题之两数之和","published":1,"updated":"2025-03-20T03:56:32.438Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mow00049cck4dg68s94","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<span id=\"more\"></span>\n<p>示例:</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">给定 nums = <span class=\"hljs-comment\">[2, 7, 11, 15]</span>, target = 9<br><br>因为 nums<span class=\"hljs-comment\">[0]</span> + nums<span class=\"hljs-comment\">[1]</span> = 2 + 7 = 9<br><br>所以返回 <span class=\"hljs-comment\">[0, 1]</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><p>我的解答，简单暴力。。</p>\n<h4 id=\"解答一\"><a href=\"#解答一\" class=\"headerlink\" title=\"解答一\"></a>解答一</h4><ul>\n<li>时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n^2)。</li>\n<li>空间复杂度：O(1)</li>\n<li>执行时间 148ms</li>\n</ul>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;number[]&#125; nums</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;number&#125; target</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> &#123;number[]&#125;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">var</span> twoSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(nums, target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> length = nums.length;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;length; i++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = i+<span class=\"hljs-number\">1</span>; j &lt; length; j++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(nums[i] + nums[j] === target)&#123;<br>                <span class=\"hljs-keyword\">return</span> [i,j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h4 id=\"解答二\"><a href=\"#解答二\" class=\"headerlink\" title=\"解答二\"></a>解答二</h4><p>用es6的Map , 遍历一次即可</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">var</span> twoSum = function(nums, target) &#123;<br>    <span class=\"hljs-built_in\">let</span> targetMap = <span class=\"hljs-built_in\">new</span> Map()<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">length</span>; i++) &#123;<br>      const <span class=\"hljs-built_in\">key</span> = target - nums[i]<br>      <span class=\"hljs-keyword\">if</span> (targetMap.has(<span class=\"hljs-built_in\">key</span>)) &#123;<br>        <span class=\"hljs-built_in\">return</span> [targetMap.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-built_in\">key</span>), i]<br>      &#125;<br>      targetMap.set(nums[i], i)<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>","excerpt":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>","more":"<p>示例:</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">给定 nums = <span class=\"hljs-comment\">[2, 7, 11, 15]</span>, target = 9<br><br>因为 nums<span class=\"hljs-comment\">[0]</span> + nums<span class=\"hljs-comment\">[1]</span> = 2 + 7 = 9<br><br>所以返回 <span class=\"hljs-comment\">[0, 1]</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><p>我的解答，简单暴力。。</p>\n<h4 id=\"解答一\"><a href=\"#解答一\" class=\"headerlink\" title=\"解答一\"></a>解答一</h4><ul>\n<li>时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n^2)。</li>\n<li>空间复杂度：O(1)</li>\n<li>执行时间 148ms</li>\n</ul>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;number[]&#125; nums</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;number&#125; target</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> &#123;number[]&#125;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">var</span> twoSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(nums, target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> length = nums.length;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;length; i++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = i+<span class=\"hljs-number\">1</span>; j &lt; length; j++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(nums[i] + nums[j] === target)&#123;<br>                <span class=\"hljs-keyword\">return</span> [i,j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h4 id=\"解答二\"><a href=\"#解答二\" class=\"headerlink\" title=\"解答二\"></a>解答二</h4><p>用es6的Map , 遍历一次即可</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">var</span> twoSum = function(nums, target) &#123;<br>    <span class=\"hljs-built_in\">let</span> targetMap = <span class=\"hljs-built_in\">new</span> Map()<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">length</span>; i++) &#123;<br>      const <span class=\"hljs-built_in\">key</span> = target - nums[i]<br>      <span class=\"hljs-keyword\">if</span> (targetMap.has(<span class=\"hljs-built_in\">key</span>)) &#123;<br>        <span class=\"hljs-built_in\">return</span> [targetMap.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-built_in\">key</span>), i]<br>      &#125;<br>      targetMap.set(nums[i], i)<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"defer async","date":"2022-02-19T10:20:14.000Z","_content":"\n我们都知道，普通的<code>script</code>标签加载 <code>js</code>会阻塞页面解析，因此优化措施可以将script放到<code></body></code>标签前面。但还有一种更好的做法是加<code>defer </code>和 <code>async</code>属性。这两个属性使得<code>script</code>都不会阻塞<code>DOM</code>的渲染\n<!-- more -->\n### defer\n\n如果script标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续DOM的渲染；\n如果有多个设置了defer的script标签存在，则会按照顺序执行所有的script；\ndefer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行。\n\n应用场景: 如果你的脚本代码依赖于页面中的DOM元素（文档是否解析完毕），或者被其他脚本文件依赖。\n例：\n1.评论框\n2.代码语法高亮\n3.polyfill.js\n\n### async\n\nasync脚本会在加载完毕后执行。\nsync的执行，并不会按着script在页面中的顺序来执行，而是谁先加载完谁执行。\nasync脚本的加载不计入DOMContentLoaded事件统计\n\n应用场景: 如果你的脚本并不关心页面中的DOM元素（文档是否解析完毕），并且也不会产生其他脚本需要的数据。\n\n例：\n1.百度统计","source":"_posts/defer-async.md","raw":"---\ntitle: defer async\ndate: 2022-02-19 18:20:14\ntags:\n---\n\n我们都知道，普通的<code>script</code>标签加载 <code>js</code>会阻塞页面解析，因此优化措施可以将script放到<code></body></code>标签前面。但还有一种更好的做法是加<code>defer </code>和 <code>async</code>属性。这两个属性使得<code>script</code>都不会阻塞<code>DOM</code>的渲染\n<!-- more -->\n### defer\n\n如果script标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续DOM的渲染；\n如果有多个设置了defer的script标签存在，则会按照顺序执行所有的script；\ndefer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行。\n\n应用场景: 如果你的脚本代码依赖于页面中的DOM元素（文档是否解析完毕），或者被其他脚本文件依赖。\n例：\n1.评论框\n2.代码语法高亮\n3.polyfill.js\n\n### async\n\nasync脚本会在加载完毕后执行。\nsync的执行，并不会按着script在页面中的顺序来执行，而是谁先加载完谁执行。\nasync脚本的加载不计入DOMContentLoaded事件统计\n\n应用场景: 如果你的脚本并不关心页面中的DOM元素（文档是否解析完毕），并且也不会产生其他脚本需要的数据。\n\n例：\n1.百度统计","slug":"defer-async","published":1,"updated":"2025-03-20T03:56:32.438Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mox00059cck19hs4ykt","content":"<p>我们都知道，普通的<code>script</code>标签加载 <code>js</code>会阻塞页面解析，因此优化措施可以将script放到<code></body></code>标签前面。但还有一种更好的做法是加<code>defer </code>和 <code>async</code>属性。这两个属性使得<code>script</code>都不会阻塞<code>DOM</code>的渲染</p>\n<span id=\"more\"></span>\n<h3 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h3><p>如果script标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续DOM的渲染；<br>如果有多个设置了defer的script标签存在，则会按照顺序执行所有的script；<br>defer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行。</p>\n<p>应用场景: 如果你的脚本代码依赖于页面中的DOM元素（文档是否解析完毕），或者被其他脚本文件依赖。<br>例：<br>1.评论框<br>2.代码语法高亮<br>3.polyfill.js</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>async脚本会在加载完毕后执行。<br>sync的执行，并不会按着script在页面中的顺序来执行，而是谁先加载完谁执行。<br>async脚本的加载不计入DOMContentLoaded事件统计</p>\n<p>应用场景: 如果你的脚本并不关心页面中的DOM元素（文档是否解析完毕），并且也不会产生其他脚本需要的数据。</p>\n<p>例：<br>1.百度统计</p>\n","excerpt":"<p>我们都知道，普通的<code>script</code>标签加载 <code>js</code>会阻塞页面解析，因此优化措施可以将script放到<code></body></code>标签前面。但还有一种更好的做法是加<code>defer </code>和 <code>async</code>属性。这两个属性使得<code>script</code>都不会阻塞<code>DOM</code>的渲染</p>","more":"<h3 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h3><p>如果script标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续DOM的渲染；<br>如果有多个设置了defer的script标签存在，则会按照顺序执行所有的script；<br>defer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行。</p>\n<p>应用场景: 如果你的脚本代码依赖于页面中的DOM元素（文档是否解析完毕），或者被其他脚本文件依赖。<br>例：<br>1.评论框<br>2.代码语法高亮<br>3.polyfill.js</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>async脚本会在加载完毕后执行。<br>sync的执行，并不会按着script在页面中的顺序来执行，而是谁先加载完谁执行。<br>async脚本的加载不计入DOMContentLoaded事件统计</p>\n<p>应用场景: 如果你的脚本并不关心页面中的DOM元素（文档是否解析完毕），并且也不会产生其他脚本需要的数据。</p>\n<p>例：<br>1.百度统计</p>"},{"title":"es6数组方法","date":"2022-02-17T08:47:53.000Z","_content":"\nes5数组方法用的比较多，比较熟了，es6比较少，这里总结一下。\n<!-- more -->\n### Array.from()\n用于将类数组和可遍历的对象转换为真正的数组\n类数组：就是类似数组的对象，本质上要有length属性，说到底，任何拥有length属性的对象，都可以通过Array.from()方法转换为数组。\n可遍历的对象：ES6新增的数据结构set和map\n\n```\nlet myArray = {'0':'a','1':'b','2':'c'};\nlet arr = Array.from(myArray);\nconsole.log(arr);   //[]由于没有length属性打印结果为一个空数组\n\nlet myArray = {'0':'a','1':'b','2':'c',length:3};\nlet arr = Array.from(myArray);\nconsole.log(arr);  //[\"a\", \"b\", \"c\"]\n\nconsole.log(Array.from({length:2}));  //[undefined, undefined]\n```\n\n### fill()\n填充一个数组，一般用于数组的初始化\n\n```\nvar arr = ['a','b','c'];\nconsole.log(arr.fill(1)); // [1, 1, 1]\n```\n\n### keys()\nkeys()遍历出所有的索引值\n\n```\nfor (let index of ['a', 'b'].keys()) {\n    console.log(index);\n}  //0  1\n\n```\n### valueOf()\nvalueOf()遍历所有的值\n```\nfor (let index of ['a', 'b'].valueOf()) {\n    console.log(index);\n}  //a  b\n```\n### entries()\nentries()遍历值和索引\n```\nfor (let index of ['a', 'b'].entries()) {\n    console.log(index);\n}  //[0, \"a\"] [1, \"b\"]\n```\n","source":"_posts/es6数组方法.md","raw":"---\ntitle: es6数组方法\ndate: 2022-02-17 16:47:53\ntags:\n---\n\nes5数组方法用的比较多，比较熟了，es6比较少，这里总结一下。\n<!-- more -->\n### Array.from()\n用于将类数组和可遍历的对象转换为真正的数组\n类数组：就是类似数组的对象，本质上要有length属性，说到底，任何拥有length属性的对象，都可以通过Array.from()方法转换为数组。\n可遍历的对象：ES6新增的数据结构set和map\n\n```\nlet myArray = {'0':'a','1':'b','2':'c'};\nlet arr = Array.from(myArray);\nconsole.log(arr);   //[]由于没有length属性打印结果为一个空数组\n\nlet myArray = {'0':'a','1':'b','2':'c',length:3};\nlet arr = Array.from(myArray);\nconsole.log(arr);  //[\"a\", \"b\", \"c\"]\n\nconsole.log(Array.from({length:2}));  //[undefined, undefined]\n```\n\n### fill()\n填充一个数组，一般用于数组的初始化\n\n```\nvar arr = ['a','b','c'];\nconsole.log(arr.fill(1)); // [1, 1, 1]\n```\n\n### keys()\nkeys()遍历出所有的索引值\n\n```\nfor (let index of ['a', 'b'].keys()) {\n    console.log(index);\n}  //0  1\n\n```\n### valueOf()\nvalueOf()遍历所有的值\n```\nfor (let index of ['a', 'b'].valueOf()) {\n    console.log(index);\n}  //a  b\n```\n### entries()\nentries()遍历值和索引\n```\nfor (let index of ['a', 'b'].entries()) {\n    console.log(index);\n}  //[0, \"a\"] [1, \"b\"]\n```\n","slug":"es6数组方法","published":1,"updated":"2025-03-20T03:56:32.439Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8moy00079cckbpx28p71","content":"<p>es5数组方法用的比较多，比较熟了，es6比较少，这里总结一下。</p>\n<span id=\"more\"></span>\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>用于将类数组和可遍历的对象转换为真正的数组<br>类数组：就是类似数组的对象，本质上要有length属性，说到底，任何拥有length属性的对象，都可以通过Array.from()方法转换为数组。<br>可遍历的对象：ES6新增的数据结构set和map</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">let myArray = &#123;<span class=\"hljs-string\">&#x27;0&#x27;</span>:<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>:<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>:<span class=\"hljs-string\">&#x27;c&#x27;</span>&#125;;<br>let arr = <span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(myArray);<br>console.<span class=\"hljs-meta\">log</span>(arr);   //[]由于没有<span class=\"hljs-keyword\">length</span>属性打印结果为一个空数组<br><br>let myArray = &#123;<span class=\"hljs-string\">&#x27;0&#x27;</span>:<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>:<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>:<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-keyword\">length</span>:3&#125;;<br>let arr = <span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(myArray);<br>console.<span class=\"hljs-meta\">log</span>(arr);  //[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]<br><br>console.<span class=\"hljs-meta\">log</span>(<span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(&#123;<span class=\"hljs-keyword\">length</span>:2&#125;));  //[undefined, undefined]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>填充一个数组，一般用于数组的初始化</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>];<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr.fill(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// [1, 1, 1]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h3><p>keys()遍历出所有的索引值</p>\n<figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flix\">for (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> of [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].keys()) &#123;<br>    console.log(<span class=\"hljs-keyword\">index</span>);<br>&#125;  <span class=\"hljs-comment\">//0  1</span><br><br></code></pre></td></tr></table></figure>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><p>valueOf()遍历所有的值</p>\n<figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flix\">for (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> of [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].valueOf()) &#123;<br>    console.log(<span class=\"hljs-keyword\">index</span>);<br>&#125;  <span class=\"hljs-comment\">//a  b</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h3><p>entries()遍历值和索引</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">for (let index of <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]</span><span class=\"hljs-selector-class\">.entries</span>()) &#123;<br>    console<span class=\"hljs-selector-class\">.log</span>(index);<br>&#125;  //<span class=\"hljs-selector-attr\">[0, <span class=\"hljs-string\">&quot;a&quot;</span>]</span> <span class=\"hljs-selector-attr\">[1, <span class=\"hljs-string\">&quot;b&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n","excerpt":"<p>es5数组方法用的比较多，比较熟了，es6比较少，这里总结一下。</p>","more":"<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>用于将类数组和可遍历的对象转换为真正的数组<br>类数组：就是类似数组的对象，本质上要有length属性，说到底，任何拥有length属性的对象，都可以通过Array.from()方法转换为数组。<br>可遍历的对象：ES6新增的数据结构set和map</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">let myArray = &#123;<span class=\"hljs-string\">&#x27;0&#x27;</span>:<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>:<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>:<span class=\"hljs-string\">&#x27;c&#x27;</span>&#125;;<br>let arr = <span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(myArray);<br>console.<span class=\"hljs-meta\">log</span>(arr);   //[]由于没有<span class=\"hljs-keyword\">length</span>属性打印结果为一个空数组<br><br>let myArray = &#123;<span class=\"hljs-string\">&#x27;0&#x27;</span>:<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>:<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>:<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-keyword\">length</span>:3&#125;;<br>let arr = <span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(myArray);<br>console.<span class=\"hljs-meta\">log</span>(arr);  //[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]<br><br>console.<span class=\"hljs-meta\">log</span>(<span class=\"hljs-keyword\">Array</span>.<span class=\"hljs-keyword\">from</span>(&#123;<span class=\"hljs-keyword\">length</span>:2&#125;));  //[undefined, undefined]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>填充一个数组，一般用于数组的初始化</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>];<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr.fill(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// [1, 1, 1]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h3><p>keys()遍历出所有的索引值</p>\n<figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flix\">for (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> of [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].keys()) &#123;<br>    console.log(<span class=\"hljs-keyword\">index</span>);<br>&#125;  <span class=\"hljs-comment\">//0  1</span><br><br></code></pre></td></tr></table></figure>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><p>valueOf()遍历所有的值</p>\n<figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flix\">for (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> of [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].valueOf()) &#123;<br>    console.log(<span class=\"hljs-keyword\">index</span>);<br>&#125;  <span class=\"hljs-comment\">//a  b</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h3><p>entries()遍历值和索引</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">for (let index of <span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]</span><span class=\"hljs-selector-class\">.entries</span>()) &#123;<br>    console<span class=\"hljs-selector-class\">.log</span>(index);<br>&#125;  //<span class=\"hljs-selector-attr\">[0, <span class=\"hljs-string\">&quot;a&quot;</span>]</span> <span class=\"hljs-selector-attr\">[1, <span class=\"hljs-string\">&quot;b&quot;</span>]</span><br></code></pre></td></tr></table></figure>"},{"title":"github actions 前端部署服务器","date":"2021-07-03T17:32:22.000Z","_content":"\n前端每次部署都要手动打包感觉好麻烦，浪费了大量时间不说还容易出错。所以就研究了一下github 的github actions。github自己推出的持续集成工具。\n<!-- more -->\n```\nname: Blog CI/CD\n\non:\n  push:\n    branches:\n      - master  # 只在master上push触发部署\n\njobs:\n  build-production:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x] # 配置所需node版本\n    steps:  # 自动化步骤\n    - uses: actions/checkout@v2   # 第一步，检出仓库副本\n\n    - name: Use Node.js ${{ matrix.node-version }} #规定node.js版本(可不配置)\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Install dependencies  # 第二步，安装依赖\n      run: npm install\n\n    - name: Build                 # 第三步，打包代码\n      run: npm run build --if-present\n\n    # Deploy\n    - name: Deploy\n      uses: easingthemes/ssh-deploy@v2.0.7\n      env:\n        SSH_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN }} # 服务端私钥\n        ARGS: \"-avz --delete\"\n        SOURCE: \"dist/\"\n        REMOTE_HOST: ${{ secrets.SSH_HOST }}\n        REMOTE_USER: ${{ secrets.SSH_USERNAME }}\n        TARGET: ${{ secrets.TARGET }}\n\n\n```\n","source":"_posts/github-actions-前端部署服务器.md","raw":"---\ntitle: github actions 前端部署服务器\ndate: 2021-07-04 01:32:22\ntags: ['CI', '部署', '持续集成']\n---\n\n前端每次部署都要手动打包感觉好麻烦，浪费了大量时间不说还容易出错。所以就研究了一下github 的github actions。github自己推出的持续集成工具。\n<!-- more -->\n```\nname: Blog CI/CD\n\non:\n  push:\n    branches:\n      - master  # 只在master上push触发部署\n\njobs:\n  build-production:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x] # 配置所需node版本\n    steps:  # 自动化步骤\n    - uses: actions/checkout@v2   # 第一步，检出仓库副本\n\n    - name: Use Node.js ${{ matrix.node-version }} #规定node.js版本(可不配置)\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Install dependencies  # 第二步，安装依赖\n      run: npm install\n\n    - name: Build                 # 第三步，打包代码\n      run: npm run build --if-present\n\n    # Deploy\n    - name: Deploy\n      uses: easingthemes/ssh-deploy@v2.0.7\n      env:\n        SSH_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN }} # 服务端私钥\n        ARGS: \"-avz --delete\"\n        SOURCE: \"dist/\"\n        REMOTE_HOST: ${{ secrets.SSH_HOST }}\n        REMOTE_USER: ${{ secrets.SSH_USERNAME }}\n        TARGET: ${{ secrets.TARGET }}\n\n\n```\n","slug":"github-actions-前端部署服务器","published":1,"updated":"2025-03-20T03:56:32.440Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8moy00089cck9z3jcfn4","content":"<p>前端每次部署都要手动打包感觉好麻烦，浪费了大量时间不说还容易出错。所以就研究了一下github 的github actions。github自己推出的持续集成工具。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-params\">name:</span> Blog CI<span class=\"hljs-symbol\">/CD</span><br><br><span class=\"hljs-params\">on:</span><br>  <span class=\"hljs-params\">push:</span><br>    <span class=\"hljs-params\">branches:</span><br>      <span class=\"hljs-operator\">-</span> master  <span class=\"hljs-comment\"># 只在master上push触发部署</span><br><br><span class=\"hljs-params\">jobs:</span><br>  <span class=\"hljs-params\">build-production:</span><br><br>    <span class=\"hljs-params\">runs-on:</span> ubuntu-latest<br>    <span class=\"hljs-params\">strategy:</span><br>      <span class=\"hljs-params\">matrix:</span><br>        <span class=\"hljs-params\">node-version:</span> [<span class=\"hljs-number\">12</span>.x] <span class=\"hljs-comment\"># 配置所需node版本</span><br>    <span class=\"hljs-params\">steps:</span>  <span class=\"hljs-comment\"># 自动化步骤</span><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>checkout@v2   <span class=\"hljs-comment\"># 第一步，检出仓库副本</span><br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Use Node.js $&#123;&#123; matrix.node-version &#125;&#125; <span class=\"hljs-comment\">#规定node.js版本(可不配置)</span><br>      <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>setup-node@v1<br>      <span class=\"hljs-params\">with:</span><br>        <span class=\"hljs-params\">node-version:</span> $&#123;&#123; matrix.node-version &#125;&#125;<br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Install dependencies  <span class=\"hljs-comment\"># 第二步，安装依赖</span><br>      <span class=\"hljs-params\">run:</span> npm install<br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Build                 <span class=\"hljs-comment\"># 第三步，打包代码</span><br>      <span class=\"hljs-params\">run:</span> npm run build <span class=\"hljs-operator\">-</span>-<span class=\"hljs-keyword\">if</span>-present<br><br>    <span class=\"hljs-comment\"># Deploy</span><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Deploy<br>      <span class=\"hljs-params\">uses:</span> easingthemes<span class=\"hljs-operator\">/</span>ssh-deploy@v2.<span class=\"hljs-number\">0.7</span><br>      <span class=\"hljs-params\">env:</span><br>        <span class=\"hljs-params\">SSH_PRIVATE_KEY:</span> $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; <span class=\"hljs-comment\"># 服务端私钥</span><br>        <span class=\"hljs-params\">ARGS:</span> <span class=\"hljs-string\">&quot;-avz --delete&quot;</span><br>        <span class=\"hljs-params\">SOURCE:</span> <span class=\"hljs-string\">&quot;dist/&quot;</span><br>        <span class=\"hljs-params\">REMOTE_HOST:</span> $&#123;&#123; secrets.SSH_HOST &#125;&#125;<br>        <span class=\"hljs-params\">REMOTE_USER:</span> $&#123;&#123; secrets.SSH_USERNAME &#125;&#125;<br>        <span class=\"hljs-params\">TARGET:</span> $&#123;&#123; secrets.TARGET &#125;&#125;<br><br><br></code></pre></td></tr></table></figure>\n","excerpt":"<p>前端每次部署都要手动打包感觉好麻烦，浪费了大量时间不说还容易出错。所以就研究了一下github 的github actions。github自己推出的持续集成工具。</p>","more":"<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-params\">name:</span> Blog CI<span class=\"hljs-symbol\">/CD</span><br><br><span class=\"hljs-params\">on:</span><br>  <span class=\"hljs-params\">push:</span><br>    <span class=\"hljs-params\">branches:</span><br>      <span class=\"hljs-operator\">-</span> master  <span class=\"hljs-comment\"># 只在master上push触发部署</span><br><br><span class=\"hljs-params\">jobs:</span><br>  <span class=\"hljs-params\">build-production:</span><br><br>    <span class=\"hljs-params\">runs-on:</span> ubuntu-latest<br>    <span class=\"hljs-params\">strategy:</span><br>      <span class=\"hljs-params\">matrix:</span><br>        <span class=\"hljs-params\">node-version:</span> [<span class=\"hljs-number\">12</span>.x] <span class=\"hljs-comment\"># 配置所需node版本</span><br>    <span class=\"hljs-params\">steps:</span>  <span class=\"hljs-comment\"># 自动化步骤</span><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>checkout@v2   <span class=\"hljs-comment\"># 第一步，检出仓库副本</span><br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Use Node.js $&#123;&#123; matrix.node-version &#125;&#125; <span class=\"hljs-comment\">#规定node.js版本(可不配置)</span><br>      <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>setup-node@v1<br>      <span class=\"hljs-params\">with:</span><br>        <span class=\"hljs-params\">node-version:</span> $&#123;&#123; matrix.node-version &#125;&#125;<br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Install dependencies  <span class=\"hljs-comment\"># 第二步，安装依赖</span><br>      <span class=\"hljs-params\">run:</span> npm install<br><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Build                 <span class=\"hljs-comment\"># 第三步，打包代码</span><br>      <span class=\"hljs-params\">run:</span> npm run build <span class=\"hljs-operator\">-</span>-<span class=\"hljs-keyword\">if</span>-present<br><br>    <span class=\"hljs-comment\"># Deploy</span><br>    <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Deploy<br>      <span class=\"hljs-params\">uses:</span> easingthemes<span class=\"hljs-operator\">/</span>ssh-deploy@v2.<span class=\"hljs-number\">0.7</span><br>      <span class=\"hljs-params\">env:</span><br>        <span class=\"hljs-params\">SSH_PRIVATE_KEY:</span> $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; <span class=\"hljs-comment\"># 服务端私钥</span><br>        <span class=\"hljs-params\">ARGS:</span> <span class=\"hljs-string\">&quot;-avz --delete&quot;</span><br>        <span class=\"hljs-params\">SOURCE:</span> <span class=\"hljs-string\">&quot;dist/&quot;</span><br>        <span class=\"hljs-params\">REMOTE_HOST:</span> $&#123;&#123; secrets.SSH_HOST &#125;&#125;<br>        <span class=\"hljs-params\">REMOTE_USER:</span> $&#123;&#123; secrets.SSH_USERNAME &#125;&#125;<br>        <span class=\"hljs-params\">TARGET:</span> $&#123;&#123; secrets.TARGET &#125;&#125;<br><br><br></code></pre></td></tr></table></figure>"},{"title":"http和https","date":"2022-02-24T08:40:26.000Z","_content":"\nHTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。\n<!--more -->\nHTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。\n\nHTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。\n\nHTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。\n\nHTTP 与 HTTPS 区别:\n\nHTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。\n\n使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。\n\nHTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。\n\nhttp 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。\n\nHTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。\n\nTCP 三次握手:\n\n第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号Synchronize Sequence Numbers），syn=j，客户端进入 SYN_SEND 状态等待服务器确认\n第二次握手：服务器接收客户端syn包并确认（ack=j+1），同时向客户端发送一个 SYN包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态\n第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手\n\n\n           UDP\t                                TCP\n是否连接\t无连接\t                             面向连接\n是否可靠\t不可靠传输，不使用流量控制和拥塞控制\t    可靠传输，使用流量控制和拥塞控制\n连接对象个数\t支持一对一，一对多，多对一和多对多交互通信\t只能是一对一通信\n传输方式\t面向报文\t面向字节流\n首部开销\t首部开销小，仅8字节\t首部最小20字节，最大60字节\n适用场景\t适用于实时应用（IP电话、视频会议、直播等）\t适用于要求可靠传输的应用，例如文件传输","source":"_posts/http和https.md","raw":"---\ntitle: http和https\ndate: 2022-02-24 16:40:26\ntags: ['http', 'https']\n---\n\nHTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。\n<!--more -->\nHTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。\n\nHTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。\n\nHTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。\n\nHTTP 与 HTTPS 区别:\n\nHTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。\n\n使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。\n\nHTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。\n\nhttp 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。\n\nHTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。\n\nTCP 三次握手:\n\n第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号Synchronize Sequence Numbers），syn=j，客户端进入 SYN_SEND 状态等待服务器确认\n第二次握手：服务器接收客户端syn包并确认（ack=j+1），同时向客户端发送一个 SYN包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态\n第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手\n\n\n           UDP\t                                TCP\n是否连接\t无连接\t                             面向连接\n是否可靠\t不可靠传输，不使用流量控制和拥塞控制\t    可靠传输，使用流量控制和拥塞控制\n连接对象个数\t支持一对一，一对多，多对一和多对多交互通信\t只能是一对一通信\n传输方式\t面向报文\t面向字节流\n首部开销\t首部开销小，仅8字节\t首部最小20字节，最大60字节\n适用场景\t适用于实时应用（IP电话、视频会议、直播等）\t适用于要求可靠传输的应用，例如文件传输","slug":"http和https","published":1,"updated":"2025-03-20T03:56:32.440Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8moz000a9cckhxqc3pa5","content":"<p>HTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>\n<span id=\"more\"></span>\n<p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:&#x2F;&#x2F; 打头的都是标准 HTTP 服务。</p>\n<p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>\n<p>HTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL&#x2F;TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<p>HTTP 与 HTTPS 区别:</p>\n<p>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</p>\n<p>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</p>\n<p>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</p>\n<p>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p>\n<p>HTTPS 其实就是建构在 SSL&#x2F;TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</p>\n<p>TCP 三次握手:</p>\n<p>第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号Synchronize Sequence Numbers），syn&#x3D;j，客户端进入 SYN_SEND 状态等待服务器确认<br>第二次握手：服务器接收客户端syn包并确认（ack&#x3D;j+1），同时向客户端发送一个 SYN包（syn&#x3D;k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态<br>第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</p>\n<pre><code class=\"hljs\">       UDP\t                                TCP\n</code></pre>\n<p>是否连接\t无连接\t                             面向连接<br>是否可靠\t不可靠传输，不使用流量控制和拥塞控制\t    可靠传输，使用流量控制和拥塞控制<br>连接对象个数\t支持一对一，一对多，多对一和多对多交互通信\t只能是一对一通信<br>传输方式\t面向报文\t面向字节流<br>首部开销\t首部开销小，仅8字节\t首部最小20字节，最大60字节<br>适用场景\t适用于实时应用（IP电话、视频会议、直播等）\t适用于要求可靠传输的应用，例如文件传输</p>\n","excerpt":"<p>HTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>","more":"<p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:&#x2F;&#x2F; 打头的都是标准 HTTP 服务。</p>\n<p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>\n<p>HTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL&#x2F;TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<p>HTTP 与 HTTPS 区别:</p>\n<p>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</p>\n<p>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</p>\n<p>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</p>\n<p>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p>\n<p>HTTPS 其实就是建构在 SSL&#x2F;TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</p>\n<p>TCP 三次握手:</p>\n<p>第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号Synchronize Sequence Numbers），syn&#x3D;j，客户端进入 SYN_SEND 状态等待服务器确认<br>第二次握手：服务器接收客户端syn包并确认（ack&#x3D;j+1），同时向客户端发送一个 SYN包（syn&#x3D;k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态<br>第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</p>\n<pre><code>       UDP\t                                TCP\n</code></pre>\n<p>是否连接\t无连接\t                             面向连接<br>是否可靠\t不可靠传输，不使用流量控制和拥塞控制\t    可靠传输，使用流量控制和拥塞控制<br>连接对象个数\t支持一对一，一对多，多对一和多对多交互通信\t只能是一对一通信<br>传输方式\t面向报文\t面向字节流<br>首部开销\t首部开销小，仅8字节\t首部最小20字节，最大60字节<br>适用场景\t适用于实时应用（IP电话、视频会议、直播等）\t适用于要求可靠传输的应用，例如文件传输</p>"},{"title":"js 单引号替换成双引号,双引号替换成单引号","date":"2021-03-25T02:10:31.000Z","_content":"\njs方法传参<code>data</code>中有双引号时，会报错。比如以下代码：\n```\n'<a href=\"#\" style=\"text-decoration: none;color: #7b7de5;margin-left: 10px\" onclick=\"handleAcClick('+data+')\">回执信息</a>'\n```\n\n可以把参数中的双引号转换为单引号：\n```\nJSON.stringify(data).replace(/\\\"/g,\"'\")\n```\n最后使用参数的时候再把单引号转换为双引号就行了\n```\nJSON.parse(data.replace(/'/g, '\"'))\n```\n","source":"_posts/js-单引号替换成双引号-双引号替换成单引号.md","raw":"---\ntitle: 'js 单引号替换成双引号,双引号替换成单引号'\ndate: 2021-03-25 10:10:31\ntags: ['JS']\n---\n\njs方法传参<code>data</code>中有双引号时，会报错。比如以下代码：\n```\n'<a href=\"#\" style=\"text-decoration: none;color: #7b7de5;margin-left: 10px\" onclick=\"handleAcClick('+data+')\">回执信息</a>'\n```\n\n可以把参数中的双引号转换为单引号：\n```\nJSON.stringify(data).replace(/\\\"/g,\"'\")\n```\n最后使用参数的时候再把单引号转换为双引号就行了\n```\nJSON.parse(data.replace(/'/g, '\"'))\n```\n","slug":"js-单引号替换成双引号-双引号替换成单引号","published":1,"updated":"2025-03-20T03:56:32.440Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp0000c9cckffn7cbe4","content":"<p>js方法传参<code>data</code>中有双引号时，会报错。比如以下代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-decoration: none;color: #7b7de5;margin-left: 10px&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;handleAcClick(&#x27;+data+&#x27;)&quot;</span>&gt;</span>回执信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>可以把参数中的双引号转换为单引号：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">JSON.stringify(data).<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\&quot;/g</span>,<span class=\"hljs-string\">&quot;&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>最后使用参数的时候再把单引号转换为双引号就行了</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">JSON.parse(data.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/&#x27;/g</span>, <span class=\"hljs-string\">&#x27;&quot;&#x27;</span>))<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>js方法传参<code>data</code>中有双引号时，会报错。比如以下代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-decoration: none;color: #7b7de5;margin-left: 10px&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;handleAcClick(&#x27;+data+&#x27;)&quot;</span>&gt;</span>回执信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>可以把参数中的双引号转换为单引号：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">JSON.stringify(data).<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\&quot;/g</span>,<span class=\"hljs-string\">&quot;&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>最后使用参数的时候再把单引号转换为双引号就行了</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">JSON.parse(data.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/&#x27;/g</span>, <span class=\"hljs-string\">&#x27;&quot;&#x27;</span>))<br></code></pre></td></tr></table></figure>\n"},{"title":"jsonp原理与实现","date":"2022-02-23T15:56:41.000Z","_content":"\njsonp是一种跨域通信的手段，它的原理其实很简单：\n\n首先是利用script标签的src属性来实现跨域。\n\n通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。\n\n由于使用script标签的src属性，因此只支持get方法\n\n<!-- more -->\n\n```\nfunction jsonp(req){\n    var script = document.createElement('script');\n    var url = req.url + '?callback=' + req.callback.name;\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script); \n}\n\nfunction hello(res){\n    alert('hello ' + res.data);\n}\n\n\njsonp({\n    url : '',\n    callback : hello \n});\n```\n\n服务器端代码:\n\n```\nvar http = require('http');\nvar urllib = require('url');\n\nvar port = 8080;\nvar data = {'data':'world'};\n\nhttp.createServer(function(req,res){\n    var params = urllib.parse(req.url,true);\n    if(params.query.callback){\n        console.log(params.query.callback);\n        //jsonp\n        var str = params.query.callback + '(' + JSON.stringify(data) + ')';\n        res.end(str);\n    } else {\n        res.end();\n    }\n    \n}).listen(port,function(){\n    console.log('jsonp server is on');\n});\n```\n\n\n","source":"_posts/jsonp原理与实现.md","raw":"---\ntitle: jsonp原理与实现\ndate: 2022-02-23 23:56:41\ntags: ['JSONP']\n---\n\njsonp是一种跨域通信的手段，它的原理其实很简单：\n\n首先是利用script标签的src属性来实现跨域。\n\n通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。\n\n由于使用script标签的src属性，因此只支持get方法\n\n<!-- more -->\n\n```\nfunction jsonp(req){\n    var script = document.createElement('script');\n    var url = req.url + '?callback=' + req.callback.name;\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script); \n}\n\nfunction hello(res){\n    alert('hello ' + res.data);\n}\n\n\njsonp({\n    url : '',\n    callback : hello \n});\n```\n\n服务器端代码:\n\n```\nvar http = require('http');\nvar urllib = require('url');\n\nvar port = 8080;\nvar data = {'data':'world'};\n\nhttp.createServer(function(req,res){\n    var params = urllib.parse(req.url,true);\n    if(params.query.callback){\n        console.log(params.query.callback);\n        //jsonp\n        var str = params.query.callback + '(' + JSON.stringify(data) + ')';\n        res.end(str);\n    } else {\n        res.end();\n    }\n    \n}).listen(port,function(){\n    console.log('jsonp server is on');\n});\n```\n\n\n","slug":"jsonp原理与实现","published":1,"updated":"2025-03-20T03:56:32.440Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp1000f9cckde426nn5","content":"<p>jsonp是一种跨域通信的手段，它的原理其实很简单：</p>\n<p>首先是利用script标签的src属性来实现跨域。</p>\n<p>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。</p>\n<p>由于使用script标签的src属性，因此只支持get方法</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span>(<span class=\"hljs-params\">req</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;script&#x27;</span>);<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">url</span> = req.url + <span class=\"hljs-string\">&#x27;?callback=&#x27;</span> + req.callback.name;<br>    script.src = <span class=\"hljs-built_in\">url</span>;<br>    <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>].appendChild(script); <br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>    alert(<span class=\"hljs-string\">&#x27;hello &#x27;</span> + res.data);<br>&#125;<br><br><br>jsonp(&#123;<br>    <span class=\"hljs-attribute\">url</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>    <span class=\"hljs-attribute\">callback</span> : hello <br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端代码:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-built_in\">var</span> http = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-built_in\">var</span> urllib = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>);<br><br><span class=\"hljs-built_in\">var</span> port = <span class=\"hljs-number\">8080</span>;<br><span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">data</span> = &#123;<span class=\"hljs-string\">&#x27;data&#x27;</span>:<span class=\"hljs-string\">&#x27;world&#x27;</span>&#125;;<br><br>http.createServer(function(req,res)&#123;<br>    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-keyword\">params</span> = urllib.parse(req.url,<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">params</span>.query.callback)&#123;<br>        console.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-keyword\">params</span>.query.callback);<br>        <span class=\"hljs-comment\">//jsonp</span><br>        <span class=\"hljs-built_in\">var</span> str = <span class=\"hljs-keyword\">params</span>.query.callback + <span class=\"hljs-string\">&#x27;(&#x27;</span> + JSON.stringify(<span class=\"hljs-built_in\">data</span>) + <span class=\"hljs-string\">&#x27;)&#x27;</span>;<br>        res.end(str);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        res.end();<br>    &#125;<br>    <br>&#125;).listen(port,function()&#123;<br>    console.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-string\">&#x27;jsonp server is on&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n","excerpt":"<p>jsonp是一种跨域通信的手段，它的原理其实很简单：</p>\n<p>首先是利用script标签的src属性来实现跨域。</p>\n<p>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。</p>\n<p>由于使用script标签的src属性，因此只支持get方法</p>","more":"<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span>(<span class=\"hljs-params\">req</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;script&#x27;</span>);<br>    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">url</span> = req.url + <span class=\"hljs-string\">&#x27;?callback=&#x27;</span> + req.callback.name;<br>    script.src = <span class=\"hljs-built_in\">url</span>;<br>    <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>].appendChild(script); <br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>    alert(<span class=\"hljs-string\">&#x27;hello &#x27;</span> + res.data);<br>&#125;<br><br><br>jsonp(&#123;<br>    <span class=\"hljs-attribute\">url</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>    <span class=\"hljs-attribute\">callback</span> : hello <br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端代码:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-built_in\">var</span> http = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><span class=\"hljs-built_in\">var</span> urllib = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>);<br><br><span class=\"hljs-built_in\">var</span> port = <span class=\"hljs-number\">8080</span>;<br><span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">data</span> = &#123;<span class=\"hljs-string\">&#x27;data&#x27;</span>:<span class=\"hljs-string\">&#x27;world&#x27;</span>&#125;;<br><br>http.createServer(function(req,res)&#123;<br>    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-keyword\">params</span> = urllib.parse(req.url,<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">params</span>.query.callback)&#123;<br>        console.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-keyword\">params</span>.query.callback);<br>        <span class=\"hljs-comment\">//jsonp</span><br>        <span class=\"hljs-built_in\">var</span> str = <span class=\"hljs-keyword\">params</span>.query.callback + <span class=\"hljs-string\">&#x27;(&#x27;</span> + JSON.stringify(<span class=\"hljs-built_in\">data</span>) + <span class=\"hljs-string\">&#x27;)&#x27;</span>;<br>        res.end(str);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        res.end();<br>    &#125;<br>    <br>&#125;).listen(port,function()&#123;<br>    console.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-string\">&#x27;jsonp server is on&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>"},{"title":"js面试题","date":"2022-02-21T14:13:04.000Z","_content":"\n### js的数据类型\n\njs 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\n\n基本数据类型：Undefined、Null、Boolean、Number、String\n\n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\n<!-- more -->\n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\n保存对应的指针来获取堆中的值。\n\n### 判断变量的类型\n\nObject.prototype.toString.call([]） // '[object Array]'\n\n### 原型和原型链\n\n在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\n象的原型。\n\n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\n\n### 闭包及优缺点\n\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\n访问到当前函数的局部变量。\n\n闭包有两个常用的用途。\n\n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n\n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\n这个变量对象不会被回收。\n\n闭包的缺点是可能造成内存泄露\n\n### call apply bind\n\n这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变\n\n### DOM 事件流 和事件委托\n事件捕获，事件冒泡。\n\n事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\n\n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\n\n### cookie localStorage sessionStorage\n\n1）相同点是都是保存在浏览器端、且同源的\n2）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下\n3）存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大\n4）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭\n5）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的\n\n### 数组和对象的常用方法\n\n数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n\n数组归并方法 reduce() 和 reduceRight() 方法\n\n### new 内部做了什么\n\n```\n// （1）首先创建了一个新的空对象\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n// 实现:\n\nfunction objectFactory() {\n  let newObject = null,\n    constructor = Array.prototype.shift.call(arguments),\n    result = null;\n\n  // 参数判断\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n\n  // 判断返回对象\n  let flag =\n    result && (typeof result === \"object\" || typeof result === \"function\");\n\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n\n// 使用方法\n// objectFactory(构造函数, 初始化参数);\n```\n\n### 防抖节流\n\n```\n// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\n\n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\n\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  var timer = null;\n\n  return function() {\n    var context = this,\n      args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n\n  return function() {\n    var context = this,\n      args = arguments,\n      nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n```\n\n### this 指向\n\nthis 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\n式来判断。\n\n1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n\n2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n\n3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n\n4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变\n\n### 作用域链\n\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\n函数。\n\n### 继承的几种实现方式\n\n1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\n\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n\n寄生式组合继承:\n```\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.sayName = function() {\n  console.log(\"My name is \" + this.name + \".\");\n};\n\nfunction Student(name, grade) {\n  Person.call(this, name);\n  this.grade = grade;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nStudent.prototype.sayMyGrade = function() {\n  console.log(\"My grade is \" + this.grade + \".\");\n};\n```\n\n### 箭头函数\n\n不能当构造函数， this 是定义时上下文的this，不能改变\n\n### ajax \n\n我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\n\n创建一个 ajax 有这样几个步骤\n\n首先是创建一个 XMLHttpRequest 对象。\n\n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n\n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\n\n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\n### var let const \n\n1.const let 是块级作用域 var没有块级作用域,var只有函数和全局作用域\n2.const let 不存在变量声明的提前，var有声明的提前，所以const和let在声明变量/常量 之前，是没办法获取到的，称为暂时性死区temporal dead zone\n3.const let是ES6提出的，var是ES5\n4.const 声明的是常量，常量不能被修改，let和var声明的是变量，可以被修改\n5.const在声明时必须赋值，而let和var不需要\n6.let 和const不能重复声明同一个值:如 let a=1 ; let a =2 这样是不被允许的，但var可以，最后一个var声明的值会覆盖之前的 如：var b =1 ;var b =2 console.log(b)  结果为2\n\n### js 执行机制\n\n因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\n\n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n\n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\n染等。\n\n### 异步编程 promise \n\n\n### requestAnimationFrame\nsetTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。\n\nrequestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，改善视觉效果。\n\n\n### BFC \n\nBFC即 Block Formatting Contexts (块级格式化上下文).\n\n具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n只要元素满足下面任一条件即可触发 BFC 特性：\n\nbody 根元素\n浮动元素：float 除 none 以外的值\n绝对定位元素：position (absolute、fixed)\ndisplay 为 inline-block、table-cells、flex\noverflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n\n### for of 和 for in 的区别\n\nfor-in是为遍历对象而设计的，不适用于遍历数组。(遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值\"0\",\"1\",\"2\"等是字符串)\n\nfor-in循环存在缺陷：循环会遍历对象自身的和继承的可枚举属性(不含Symbol属性)\n\nfor-of遍历\n\nfor-of这个方法避开了for-in循环的所有缺陷\n与forEach()不同的是，它可以正确响应break、continue和return语句 \nfor-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。for-of循环也支持字符串遍历\n\nfor-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法\n\n\n### 什么是重绘和回流\n\n重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background\n       -color，我们将这样的操作称为重绘。\n \n 回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样\n      的操作我们称为回流。\n\n 常见引起回流属性和方法：\n\n 任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。\n\n （1）添加或者删除可见的 DOM 元素；\n （2）元素尺寸改变——边距、填充、边框、宽度和高度\n （3）内容变化，比如用户在 input 框中输入文字\n （4）浏览器窗口尺寸改变——resize事件发生时\n （5）计算 offsetWidth 和 offsetHeight 属性\n （6）设置 style 属性的值\n （7）当你修改网页的默认字体时。\n\n 回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列\n 回流。\n\n 如何减少回流:\n\n 1）使用 transform 替代 top\n\n （2）不要把节点的属性值放在一个循环里当成循环里的变量\n\n （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局\n\n （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n\n （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。\n\n### 盒子模型\n\nbox-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C（标准盒模型），border-box为IE盒子模型（怪异盒模型）。\n\nbox-sizing: content-box;//宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。\n\nbox-sizing: border-box;// 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。","source":"_posts/js面试题.md","raw":"---\ntitle: js面试题\ndate: 2022-02-21 22:13:04\ntags: ['JS', '面试']\n---\n\n### js的数据类型\n\njs 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\n\n基本数据类型：Undefined、Null、Boolean、Number、String\n\n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\n<!-- more -->\n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\n保存对应的指针来获取堆中的值。\n\n### 判断变量的类型\n\nObject.prototype.toString.call([]） // '[object Array]'\n\n### 原型和原型链\n\n在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\n象的原型。\n\n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\n\n### 闭包及优缺点\n\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\n访问到当前函数的局部变量。\n\n闭包有两个常用的用途。\n\n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n\n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\n这个变量对象不会被回收。\n\n闭包的缺点是可能造成内存泄露\n\n### call apply bind\n\n这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变\n\n### DOM 事件流 和事件委托\n事件捕获，事件冒泡。\n\n事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\n\n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\n\n### cookie localStorage sessionStorage\n\n1）相同点是都是保存在浏览器端、且同源的\n2）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下\n3）存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大\n4）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭\n5）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的\n\n### 数组和对象的常用方法\n\n数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n\n数组归并方法 reduce() 和 reduceRight() 方法\n\n### new 内部做了什么\n\n```\n// （1）首先创建了一个新的空对象\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n// 实现:\n\nfunction objectFactory() {\n  let newObject = null,\n    constructor = Array.prototype.shift.call(arguments),\n    result = null;\n\n  // 参数判断\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n\n  // 判断返回对象\n  let flag =\n    result && (typeof result === \"object\" || typeof result === \"function\");\n\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n\n// 使用方法\n// objectFactory(构造函数, 初始化参数);\n```\n\n### 防抖节流\n\n```\n// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\n\n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\n\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  var timer = null;\n\n  return function() {\n    var context = this,\n      args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n\n  return function() {\n    var context = this,\n      args = arguments,\n      nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n```\n\n### this 指向\n\nthis 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\n式来判断。\n\n1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n\n2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n\n3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n\n4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变\n\n### 作用域链\n\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\n函数。\n\n### 继承的几种实现方式\n\n1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\n\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n\n寄生式组合继承:\n```\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.sayName = function() {\n  console.log(\"My name is \" + this.name + \".\");\n};\n\nfunction Student(name, grade) {\n  Person.call(this, name);\n  this.grade = grade;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nStudent.prototype.sayMyGrade = function() {\n  console.log(\"My grade is \" + this.grade + \".\");\n};\n```\n\n### 箭头函数\n\n不能当构造函数， this 是定义时上下文的this，不能改变\n\n### ajax \n\n我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\n\n创建一个 ajax 有这样几个步骤\n\n首先是创建一个 XMLHttpRequest 对象。\n\n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n\n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\n\n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\n### var let const \n\n1.const let 是块级作用域 var没有块级作用域,var只有函数和全局作用域\n2.const let 不存在变量声明的提前，var有声明的提前，所以const和let在声明变量/常量 之前，是没办法获取到的，称为暂时性死区temporal dead zone\n3.const let是ES6提出的，var是ES5\n4.const 声明的是常量，常量不能被修改，let和var声明的是变量，可以被修改\n5.const在声明时必须赋值，而let和var不需要\n6.let 和const不能重复声明同一个值:如 let a=1 ; let a =2 这样是不被允许的，但var可以，最后一个var声明的值会覆盖之前的 如：var b =1 ;var b =2 console.log(b)  结果为2\n\n### js 执行机制\n\n因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\n\n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n\n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\n染等。\n\n### 异步编程 promise \n\n\n### requestAnimationFrame\nsetTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。\n\nrequestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，改善视觉效果。\n\n\n### BFC \n\nBFC即 Block Formatting Contexts (块级格式化上下文).\n\n具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n只要元素满足下面任一条件即可触发 BFC 特性：\n\nbody 根元素\n浮动元素：float 除 none 以外的值\n绝对定位元素：position (absolute、fixed)\ndisplay 为 inline-block、table-cells、flex\noverflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n\n### for of 和 for in 的区别\n\nfor-in是为遍历对象而设计的，不适用于遍历数组。(遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值\"0\",\"1\",\"2\"等是字符串)\n\nfor-in循环存在缺陷：循环会遍历对象自身的和继承的可枚举属性(不含Symbol属性)\n\nfor-of遍历\n\nfor-of这个方法避开了for-in循环的所有缺陷\n与forEach()不同的是，它可以正确响应break、continue和return语句 \nfor-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。for-of循环也支持字符串遍历\n\nfor-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法\n\n\n### 什么是重绘和回流\n\n重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background\n       -color，我们将这样的操作称为重绘。\n \n 回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样\n      的操作我们称为回流。\n\n 常见引起回流属性和方法：\n\n 任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。\n\n （1）添加或者删除可见的 DOM 元素；\n （2）元素尺寸改变——边距、填充、边框、宽度和高度\n （3）内容变化，比如用户在 input 框中输入文字\n （4）浏览器窗口尺寸改变——resize事件发生时\n （5）计算 offsetWidth 和 offsetHeight 属性\n （6）设置 style 属性的值\n （7）当你修改网页的默认字体时。\n\n 回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列\n 回流。\n\n 如何减少回流:\n\n 1）使用 transform 替代 top\n\n （2）不要把节点的属性值放在一个循环里当成循环里的变量\n\n （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局\n\n （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n\n （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。\n\n### 盒子模型\n\nbox-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C（标准盒模型），border-box为IE盒子模型（怪异盒模型）。\n\nbox-sizing: content-box;//宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。\n\nbox-sizing: border-box;// 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。","slug":"js面试题","published":1,"updated":"2025-03-20T03:56:32.441Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp2000h9cckdjirglvl","content":"<h3 id=\"js的数据类型\"><a href=\"#js的数据类型\" class=\"headerlink\" title=\"js的数据类型\"></a>js的数据类型</h3><p>js 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。</p>\n<p>基本数据类型：Undefined、Null、Boolean、Number、String</p>\n<p>复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。</p>\n<span id=\"more\"></span>\n<p>两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中<br>保存对应的指针来获取堆中的值。</p>\n<h3 id=\"判断变量的类型\"><a href=\"#判断变量的类型\" class=\"headerlink\" title=\"判断变量的类型\"></a>判断变量的类型</h3><p>Object.prototype.toString.call([]） &#x2F;&#x2F; ‘[object Array]’</p>\n<h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><p>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对<br>象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部<br>将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们<br>是不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来让我们访问这个属性，但是我们最好不要使用这<br>个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对<br>象的原型。</p>\n<p>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又<br>会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就<br>是我们新建的对象为什么能够使用 toString() 等方法的原因。</p>\n<h3 id=\"闭包及优缺点\"><a href=\"#闭包及优缺点\" class=\"headerlink\" title=\"闭包及优缺点\"></a>闭包及优缺点</h3><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以<br>访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途。</p>\n<p>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外<br>部访问到函数内部的变量，可以使用这种方法来创建私有变量。</p>\n<p>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以<br>这个变量对象不会被回收。</p>\n<p>闭包的缺点是可能造成内存泄露</p>\n<h3 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call apply bind\"></a>call apply bind</h3><p>这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变</p>\n<h3 id=\"DOM-事件流-和事件委托\"><a href=\"#DOM-事件流-和事件委托\" class=\"headerlink\" title=\"DOM 事件流 和事件委托\"></a>DOM 事件流 和事件委托</h3><p>事件捕获，事件冒泡。</p>\n<p>事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到<br>目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。</p>\n<p>使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。</p>\n<h3 id=\"cookie-localStorage-sessionStorage\"><a href=\"#cookie-localStorage-sessionStorage\" class=\"headerlink\" title=\"cookie localStorage sessionStorage\"></a>cookie localStorage sessionStorage</h3><p>1）相同点是都是保存在浏览器端、且同源的<br>2）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>3）存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>4）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>5）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的</p>\n<h3 id=\"数组和对象的常用方法\"><a href=\"#数组和对象的常用方法\" class=\"headerlink\" title=\"数组和对象的常用方法\"></a>数组和对象的常用方法</h3><p>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</p>\n<p>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</p>\n<p>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</p>\n<p>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</p>\n<p>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</p>\n<p>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</p>\n<p>数组归并方法 reduce() 和 reduceRight() 方法</p>\n<h3 id=\"new-内部做了什么\"><a href=\"#new-内部做了什么\" class=\"headerlink\" title=\"new 内部做了什么\"></a>new 内部做了什么</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// （1）首先创建了一个新的空对象</span><br><span class=\"hljs-comment\">// （2）设置原型，将对象的原型设置为函数的 prototype 对象。</span><br><span class=\"hljs-comment\">// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</span><br><span class=\"hljs-comment\">// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</span><br><br><span class=\"hljs-comment\">// 实现:</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">objectFactory</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> newObject = <span class=\"hljs-literal\">null</span>,<br>    constructor = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">shift</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>),<br>    result = <span class=\"hljs-literal\">null</span>;<br><br>  <span class=\"hljs-comment\">// 参数判断</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> constructor !== <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span><br>  newObject = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(constructor.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><br>  <span class=\"hljs-comment\">// 将 this 指向新建对象，并执行函数</span><br>  result = constructor.<span class=\"hljs-title function_\">apply</span>(newObject, <span class=\"hljs-variable language_\">arguments</span>);<br><br>  <span class=\"hljs-comment\">// 判断返回对象</span><br>  <span class=\"hljs-keyword\">let</span> flag =<br>    result &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">&quot;object&quot;</span> || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">&quot;function&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 判断返回结果</span><br>  <span class=\"hljs-keyword\">return</span> flag ? result : newObject;<br>&#125;<br><br><span class=\"hljs-comment\">// 使用方法</span><br><span class=\"hljs-comment\">// objectFactory(构造函数, 初始化参数);</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。</span><br><br><span class=\"hljs-comment\">// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</span><br><br><span class=\"hljs-comment\">// 函数防抖的实现</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, wait</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-literal\">null</span>;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>,<br>      args = <span class=\"hljs-variable language_\">arguments</span>;<br><br>    <span class=\"hljs-comment\">// 如果此时存在定时器的话，则取消之前的定时器重新记时</span><br>    <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>      <span class=\"hljs-built_in\">clearTimeout</span>(timer);<br>      timer = <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 设置定时器，使事件间隔指定事件后执行</span><br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      fn.<span class=\"hljs-title function_\">apply</span>(context, args);<br>    &#125;, wait);<br>  &#125;;<br>&#125;<br><br><span class=\"hljs-comment\">// 函数节流的实现;</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> preTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>,<br>      args = <span class=\"hljs-variable language_\">arguments</span>,<br>      nowTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br><br>    <span class=\"hljs-comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span><br>    <span class=\"hljs-keyword\">if</span> (nowTime - preTime &gt;= delay) &#123;<br>      preTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br>      <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(context, args);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h3><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模<br>式来判断。</p>\n<p>1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n<p>2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n<p>3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n<p>4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和<br>函数。</p>\n<h3 id=\"继承的几种实现方式\"><a href=\"#继承的几种实现方式\" class=\"headerlink\" title=\"继承的几种实现方式\"></a>继承的几种实现方式</h3><p>1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<p>寄生式组合继承:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;My name is &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&quot;.&quot;</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name, grade</span>) &#123;<br>  <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> = grade;<br>&#125;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Student</span>;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayMyGrade</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;My grade is &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> + <span class=\"hljs-string\">&quot;.&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>不能当构造函数， this 是定义时上下文的this，不能改变</p>\n<h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><p>我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。</p>\n<p>创建一个 ajax 有这样几个步骤</p>\n<p>首先是创建一个 XMLHttpRequest 对象。</p>\n<p>然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</p>\n<p>在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。</p>\n<p>当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。</p>\n<h3 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var let const\"></a>var let const</h3><p>1.const let 是块级作用域 var没有块级作用域,var只有函数和全局作用域<br>2.const let 不存在变量声明的提前，var有声明的提前，所以const和let在声明变量&#x2F;常量 之前，是没办法获取到的，称为暂时性死区temporal dead zone<br>3.const let是ES6提出的，var是ES5<br>4.const 声明的是常量，常量不能被修改，let和var声明的是变量，可以被修改<br>5.const在声明时必须赋值，而let和var不需要<br>6.let 和const不能重复声明同一个值:如 let a&#x3D;1 ; let a &#x3D;2 这样是不被允许的，但var可以，最后一个var声明的值会覆盖之前的 如：var b &#x3D;1 ;var b &#x3D;2 console.log(b)  结果为2</p>\n<h3 id=\"js-执行机制\"><a href=\"#js-执行机制\" class=\"headerlink\" title=\"js 执行机制\"></a>js 执行机制</h3><p>因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。</p>\n<p>微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。</p>\n<p>宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I&#x2F;O 操作、UI 渲<br>染等。</p>\n<h3 id=\"异步编程-promise\"><a href=\"#异步编程-promise\" class=\"headerlink\" title=\"异步编程 promise\"></a>异步编程 promise</h3><h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><p>setTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。</p>\n<p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，改善视觉效果。</p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p>BFC即 Block Formatting Contexts (块级格式化上下文).</p>\n<p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<p>body 根元素<br>浮动元素：float 除 none 以外的值<br>绝对定位元素：position (absolute、fixed)<br>display 为 inline-block、table-cells、flex<br>overflow 除了 visible 以外的值 (hidden、auto、scroll)</p>\n<h3 id=\"for-of-和-for-in-的区别\"><a href=\"#for-of-和-for-in-的区别\" class=\"headerlink\" title=\"for of 和 for in 的区别\"></a>for of 和 for in 的区别</h3><p>for-in是为遍历对象而设计的，不适用于遍历数组。(遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值”0”,”1”,”2”等是字符串)</p>\n<p>for-in循环存在缺陷：循环会遍历对象自身的和继承的可枚举属性(不含Symbol属性)</p>\n<p>for-of遍历</p>\n<p>for-of这个方法避开了for-in循环的所有缺陷<br>与forEach()不同的是，它可以正确响应break、continue和return语句<br>for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。for-of循环也支持字符串遍历</p>\n<p>for-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法</p>\n<h3 id=\"什么是重绘和回流\"><a href=\"#什么是重绘和回流\" class=\"headerlink\" title=\"什么是重绘和回流\"></a>什么是重绘和回流</h3><p>重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background<br>       -color，我们将这样的操作称为重绘。</p>\n<p> 回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样<br>      的操作我们称为回流。</p>\n<p> 常见引起回流属性和方法：</p>\n<p> 任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。</p>\n<p> （1）添加或者删除可见的 DOM 元素；<br> （2）元素尺寸改变——边距、填充、边框、宽度和高度<br> （3）内容变化，比如用户在 input 框中输入文字<br> （4）浏览器窗口尺寸改变——resize事件发生时<br> （5）计算 offsetWidth 和 offsetHeight 属性<br> （6）设置 style 属性的值<br> （7）当你修改网页的默认字体时。</p>\n<p> 回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列<br> 回流。</p>\n<p> 如何减少回流:</p>\n<p> 1）使用 transform 替代 top</p>\n<p> （2）不要把节点的属性值放在一个循环里当成循环里的变量</p>\n<p> （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p>\n<p> （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</p>\n<p> （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</p>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>box-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C（标准盒模型），border-box为IE盒子模型（怪异盒模型）。</p>\n<p>box-sizing: content-box;&#x2F;&#x2F;宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</p>\n<p>box-sizing: border-box;&#x2F;&#x2F; 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>\n","excerpt":"<h3 id=\"js的数据类型\"><a href=\"#js的数据类型\" class=\"headerlink\" title=\"js的数据类型\"></a>js的数据类型</h3><p>js 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。</p>\n<p>基本数据类型：Undefined、Null、Boolean、Number、String</p>\n<p>复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。</p>","more":"<p>两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中<br>保存对应的指针来获取堆中的值。</p>\n<h3 id=\"判断变量的类型\"><a href=\"#判断变量的类型\" class=\"headerlink\" title=\"判断变量的类型\"></a>判断变量的类型</h3><p>Object.prototype.toString.call([]） &#x2F;&#x2F; ‘[object Array]’</p>\n<h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><p>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对<br>象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部<br>将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们<br>是不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来让我们访问这个属性，但是我们最好不要使用这<br>个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对<br>象的原型。</p>\n<p>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又<br>会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就<br>是我们新建的对象为什么能够使用 toString() 等方法的原因。</p>\n<h3 id=\"闭包及优缺点\"><a href=\"#闭包及优缺点\" class=\"headerlink\" title=\"闭包及优缺点\"></a>闭包及优缺点</h3><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以<br>访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途。</p>\n<p>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外<br>部访问到函数内部的变量，可以使用这种方法来创建私有变量。</p>\n<p>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以<br>这个变量对象不会被回收。</p>\n<p>闭包的缺点是可能造成内存泄露</p>\n<h3 id=\"call-apply-bind\"><a href=\"#call-apply-bind\" class=\"headerlink\" title=\"call apply bind\"></a>call apply bind</h3><p>这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变</p>\n<h3 id=\"DOM-事件流-和事件委托\"><a href=\"#DOM-事件流-和事件委托\" class=\"headerlink\" title=\"DOM 事件流 和事件委托\"></a>DOM 事件流 和事件委托</h3><p>事件捕获，事件冒泡。</p>\n<p>事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到<br>目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。</p>\n<p>使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。</p>\n<h3 id=\"cookie-localStorage-sessionStorage\"><a href=\"#cookie-localStorage-sessionStorage\" class=\"headerlink\" title=\"cookie localStorage sessionStorage\"></a>cookie localStorage sessionStorage</h3><p>1）相同点是都是保存在浏览器端、且同源的<br>2）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>3）存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>4）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>5）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的</p>\n<h3 id=\"数组和对象的常用方法\"><a href=\"#数组和对象的常用方法\" class=\"headerlink\" title=\"数组和对象的常用方法\"></a>数组和对象的常用方法</h3><p>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</p>\n<p>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</p>\n<p>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</p>\n<p>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</p>\n<p>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</p>\n<p>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</p>\n<p>数组归并方法 reduce() 和 reduceRight() 方法</p>\n<h3 id=\"new-内部做了什么\"><a href=\"#new-内部做了什么\" class=\"headerlink\" title=\"new 内部做了什么\"></a>new 内部做了什么</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// （1）首先创建了一个新的空对象</span><br><span class=\"hljs-comment\">// （2）设置原型，将对象的原型设置为函数的 prototype 对象。</span><br><span class=\"hljs-comment\">// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</span><br><span class=\"hljs-comment\">// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</span><br><br><span class=\"hljs-comment\">// 实现:</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">objectFactory</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> newObject = <span class=\"hljs-literal\">null</span>,<br>    constructor = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">shift</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>),<br>    result = <span class=\"hljs-literal\">null</span>;<br><br>  <span class=\"hljs-comment\">// 参数判断</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> constructor !== <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span><br>  newObject = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(constructor.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><br>  <span class=\"hljs-comment\">// 将 this 指向新建对象，并执行函数</span><br>  result = constructor.<span class=\"hljs-title function_\">apply</span>(newObject, <span class=\"hljs-variable language_\">arguments</span>);<br><br>  <span class=\"hljs-comment\">// 判断返回对象</span><br>  <span class=\"hljs-keyword\">let</span> flag =<br>    result &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">&quot;object&quot;</span> || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">&quot;function&quot;</span>);<br><br>  <span class=\"hljs-comment\">// 判断返回结果</span><br>  <span class=\"hljs-keyword\">return</span> flag ? result : newObject;<br>&#125;<br><br><span class=\"hljs-comment\">// 使用方法</span><br><span class=\"hljs-comment\">// objectFactory(构造函数, 初始化参数);</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。</span><br><br><span class=\"hljs-comment\">// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</span><br><br><span class=\"hljs-comment\">// 函数防抖的实现</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, wait</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-literal\">null</span>;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>,<br>      args = <span class=\"hljs-variable language_\">arguments</span>;<br><br>    <span class=\"hljs-comment\">// 如果此时存在定时器的话，则取消之前的定时器重新记时</span><br>    <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>      <span class=\"hljs-built_in\">clearTimeout</span>(timer);<br>      timer = <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 设置定时器，使事件间隔指定事件后执行</span><br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      fn.<span class=\"hljs-title function_\">apply</span>(context, args);<br>    &#125;, wait);<br>  &#125;;<br>&#125;<br><br><span class=\"hljs-comment\">// 函数节流的实现;</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> preTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>,<br>      args = <span class=\"hljs-variable language_\">arguments</span>,<br>      nowTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br><br>    <span class=\"hljs-comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span><br>    <span class=\"hljs-keyword\">if</span> (nowTime - preTime &gt;= delay) &#123;<br>      preTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();<br>      <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(context, args);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h3><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模<br>式来判断。</p>\n<p>1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n<p>2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n<p>3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n<p>4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和<br>函数。</p>\n<h3 id=\"继承的几种实现方式\"><a href=\"#继承的几种实现方式\" class=\"headerlink\" title=\"继承的几种实现方式\"></a>继承的几种实现方式</h3><p>1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<p>寄生式组合继承:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;My name is &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&quot;.&quot;</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name, grade</span>) &#123;<br>  <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> = grade;<br>&#125;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Student</span>;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayMyGrade</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;My grade is &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> + <span class=\"hljs-string\">&quot;.&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>不能当构造函数， this 是定义时上下文的this，不能改变</p>\n<h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><p>我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。</p>\n<p>创建一个 ajax 有这样几个步骤</p>\n<p>首先是创建一个 XMLHttpRequest 对象。</p>\n<p>然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</p>\n<p>在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。</p>\n<p>当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。</p>\n<h3 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var let const\"></a>var let const</h3><p>1.const let 是块级作用域 var没有块级作用域,var只有函数和全局作用域<br>2.const let 不存在变量声明的提前，var有声明的提前，所以const和let在声明变量&#x2F;常量 之前，是没办法获取到的，称为暂时性死区temporal dead zone<br>3.const let是ES6提出的，var是ES5<br>4.const 声明的是常量，常量不能被修改，let和var声明的是变量，可以被修改<br>5.const在声明时必须赋值，而let和var不需要<br>6.let 和const不能重复声明同一个值:如 let a&#x3D;1 ; let a &#x3D;2 这样是不被允许的，但var可以，最后一个var声明的值会覆盖之前的 如：var b &#x3D;1 ;var b &#x3D;2 console.log(b)  结果为2</p>\n<h3 id=\"js-执行机制\"><a href=\"#js-执行机制\" class=\"headerlink\" title=\"js 执行机制\"></a>js 执行机制</h3><p>因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。</p>\n<p>微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。</p>\n<p>宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I&#x2F;O 操作、UI 渲<br>染等。</p>\n<h3 id=\"异步编程-promise\"><a href=\"#异步编程-promise\" class=\"headerlink\" title=\"异步编程 promise\"></a>异步编程 promise</h3><h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><p>setTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。</p>\n<p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，改善视觉效果。</p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p>BFC即 Block Formatting Contexts (块级格式化上下文).</p>\n<p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<p>body 根元素<br>浮动元素：float 除 none 以外的值<br>绝对定位元素：position (absolute、fixed)<br>display 为 inline-block、table-cells、flex<br>overflow 除了 visible 以外的值 (hidden、auto、scroll)</p>\n<h3 id=\"for-of-和-for-in-的区别\"><a href=\"#for-of-和-for-in-的区别\" class=\"headerlink\" title=\"for of 和 for in 的区别\"></a>for of 和 for in 的区别</h3><p>for-in是为遍历对象而设计的，不适用于遍历数组。(遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值”0”,”1”,”2”等是字符串)</p>\n<p>for-in循环存在缺陷：循环会遍历对象自身的和继承的可枚举属性(不含Symbol属性)</p>\n<p>for-of遍历</p>\n<p>for-of这个方法避开了for-in循环的所有缺陷<br>与forEach()不同的是，它可以正确响应break、continue和return语句<br>for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。for-of循环也支持字符串遍历</p>\n<p>for-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法</p>\n<h3 id=\"什么是重绘和回流\"><a href=\"#什么是重绘和回流\" class=\"headerlink\" title=\"什么是重绘和回流\"></a>什么是重绘和回流</h3><p>重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background<br>       -color，我们将这样的操作称为重绘。</p>\n<p> 回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样<br>      的操作我们称为回流。</p>\n<p> 常见引起回流属性和方法：</p>\n<p> 任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。</p>\n<p> （1）添加或者删除可见的 DOM 元素；<br> （2）元素尺寸改变——边距、填充、边框、宽度和高度<br> （3）内容变化，比如用户在 input 框中输入文字<br> （4）浏览器窗口尺寸改变——resize事件发生时<br> （5）计算 offsetWidth 和 offsetHeight 属性<br> （6）设置 style 属性的值<br> （7）当你修改网页的默认字体时。</p>\n<p> 回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列<br> 回流。</p>\n<p> 如何减少回流:</p>\n<p> 1）使用 transform 替代 top</p>\n<p> （2）不要把节点的属性值放在一个循环里当成循环里的变量</p>\n<p> （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p>\n<p> （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</p>\n<p> （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</p>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>box-sizing属性可以指定盒子模型种类，content-box指定盒子模型为W3C（标准盒模型），border-box为IE盒子模型（怪异盒模型）。</p>\n<p>box-sizing: content-box;&#x2F;&#x2F;宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</p>\n<p>box-sizing: border-box;&#x2F;&#x2F; 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>"},{"title":"promise面试题","date":"2022-02-23T16:07:07.000Z","_content":"promise 考察的比较多，这里记录一下，加深理解。\n\n<!-- more -->\n\n1. ajax 的promise封装\n\n```\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n\n    // 发送 http 请求\n    xhr.send(null);\n  });\n\n  return promise;\n}\n```\n","source":"_posts/promise面试题.md","raw":"---\ntitle: promise面试题\ndate: 2022-02-24 00:07:07\ntags: ['promise']\n---\npromise 考察的比较多，这里记录一下，加深理解。\n\n<!-- more -->\n\n1. ajax 的promise封装\n\n```\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n\n    // 发送 http 请求\n    xhr.send(null);\n  });\n\n  return promise;\n}\n```\n","slug":"promise面试题","published":1,"updated":"2025-03-20T03:56:32.442Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp2000j9cckgo6b1khn","content":"<p>promise 考察的比较多，这里记录一下，加深理解。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>ajax 的promise封装</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getJSON</span>(<span class=\"hljs-params\">url</span>) &#123;<br>  <span class=\"hljs-comment\">// 创建一个 promise 对象</span><br>  <span class=\"hljs-keyword\">let</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br><br>    <span class=\"hljs-comment\">// 新建一个 http 请求</span><br>    xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>, url, <span class=\"hljs-literal\">true</span>);<br><br>    <span class=\"hljs-comment\">// 设置状态的监听函数</span><br>    xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">readyState</span> !== <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">return</span>;<br><br>      <span class=\"hljs-comment\">// 当请求成功或失败时，改变 promise 的状态</span><br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) &#123;<br>        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">response</span>);<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">statusText</span>));<br>      &#125;<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 设置错误监听函数</span><br>    xhr.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">statusText</span>));<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 设置响应的数据类型</span><br>    xhr.<span class=\"hljs-property\">responseType</span> = <span class=\"hljs-string\">&quot;json&quot;</span>;<br><br>    <span class=\"hljs-comment\">// 设置请求头信息</span><br>    xhr.<span class=\"hljs-title function_\">setRequestHeader</span>(<span class=\"hljs-string\">&quot;Accept&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 发送 http 请求</span><br>    xhr.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-literal\">null</span>);<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">return</span> promise;<br>&#125;<br></code></pre></td></tr></table></figure>\n","excerpt":"<p>promise 考察的比较多，这里记录一下，加深理解。</p>","more":"<ol>\n<li>ajax 的promise封装</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getJSON</span>(<span class=\"hljs-params\">url</span>) &#123;<br>  <span class=\"hljs-comment\">// 创建一个 promise 对象</span><br>  <span class=\"hljs-keyword\">let</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br><br>    <span class=\"hljs-comment\">// 新建一个 http 请求</span><br>    xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>, url, <span class=\"hljs-literal\">true</span>);<br><br>    <span class=\"hljs-comment\">// 设置状态的监听函数</span><br>    xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">readyState</span> !== <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">return</span>;<br><br>      <span class=\"hljs-comment\">// 当请求成功或失败时，改变 promise 的状态</span><br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) &#123;<br>        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">response</span>);<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">statusText</span>));<br>      &#125;<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 设置错误监听函数</span><br>    xhr.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">statusText</span>));<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 设置响应的数据类型</span><br>    xhr.<span class=\"hljs-property\">responseType</span> = <span class=\"hljs-string\">&quot;json&quot;</span>;<br><br>    <span class=\"hljs-comment\">// 设置请求头信息</span><br>    xhr.<span class=\"hljs-title function_\">setRequestHeader</span>(<span class=\"hljs-string\">&quot;Accept&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 发送 http 请求</span><br>    xhr.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-literal\">null</span>);<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">return</span> promise;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"rails单元测试github actions","date":"2021-07-07T16:14:24.000Z","_content":"\n学 rails 时用到了单元测试，那就用 github actions 来跑测试吧。\n\n下面是workflow配置：\n<!-- more -->\n```\nname: Ruby\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  test:\n\n    runs-on: ubuntu-latest\n\n    services:\n      mysql:\n        image: mysql:5.7\n        env:\n          MYSQL_ROOT_PASSWORD: root\n          MYSQL_DATABASE: app_db_test\n        ports:\n          - 3306\n        options: >-\n          --health-cmd=\"mysqladmin ping\"\n          --health-interval=10s\n          --health-timeout=5s\n          --health-retries=3\n\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Set up Ruby 2.6.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6.6\n\n      - name: Gem cache\n        uses: actions/cache@v1\n        with:\n          path: vendor/bundle\n          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-gems-\n\n      - name: Verify MySQL connection from host\n        run: |\n          sudo apt-get install -y mysql-client libmysqlclient-dev\n          sudo /etc/init.d/mysql start\n          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -u root -proot -e \"CREATE DATABASE IF NOT EXISTS app_db_test;\"\n\n      - name: Bundle install, setup DB and run tests\n        env:\n          RAILS_ENV: test\n          DB_PASSWORD: root\n          DB_PORT: ${{ job.services.mysql.ports[3306] }}\n        run: |\n          cp config/database.yml.ci config/database.yml\n          gem install bundler\n          bundle config path vendor/bundle\n          bundle install --jobs 4 --retry 3\n          bundle exec rails db:setup\n          bundle exec rails test\n```\n\ndatabase.yml.ci 配置：\n\n```\ndefault: &default\n  adapter: mysql2\n  encoding: utf8mb4\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n  username: root\n  password: root\n\ntest:\n  <<: *default\n  database: app_db_test\n\n```\n","source":"_posts/rails单元测试github-actions.md","raw":"---\ntitle: rails单元测试github actions\ndate: 2021-07-08 00:14:24\ntags: ['github actions', '持续集成']\n---\n\n学 rails 时用到了单元测试，那就用 github actions 来跑测试吧。\n\n下面是workflow配置：\n<!-- more -->\n```\nname: Ruby\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  test:\n\n    runs-on: ubuntu-latest\n\n    services:\n      mysql:\n        image: mysql:5.7\n        env:\n          MYSQL_ROOT_PASSWORD: root\n          MYSQL_DATABASE: app_db_test\n        ports:\n          - 3306\n        options: >-\n          --health-cmd=\"mysqladmin ping\"\n          --health-interval=10s\n          --health-timeout=5s\n          --health-retries=3\n\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Set up Ruby 2.6.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6.6\n\n      - name: Gem cache\n        uses: actions/cache@v1\n        with:\n          path: vendor/bundle\n          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-gems-\n\n      - name: Verify MySQL connection from host\n        run: |\n          sudo apt-get install -y mysql-client libmysqlclient-dev\n          sudo /etc/init.d/mysql start\n          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -u root -proot -e \"CREATE DATABASE IF NOT EXISTS app_db_test;\"\n\n      - name: Bundle install, setup DB and run tests\n        env:\n          RAILS_ENV: test\n          DB_PASSWORD: root\n          DB_PORT: ${{ job.services.mysql.ports[3306] }}\n        run: |\n          cp config/database.yml.ci config/database.yml\n          gem install bundler\n          bundle config path vendor/bundle\n          bundle install --jobs 4 --retry 3\n          bundle exec rails db:setup\n          bundle exec rails test\n```\n\ndatabase.yml.ci 配置：\n\n```\ndefault: &default\n  adapter: mysql2\n  encoding: utf8mb4\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n  username: root\n  password: root\n\ntest:\n  <<: *default\n  database: app_db_test\n\n```\n","slug":"rails单元测试github-actions","published":1,"updated":"2025-03-20T03:56:32.442Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp3000l9cck3wq9dxb3","content":"<p>学 rails 时用到了单元测试，那就用 github actions 来跑测试吧。</p>\n<p>下面是workflow配置：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-params\">name:</span> Ruby<br><br><span class=\"hljs-params\">on:</span><br>  <span class=\"hljs-params\">push:</span><br>    <span class=\"hljs-params\">branches:</span> [ master ]<br>  <span class=\"hljs-params\">pull_request:</span><br>    <span class=\"hljs-params\">branches:</span> [ master ]<br><br><span class=\"hljs-params\">jobs:</span><br>  <span class=\"hljs-params\">test:</span><br><br>    <span class=\"hljs-params\">runs-on:</span> ubuntu-latest<br><br>    <span class=\"hljs-params\">services:</span><br>      <span class=\"hljs-params\">mysql:</span><br>        <span class=\"hljs-params\">image:</span> mysql:<span class=\"hljs-number\">5.7</span><br>        <span class=\"hljs-params\">env:</span><br>          <span class=\"hljs-params\">MYSQL_ROOT_PASSWORD:</span> root<br>          <span class=\"hljs-params\">MYSQL_DATABASE:</span> app_db_test<br>        <span class=\"hljs-params\">ports:</span><br>          <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">3306</span><br>        <span class=\"hljs-params\">options:</span> <span class=\"hljs-operator\">&gt;</span><span class=\"hljs-operator\">-</span><br>          <span class=\"hljs-operator\">-</span>-health-cmd<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;mysqladmin ping&quot;</span><br>          <span class=\"hljs-operator\">-</span>-health-interval<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span>s<br>          <span class=\"hljs-operator\">-</span>-health-timeout<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span>s<br>          <span class=\"hljs-operator\">-</span>-health-retries<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span><br><br>    <span class=\"hljs-params\">steps:</span><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>checkout@v1<br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Set up Ruby <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-params\">uses:</span> ruby<span class=\"hljs-operator\">/</span>setup-ruby@v1<br>        <span class=\"hljs-params\">with:</span><br>          <span class=\"hljs-params\">ruby-version:</span> <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">6</span><br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Gem cache<br>        <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>cache@v1<br>        <span class=\"hljs-params\">with:</span><br>          <span class=\"hljs-params\">path:</span> vendor<span class=\"hljs-symbol\">/bundle</span><br>          <span class=\"hljs-params\">key:</span> $&#123;&#123; runner.os &#125;&#125;-gems-$&#123;&#123; hashFiles(&#x27;<span class=\"hljs-operator\">*</span><span class=\"hljs-operator\">*</span><span class=\"hljs-operator\">/</span>Gemfile.lock&#x27;) &#125;&#125;<br>          <span class=\"hljs-params\">restore-keys:</span> |<br>            $&#123;&#123; runner.os &#125;&#125;-gems-<br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Verify MySQL connection from host<br>        <span class=\"hljs-params\">run:</span> |<br>          sudo apt-get install <span class=\"hljs-operator\">-</span>y mysql-client libmysqlclient-dev<br>          sudo <span class=\"hljs-symbol\">/etc/init.d/mysql</span> start<br>          mysql <span class=\"hljs-operator\">-</span>h <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-operator\">-</span>-port $&#123;&#123; job.services.mysql.ports[<span class=\"hljs-number\">3306</span>] &#125;&#125; <span class=\"hljs-operator\">-</span>u root <span class=\"hljs-operator\">-</span>proot <span class=\"hljs-operator\">-</span>e <span class=\"hljs-string\">&quot;CREATE DATABASE IF NOT EXISTS app_db_test;&quot;</span><br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Bundle install, setup DB and run tests<br>        <span class=\"hljs-params\">env:</span><br>          <span class=\"hljs-params\">RAILS_ENV:</span> test<br>          <span class=\"hljs-params\">DB_PASSWORD:</span> root<br>          <span class=\"hljs-params\">DB_PORT:</span> $&#123;&#123; job.services.mysql.ports[<span class=\"hljs-number\">3306</span>] &#125;&#125;<br>        <span class=\"hljs-params\">run:</span> |<br>          cp config<span class=\"hljs-symbol\">/database.yml.ci</span> config<span class=\"hljs-symbol\">/database.yml</span><br>          gem install bundler<br>          bundle config path vendor<span class=\"hljs-symbol\">/bundle</span><br>          bundle install <span class=\"hljs-operator\">-</span>-jobs <span class=\"hljs-number\">4</span> <span class=\"hljs-operator\">-</span>-retry <span class=\"hljs-number\">3</span><br>          bundle exec rails db:setup<br>          bundle exec rails test<br></code></pre></td></tr></table></figure>\n\n<p>database.yml.ci 配置：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\">default: &amp;default<br>  adapter: mysql2<br>  encoding: utf8mb4<br>  pool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) &#123; 5 &#125; %&gt;<br>  username: root<br>  password: root<br><br><span class=\"hljs-keyword\">test:</span><br><span class=\"hljs-keyword\">  </span>&lt;&lt;: *default<br>  database: app_db_test<br><br></code></pre></td></tr></table></figure>\n","excerpt":"<p>学 rails 时用到了单元测试，那就用 github actions 来跑测试吧。</p>\n<p>下面是workflow配置：</p>","more":"<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-params\">name:</span> Ruby<br><br><span class=\"hljs-params\">on:</span><br>  <span class=\"hljs-params\">push:</span><br>    <span class=\"hljs-params\">branches:</span> [ master ]<br>  <span class=\"hljs-params\">pull_request:</span><br>    <span class=\"hljs-params\">branches:</span> [ master ]<br><br><span class=\"hljs-params\">jobs:</span><br>  <span class=\"hljs-params\">test:</span><br><br>    <span class=\"hljs-params\">runs-on:</span> ubuntu-latest<br><br>    <span class=\"hljs-params\">services:</span><br>      <span class=\"hljs-params\">mysql:</span><br>        <span class=\"hljs-params\">image:</span> mysql:<span class=\"hljs-number\">5.7</span><br>        <span class=\"hljs-params\">env:</span><br>          <span class=\"hljs-params\">MYSQL_ROOT_PASSWORD:</span> root<br>          <span class=\"hljs-params\">MYSQL_DATABASE:</span> app_db_test<br>        <span class=\"hljs-params\">ports:</span><br>          <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">3306</span><br>        <span class=\"hljs-params\">options:</span> <span class=\"hljs-operator\">&gt;</span><span class=\"hljs-operator\">-</span><br>          <span class=\"hljs-operator\">-</span>-health-cmd<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;mysqladmin ping&quot;</span><br>          <span class=\"hljs-operator\">-</span>-health-interval<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span>s<br>          <span class=\"hljs-operator\">-</span>-health-timeout<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span>s<br>          <span class=\"hljs-operator\">-</span>-health-retries<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span><br><br>    <span class=\"hljs-params\">steps:</span><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>checkout@v1<br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Set up Ruby <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-params\">uses:</span> ruby<span class=\"hljs-operator\">/</span>setup-ruby@v1<br>        <span class=\"hljs-params\">with:</span><br>          <span class=\"hljs-params\">ruby-version:</span> <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">6</span><br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Gem cache<br>        <span class=\"hljs-params\">uses:</span> actions<span class=\"hljs-operator\">/</span>cache@v1<br>        <span class=\"hljs-params\">with:</span><br>          <span class=\"hljs-params\">path:</span> vendor<span class=\"hljs-symbol\">/bundle</span><br>          <span class=\"hljs-params\">key:</span> $&#123;&#123; runner.os &#125;&#125;-gems-$&#123;&#123; hashFiles(&#x27;<span class=\"hljs-operator\">*</span><span class=\"hljs-operator\">*</span><span class=\"hljs-operator\">/</span>Gemfile.lock&#x27;) &#125;&#125;<br>          <span class=\"hljs-params\">restore-keys:</span> |<br>            $&#123;&#123; runner.os &#125;&#125;-gems-<br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Verify MySQL connection from host<br>        <span class=\"hljs-params\">run:</span> |<br>          sudo apt-get install <span class=\"hljs-operator\">-</span>y mysql-client libmysqlclient-dev<br>          sudo <span class=\"hljs-symbol\">/etc/init.d/mysql</span> start<br>          mysql <span class=\"hljs-operator\">-</span>h <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-operator\">-</span>-port $&#123;&#123; job.services.mysql.ports[<span class=\"hljs-number\">3306</span>] &#125;&#125; <span class=\"hljs-operator\">-</span>u root <span class=\"hljs-operator\">-</span>proot <span class=\"hljs-operator\">-</span>e <span class=\"hljs-string\">&quot;CREATE DATABASE IF NOT EXISTS app_db_test;&quot;</span><br><br>      <span class=\"hljs-operator\">-</span> <span class=\"hljs-params\">name:</span> Bundle install, setup DB and run tests<br>        <span class=\"hljs-params\">env:</span><br>          <span class=\"hljs-params\">RAILS_ENV:</span> test<br>          <span class=\"hljs-params\">DB_PASSWORD:</span> root<br>          <span class=\"hljs-params\">DB_PORT:</span> $&#123;&#123; job.services.mysql.ports[<span class=\"hljs-number\">3306</span>] &#125;&#125;<br>        <span class=\"hljs-params\">run:</span> |<br>          cp config<span class=\"hljs-symbol\">/database.yml.ci</span> config<span class=\"hljs-symbol\">/database.yml</span><br>          gem install bundler<br>          bundle config path vendor<span class=\"hljs-symbol\">/bundle</span><br>          bundle install <span class=\"hljs-operator\">-</span>-jobs <span class=\"hljs-number\">4</span> <span class=\"hljs-operator\">-</span>-retry <span class=\"hljs-number\">3</span><br>          bundle exec rails db:setup<br>          bundle exec rails test<br></code></pre></td></tr></table></figure>\n\n<p>database.yml.ci 配置：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\">default: &amp;default<br>  adapter: mysql2<br>  encoding: utf8mb4<br>  pool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) &#123; 5 &#125; %&gt;<br>  username: root<br>  password: root<br><br><span class=\"hljs-keyword\">test:</span><br><span class=\"hljs-keyword\">  </span>&lt;&lt;: *default<br>  database: app_db_test<br><br></code></pre></td></tr></table></figure>"},{"title":"var,let,const","date":"2022-03-03T08:23:37.000Z","_content":"\nvar、let、const 区别：\n<!--more-->\n### 变量提升\n\n<code>var</code>存在变量提升, 即变量可以在声明之前调用，值为undefined\n\nlet和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错\n\n### 暂时性死区\n\nvar不存在暂时性死区\n\nlet和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量\n\n### 块级作用域\n\nvar不存在块级作用域\n\nlet和const存在块级作用域\n\n### 重复声明\n\nvar允许重复声明变量\n\nlet和const在同一作用域不允许重复声明变量\n\n### 修改声明的变量\n\nvar和let可以\n\nconst声明一个只读的常量。一旦声明，常量的值就不能改变","source":"_posts/var-let-const.md","raw":"---\ntitle: 'var,let,const'\ndate: 2022-03-03 16:23:37\ntags: ['JS']\n---\n\nvar、let、const 区别：\n<!--more-->\n### 变量提升\n\n<code>var</code>存在变量提升, 即变量可以在声明之前调用，值为undefined\n\nlet和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错\n\n### 暂时性死区\n\nvar不存在暂时性死区\n\nlet和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量\n\n### 块级作用域\n\nvar不存在块级作用域\n\nlet和const存在块级作用域\n\n### 重复声明\n\nvar允许重复声明变量\n\nlet和const在同一作用域不允许重复声明变量\n\n### 修改声明的变量\n\nvar和let可以\n\nconst声明一个只读的常量。一旦声明，常量的值就不能改变","slug":"var-let-const","published":1,"updated":"2025-03-20T03:56:32.442Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp4000o9cck79pph43i","content":"<p>var、let、const 区别：</p>\n<span id=\"more\"></span>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p><code>var</code>存在变量提升, 即变量可以在声明之前调用，值为undefined</p>\n<p>let和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>var不存在暂时性死区</p>\n<p>let和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>var不存在块级作用域</p>\n<p>let和const存在块级作用域</p>\n<h3 id=\"重复声明\"><a href=\"#重复声明\" class=\"headerlink\" title=\"重复声明\"></a>重复声明</h3><p>var允许重复声明变量</p>\n<p>let和const在同一作用域不允许重复声明变量</p>\n<h3 id=\"修改声明的变量\"><a href=\"#修改声明的变量\" class=\"headerlink\" title=\"修改声明的变量\"></a>修改声明的变量</h3><p>var和let可以</p>\n<p>const声明一个只读的常量。一旦声明，常量的值就不能改变</p>\n","excerpt":"<p>var、let、const 区别：</p>","more":"<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p><code>var</code>存在变量提升, 即变量可以在声明之前调用，值为undefined</p>\n<p>let和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>var不存在暂时性死区</p>\n<p>let和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>var不存在块级作用域</p>\n<p>let和const存在块级作用域</p>\n<h3 id=\"重复声明\"><a href=\"#重复声明\" class=\"headerlink\" title=\"重复声明\"></a>重复声明</h3><p>var允许重复声明变量</p>\n<p>let和const在同一作用域不允许重复声明变量</p>\n<h3 id=\"修改声明的变量\"><a href=\"#修改声明的变量\" class=\"headerlink\" title=\"修改声明的变量\"></a>修改声明的变量</h3><p>var和let可以</p>\n<p>const声明一个只读的常量。一旦声明，常量的值就不能改变</p>"},{"title":"vps一键搭建ss脚本","date":"2019-07-26T16:28:37.000Z","_content":"### 安装脚本\n```\nwget --no-check-certificate http://down.whsir.com/downloads/shadowsocks-go.sh\nchmod +x shadowsocks-go.sh\n./shadowsocks-go.sh 2>&1 | tee shadowsocks-go.log\n```\n<!-- more -->\n### 卸载方法\n```\n./shadowsocks-go.sh uninstall\n```\n### 用户密码配置\n```\nvi /etc/shadowsocks/config.json\n\n{\n    \"server\":\"0.0.0.0\",  //你的主机IP\n    \"server_port\":xxxx,  //端口\n    \"local_port\":1080,\n    \"password\":\"xxxx\",\n    \"method\":\"aes-256-cfb\",\n    \"timeout\":600\n}\n```\n\n### 启动\n```\n/etc/init.d/shadowsocks restart\n```\n### 常用命令\n```\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n```\n","source":"_posts/vps一键搭建ss脚本.md","raw":"---\ntitle: vps一键搭建ss脚本\ndate: 2019-07-27 00:28:37\ntags: ['vps', 'ss']\n---\n### 安装脚本\n```\nwget --no-check-certificate http://down.whsir.com/downloads/shadowsocks-go.sh\nchmod +x shadowsocks-go.sh\n./shadowsocks-go.sh 2>&1 | tee shadowsocks-go.log\n```\n<!-- more -->\n### 卸载方法\n```\n./shadowsocks-go.sh uninstall\n```\n### 用户密码配置\n```\nvi /etc/shadowsocks/config.json\n\n{\n    \"server\":\"0.0.0.0\",  //你的主机IP\n    \"server_port\":xxxx,  //端口\n    \"local_port\":1080,\n    \"password\":\"xxxx\",\n    \"method\":\"aes-256-cfb\",\n    \"timeout\":600\n}\n```\n\n### 启动\n```\n/etc/init.d/shadowsocks restart\n```\n### 常用命令\n```\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n```\n","slug":"vps一键搭建ss脚本","published":1,"updated":"2025-03-20T03:56:32.442Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp5000q9cckdb0za2l9","content":"<h3 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">wget --<span class=\"hljs-keyword\">no</span>-check-certificate http://down.whsir.<span class=\"hljs-keyword\">com</span>/downloads/shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span><br>chmod +<span class=\"hljs-keyword\">x</span> shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span><br>./shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> | tee shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-built_in\">log</span><br></code></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"卸载方法\"><a href=\"#卸载方法\" class=\"headerlink\" title=\"卸载方法\"></a>卸载方法</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">./shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span> uninstall<br></code></pre></td></tr></table></figure>\n<h3 id=\"用户密码配置\"><a href=\"#用户密码配置\" class=\"headerlink\" title=\"用户密码配置\"></a>用户密码配置</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">vi /etc/shadowsocks/config.json<br><br>&#123;<br>    <span class=\"hljs-string\">&quot;server&quot;</span>:<span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>,  <span class=\"hljs-comment\">//你的主机IP</span><br>    <span class=\"hljs-string\">&quot;server_port&quot;</span>:xxxx,  <span class=\"hljs-comment\">//端口</span><br>    <span class=\"hljs-string\">&quot;local_port&quot;</span>:<span class=\"hljs-number\">1080</span>,<br>    <span class=\"hljs-string\">&quot;password&quot;</span>:<span class=\"hljs-string\">&quot;xxxx&quot;</span>,<br>    <span class=\"hljs-string\">&quot;method&quot;</span>:<span class=\"hljs-string\">&quot;aes-256-cfb&quot;</span>,<br>    <span class=\"hljs-string\">&quot;timeout&quot;</span>:<span class=\"hljs-number\">600</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks restart<br></code></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\">启动：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks start<br>停止：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks stop<br>重启：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks restart<br>状态：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks status<br></code></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">wget --<span class=\"hljs-keyword\">no</span>-check-certificate http://down.whsir.<span class=\"hljs-keyword\">com</span>/downloads/shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span><br>chmod +<span class=\"hljs-keyword\">x</span> shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span><br>./shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> | tee shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-built_in\">log</span><br></code></pre></td></tr></table></figure>","more":"<h3 id=\"卸载方法\"><a href=\"#卸载方法\" class=\"headerlink\" title=\"卸载方法\"></a>卸载方法</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">./shadowsocks-<span class=\"hljs-keyword\">go</span>.<span class=\"hljs-keyword\">sh</span> uninstall<br></code></pre></td></tr></table></figure>\n<h3 id=\"用户密码配置\"><a href=\"#用户密码配置\" class=\"headerlink\" title=\"用户密码配置\"></a>用户密码配置</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">vi /etc/shadowsocks/config.json<br><br>&#123;<br>    <span class=\"hljs-string\">&quot;server&quot;</span>:<span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>,  <span class=\"hljs-comment\">//你的主机IP</span><br>    <span class=\"hljs-string\">&quot;server_port&quot;</span>:xxxx,  <span class=\"hljs-comment\">//端口</span><br>    <span class=\"hljs-string\">&quot;local_port&quot;</span>:<span class=\"hljs-number\">1080</span>,<br>    <span class=\"hljs-string\">&quot;password&quot;</span>:<span class=\"hljs-string\">&quot;xxxx&quot;</span>,<br>    <span class=\"hljs-string\">&quot;method&quot;</span>:<span class=\"hljs-string\">&quot;aes-256-cfb&quot;</span>,<br>    <span class=\"hljs-string\">&quot;timeout&quot;</span>:<span class=\"hljs-number\">600</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks restart<br></code></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\">启动：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks start<br>停止：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks stop<br>重启：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks restart<br>状态：<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">init</span>.d<span class=\"hljs-operator\">/</span>shadowsocks status<br></code></pre></td></tr></table></figure>"},{"title":"事件捕获,冒泡,代理","date":"2022-01-26T13:52:04.000Z","_content":"\n事件冒泡： 事件默认是由下往上的冒泡执行方式。以点击事件为例，当我们点击子元素也能触发父元素及以上元素的点击事件。事件执行顺序由下至上，这就是冒泡事件\n\n事件捕获：执行方式是由上往下的捕获方式。还是以点击事件为例，当一个子元素绑定了点击事件，我们点击子元素时，父元素及以上的元素绑定的点击事件也会执行。事件的执行顺序时由上至下，这就是捕获事件\n\n<!-- more -->\n\n事件代理： 事件代理是基于事件冒泡，当我们点击子元素也能触发父元素及以上元素的点击事件，所以可以通过给父元素添加事件函数，通过判断当前点击的是不是子元素来添加一些处理。 这样我么就不用给每一个子元素添加事件，对于动态添加的子元素也适用。\n","source":"_posts/事件捕获-冒泡-代理.md","raw":"---\ntitle: '事件捕获,冒泡,代理'\ndate: 2022-01-26 21:52:04\ntags: ['JS', '事件捕获', '事件冒泡']\n---\n\n事件冒泡： 事件默认是由下往上的冒泡执行方式。以点击事件为例，当我们点击子元素也能触发父元素及以上元素的点击事件。事件执行顺序由下至上，这就是冒泡事件\n\n事件捕获：执行方式是由上往下的捕获方式。还是以点击事件为例，当一个子元素绑定了点击事件，我们点击子元素时，父元素及以上的元素绑定的点击事件也会执行。事件的执行顺序时由上至下，这就是捕获事件\n\n<!-- more -->\n\n事件代理： 事件代理是基于事件冒泡，当我们点击子元素也能触发父元素及以上元素的点击事件，所以可以通过给父元素添加事件函数，通过判断当前点击的是不是子元素来添加一些处理。 这样我么就不用给每一个子元素添加事件，对于动态添加的子元素也适用。\n","slug":"事件捕获-冒泡-代理","published":1,"updated":"2025-03-20T03:56:32.443Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp5000s9cck9jeyfqto","content":"<p>事件冒泡： 事件默认是由下往上的冒泡执行方式。以点击事件为例，当我们点击子元素也能触发父元素及以上元素的点击事件。事件执行顺序由下至上，这就是冒泡事件</p>\n<p>事件捕获：执行方式是由上往下的捕获方式。还是以点击事件为例，当一个子元素绑定了点击事件，我们点击子元素时，父元素及以上的元素绑定的点击事件也会执行。事件的执行顺序时由上至下，这就是捕获事件</p>\n<span id=\"more\"></span>\n\n<p>事件代理： 事件代理是基于事件冒泡，当我们点击子元素也能触发父元素及以上元素的点击事件，所以可以通过给父元素添加事件函数，通过判断当前点击的是不是子元素来添加一些处理。 这样我么就不用给每一个子元素添加事件，对于动态添加的子元素也适用。</p>\n","excerpt":"<p>事件冒泡： 事件默认是由下往上的冒泡执行方式。以点击事件为例，当我们点击子元素也能触发父元素及以上元素的点击事件。事件执行顺序由下至上，这就是冒泡事件</p>\n<p>事件捕获：执行方式是由上往下的捕获方式。还是以点击事件为例，当一个子元素绑定了点击事件，我们点击子元素时，父元素及以上的元素绑定的点击事件也会执行。事件的执行顺序时由上至下，这就是捕获事件</p>","more":"<p>事件代理： 事件代理是基于事件冒泡，当我们点击子元素也能触发父元素及以上元素的点击事件，所以可以通过给父元素添加事件函数，通过判断当前点击的是不是子元素来添加一些处理。 这样我么就不用给每一个子元素添加事件，对于动态添加的子元素也适用。</p>"},{"title":"二分查找","date":"2022-03-10T12:11:18.000Z","_content":"\n二分查找，js实现：\n<!-- more -->\n```\nfunction binarySearch(list, target){\n  if(!target) return\n  let left = 0,\n    right = list.length - 1;\n  while(left <= right){\n    let mid = (left + right) % 2\n    if(target === list[mid]){\n      return mid\n    }else if (target < list[mid]){\n      right = mid - 1\n    }else {\n      left = mid + 1\n    }\n  }\n  return '未找到'\n}\n```\n\n","source":"_posts/二分查找.md","raw":"---\ntitle: 二分查找\ndate: 2022-03-10 20:11:18\ntags: ['JS', '算法']\n---\n\n二分查找，js实现：\n<!-- more -->\n```\nfunction binarySearch(list, target){\n  if(!target) return\n  let left = 0,\n    right = list.length - 1;\n  while(left <= right){\n    let mid = (left + right) % 2\n    if(target === list[mid]){\n      return mid\n    }else if (target < list[mid]){\n      right = mid - 1\n    }else {\n      left = mid + 1\n    }\n  }\n  return '未找到'\n}\n```\n\n","slug":"二分查找","published":1,"updated":"2025-03-20T03:56:32.443Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp6000v9cckcl2j7odv","content":"<p>二分查找，js实现：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearch</span>(<span class=\"hljs-params\">list, target</span>)&#123;<br>  <span class=\"hljs-keyword\">if</span>(!target) <span class=\"hljs-keyword\">return</span><br>  let <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-built_in\">right</span> = list.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">left</span> &lt;= <span class=\"hljs-built_in\">right</span>)&#123;<br>    let <span class=\"hljs-built_in\">mid</span> = (<span class=\"hljs-built_in\">left</span> + <span class=\"hljs-built_in\">right</span>) % <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-keyword\">if</span>(target === list[<span class=\"hljs-built_in\">mid</span>])&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">mid</span><br>    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &lt; list[<span class=\"hljs-built_in\">mid</span>])&#123;<br>      <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">mid</span> - <span class=\"hljs-number\">1</span><br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">mid</span> + <span class=\"hljs-number\">1</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;未找到&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n","excerpt":"<p>二分查找，js实现：</p>","more":"<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearch</span>(<span class=\"hljs-params\">list, target</span>)&#123;<br>  <span class=\"hljs-keyword\">if</span>(!target) <span class=\"hljs-keyword\">return</span><br>  let <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-built_in\">right</span> = list.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">left</span> &lt;= <span class=\"hljs-built_in\">right</span>)&#123;<br>    let <span class=\"hljs-built_in\">mid</span> = (<span class=\"hljs-built_in\">left</span> + <span class=\"hljs-built_in\">right</span>) % <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-keyword\">if</span>(target === list[<span class=\"hljs-built_in\">mid</span>])&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">mid</span><br>    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &lt; list[<span class=\"hljs-built_in\">mid</span>])&#123;<br>      <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">mid</span> - <span class=\"hljs-number\">1</span><br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">mid</span> + <span class=\"hljs-number\">1</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;未找到&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"从输入url到页面展现","date":"2022-02-17T14:15:35.000Z","_content":"从输入url到页面展现, 背后的流程大致如下：\n1.浏览器查找当前URL是否存在缓存，并比较缓存是否过期\n2.DNS解析\n3.通过IP向服务器发起TCP连接\n4.向服务器发起HTTP请求\n5.服务器返回请求内容\n6.浏览器解析渲染页面\n7.关闭连接\n<!-- more -->\n### 缓存\nHTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为强缓存，协商缓存\n\n#### 强缓存\n强缓存判断HTTP首部字段：cache-control，Expires。\n\nExpires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用。\n\ncache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。\n\n#### 协商缓存\n协商缓存通过HTTP的last-modified，Etag字段进行判断。\n\nlast-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。\n\nEtag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化(IfNoneMatch)，如果变化则返回新资源，否则返回304。\n\n### DNS解析\n我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。\n\n首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。\n\n如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。\n\n如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。\n\n最后迭代查询，按根域服务器 ->顶级域,.cn->第二层域，hb.cn ->子域，www.hb.cn的顺序找到IP地址。\n\n### TCP连接\n在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。\n\n第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； \n\n第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n 完成三次握手，客户端与服务器开始传送数据。\n\n ### 发起HTTP请求\n\n 完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。\n\n ### 服务器返回请求内容\n\n 服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。\n\n　　状态码主要包括以下部分\n\n　　1xx：指示信息–表示请求已接收，继续处理。\n\n　　2xx：成功–表示请求已被成功接收、理解、接受。\n\n　　3xx：重定向–要完成请求必须进行更进一步的操作。\n\n　　4xx：客户端错误–请求有语法错误或请求无法实现。\n\n　　5xx：服务器端错误–服务器未能实现合法的请求。\n\n　　响应头主要由Cache-Control、 Connection、Date、Pragma等组成。\n\n　　响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。\n\n### 浏览器解析渲染页面\n浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：\n\n  解析HTML，构建DOM树\n  解析CSS，生成CSS规则树\n  合并DOM树和CSS规则树，生成render树\n  布局render树（layout/reflow），负责各元素尺寸、位置的计算\n  绘制render树（paint），绘制页面像素信息\n  浏览器会将各层的信息发送给GUI，GUI会将各层合成（composite），显示在屏幕上\n\n  遇到CSS样式资源（特点）：\n\n    CSS下载时异步，不会阻塞浏览器构建DOM树，但是会阻塞渲染，也就是在构建render树时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）。有例外，media query声明的CSS是不会阻塞渲染的。\n\n遇到JS脚本资源（特点）：\n\n    阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析html；\n    浏览器的优化，在脚本阻塞时，也会继续下载其他资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已。defer（延迟执行）与async（异步执行），普通的脚本是会阻塞浏览器解析的，但是可以加上defer和async属性，这样脚本就变成异步了，可以等到解析完成后再执行。\n遇到img图片类资源：\n\n遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方。\n\n　　如果说响应的内容是HTML文档的话，就需要浏览器进行解析渲染呈现给用户。整个过程涉及两个方面：解析和渲染。在渲染页面之前，需要构建DOM树和CSSOM树。\n\n　　在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。这里就涉及了两个重要概念：Reflow和Repaint。\n\n　　Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。\n\n　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。\n\n　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。\n\n　　下面这些动作有很大可能会是成本比较高的：\n\n增加、删除、修改DOM结点时，会导致Reflow或Repaint\n\n移动DOM的位置，或是搞个动画的时候\n\n内容发生变化\n\n修改CSS样式的时候\n\nResize窗口的时候（移动端没有这个问题），或是滚动的时候\n\n修改网页的默认字体时\n\n　　基本上来说，reflow有如下的几个原因：\n\nInitial，网页初始化的时候\n\nIncremental，一些js在操作DOM树时\n\nResize，其些元件的尺寸变了\n\nStyleChange，如果CSS的属性发生变化了\n\nDirty，几个Incremental的reflow发生在同一个frame的子树上\n\n### 关闭TCP连接或继续保持连接\n\n通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。","source":"_posts/从输入url到页面展现.md","raw":"---\ntitle: 从输入url到页面展现\ndate: 2022-02-17 22:15:35\ntags: ['JS', '浏览器']\n---\n从输入url到页面展现, 背后的流程大致如下：\n1.浏览器查找当前URL是否存在缓存，并比较缓存是否过期\n2.DNS解析\n3.通过IP向服务器发起TCP连接\n4.向服务器发起HTTP请求\n5.服务器返回请求内容\n6.浏览器解析渲染页面\n7.关闭连接\n<!-- more -->\n### 缓存\nHTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为强缓存，协商缓存\n\n#### 强缓存\n强缓存判断HTTP首部字段：cache-control，Expires。\n\nExpires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用。\n\ncache-control中的max-age保存一个相对时间。例如Cache-Control: max-age = 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。\n\n#### 协商缓存\n协商缓存通过HTTP的last-modified，Etag字段进行判断。\n\nlast-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。\n\nEtag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化(IfNoneMatch)，如果变化则返回新资源，否则返回304。\n\n### DNS解析\n我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。\n\n首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。\n\n如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。\n\n如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。\n\n最后迭代查询，按根域服务器 ->顶级域,.cn->第二层域，hb.cn ->子域，www.hb.cn的顺序找到IP地址。\n\n### TCP连接\n在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。\n\n第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； \n\n第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n 完成三次握手，客户端与服务器开始传送数据。\n\n ### 发起HTTP请求\n\n 完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。\n\n ### 服务器返回请求内容\n\n 服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。\n\n　　状态码主要包括以下部分\n\n　　1xx：指示信息–表示请求已接收，继续处理。\n\n　　2xx：成功–表示请求已被成功接收、理解、接受。\n\n　　3xx：重定向–要完成请求必须进行更进一步的操作。\n\n　　4xx：客户端错误–请求有语法错误或请求无法实现。\n\n　　5xx：服务器端错误–服务器未能实现合法的请求。\n\n　　响应头主要由Cache-Control、 Connection、Date、Pragma等组成。\n\n　　响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。\n\n### 浏览器解析渲染页面\n浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：\n\n  解析HTML，构建DOM树\n  解析CSS，生成CSS规则树\n  合并DOM树和CSS规则树，生成render树\n  布局render树（layout/reflow），负责各元素尺寸、位置的计算\n  绘制render树（paint），绘制页面像素信息\n  浏览器会将各层的信息发送给GUI，GUI会将各层合成（composite），显示在屏幕上\n\n  遇到CSS样式资源（特点）：\n\n    CSS下载时异步，不会阻塞浏览器构建DOM树，但是会阻塞渲染，也就是在构建render树时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）。有例外，media query声明的CSS是不会阻塞渲染的。\n\n遇到JS脚本资源（特点）：\n\n    阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析html；\n    浏览器的优化，在脚本阻塞时，也会继续下载其他资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已。defer（延迟执行）与async（异步执行），普通的脚本是会阻塞浏览器解析的，但是可以加上defer和async属性，这样脚本就变成异步了，可以等到解析完成后再执行。\n遇到img图片类资源：\n\n遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方。\n\n　　如果说响应的内容是HTML文档的话，就需要浏览器进行解析渲染呈现给用户。整个过程涉及两个方面：解析和渲染。在渲染页面之前，需要构建DOM树和CSSOM树。\n\n　　在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。这里就涉及了两个重要概念：Reflow和Repaint。\n\n　　Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。\n\n　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。\n\n　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。\n\n　　下面这些动作有很大可能会是成本比较高的：\n\n增加、删除、修改DOM结点时，会导致Reflow或Repaint\n\n移动DOM的位置，或是搞个动画的时候\n\n内容发生变化\n\n修改CSS样式的时候\n\nResize窗口的时候（移动端没有这个问题），或是滚动的时候\n\n修改网页的默认字体时\n\n　　基本上来说，reflow有如下的几个原因：\n\nInitial，网页初始化的时候\n\nIncremental，一些js在操作DOM树时\n\nResize，其些元件的尺寸变了\n\nStyleChange，如果CSS的属性发生变化了\n\nDirty，几个Incremental的reflow发生在同一个frame的子树上\n\n### 关闭TCP连接或继续保持连接\n\n通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。","slug":"从输入url到页面展现","published":1,"updated":"2025-03-20T03:56:32.443Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp6000x9cck8s1t9sfl","content":"<p>从输入url到页面展现, 背后的流程大致如下：<br>1.浏览器查找当前URL是否存在缓存，并比较缓存是否过期<br>2.DNS解析<br>3.通过IP向服务器发起TCP连接<br>4.向服务器发起HTTP请求<br>5.服务器返回请求内容<br>6.浏览器解析渲染页面<br>7.关闭连接</p>\n<span id=\"more\"></span>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为强缓存，协商缓存</p>\n<h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p>强缓存判断HTTP首部字段：cache-control，Expires。</p>\n<p>Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用。</p>\n<p>cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age &#x3D; 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>协商缓存通过HTTP的last-modified，Etag字段进行判断。</p>\n<p>last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。</p>\n<p>Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化(IfNoneMatch)，如果变化则返回新资源，否则返回304。</p>\n<h3 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h3><p>我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。</p>\n<p>首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。</p>\n<p>如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。</p>\n<p>如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。</p>\n<p>最后迭代查询，按根域服务器 -&gt;顶级域,.cn-&gt;第二层域，hb.cn -&gt;子域，<a href=\"http://www.hb.cn的顺序找到ip地址./\">www.hb.cn的顺序找到IP地址。</a></p>\n<h3 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h3><p>在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。</p>\n<p>第一次握手： 建立连接时，客户端发送syn包（syn&#x3D;j）到服务器，并进入SYN_SENT状态，等待服务器确认； </p>\n<p>第二次握手： 服务器收到syn包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<p>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<p> 完成三次握手，客户端与服务器开始传送数据。</p>\n<h3 id=\"发起HTTP请求\"><a href=\"#发起HTTP请求\" class=\"headerlink\" title=\"发起HTTP请求\"></a>发起HTTP请求</h3><p> 完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。</p>\n<h3 id=\"服务器返回请求内容\"><a href=\"#服务器返回请求内容\" class=\"headerlink\" title=\"服务器返回请求内容\"></a>服务器返回请求内容</h3><p> 服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。</p>\n<p>　　状态码主要包括以下部分</p>\n<p>　　1xx：指示信息–表示请求已接收，继续处理。</p>\n<p>　　2xx：成功–表示请求已被成功接收、理解、接受。</p>\n<p>　　3xx：重定向–要完成请求必须进行更进一步的操作。</p>\n<p>　　4xx：客户端错误–请求有语法错误或请求无法实现。</p>\n<p>　　5xx：服务器端错误–服务器未能实现合法的请求。</p>\n<p>　　响应头主要由Cache-Control、 Connection、Date、Pragma等组成。</p>\n<p>　　响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。</p>\n<h3 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h3><p>浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：</p>\n<p>  解析HTML，构建DOM树<br>  解析CSS，生成CSS规则树<br>  合并DOM树和CSS规则树，生成render树<br>  布局render树（layout&#x2F;reflow），负责各元素尺寸、位置的计算<br>  绘制render树（paint），绘制页面像素信息<br>  浏览器会将各层的信息发送给GUI，GUI会将各层合成（composite），显示在屏幕上</p>\n<p>  遇到CSS样式资源（特点）：</p>\n<pre><code class=\"hljs\">CSS下载时异步，不会阻塞浏览器构建DOM树，但是会阻塞渲染，也就是在构建render树时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）。有例外，media query声明的CSS是不会阻塞渲染的。\n</code></pre>\n<p>遇到JS脚本资源（特点）：</p>\n<pre><code class=\"hljs\">阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析html；\n浏览器的优化，在脚本阻塞时，也会继续下载其他资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已。defer（延迟执行）与async（异步执行），普通的脚本是会阻塞浏览器解析的，但是可以加上defer和async属性，这样脚本就变成异步了，可以等到解析完成后再执行。\n</code></pre>\n<p>遇到img图片类资源：</p>\n<p>遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方。</p>\n<p>　　如果说响应的内容是HTML文档的话，就需要浏览器进行解析渲染呈现给用户。整个过程涉及两个方面：解析和渲染。在渲染页面之前，需要构建DOM树和CSSOM树。</p>\n<p>　　在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。这里就涉及了两个重要概念：Reflow和Repaint。</p>\n<p>　　Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。</p>\n<p>　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。</p>\n<p>　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。</p>\n<p>　　下面这些动作有很大可能会是成本比较高的：</p>\n<p>增加、删除、修改DOM结点时，会导致Reflow或Repaint</p>\n<p>移动DOM的位置，或是搞个动画的时候</p>\n<p>内容发生变化</p>\n<p>修改CSS样式的时候</p>\n<p>Resize窗口的时候（移动端没有这个问题），或是滚动的时候</p>\n<p>修改网页的默认字体时</p>\n<p>　　基本上来说，reflow有如下的几个原因：</p>\n<p>Initial，网页初始化的时候</p>\n<p>Incremental，一些js在操作DOM树时</p>\n<p>Resize，其些元件的尺寸变了</p>\n<p>StyleChange，如果CSS的属性发生变化了</p>\n<p>Dirty，几个Incremental的reflow发生在同一个frame的子树上</p>\n<h3 id=\"关闭TCP连接或继续保持连接\"><a href=\"#关闭TCP连接或继续保持连接\" class=\"headerlink\" title=\"关闭TCP连接或继续保持连接\"></a>关闭TCP连接或继续保持连接</h3><p>通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。</p>\n","excerpt":"<p>从输入url到页面展现, 背后的流程大致如下：<br>1.浏览器查找当前URL是否存在缓存，并比较缓存是否过期<br>2.DNS解析<br>3.通过IP向服务器发起TCP连接<br>4.向服务器发起HTTP请求<br>5.服务器返回请求内容<br>6.浏览器解析渲染页面<br>7.关闭连接</p>","more":"<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为强缓存，协商缓存</p>\n<h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p>强缓存判断HTTP首部字段：cache-control，Expires。</p>\n<p>Expires是一个绝对时间，即服务器时间。浏览器检查当前时间，如果还没到失效时间就直接使用缓存文件。但是该方法存在一个问题：服务器时间与客户端时间可能不一致。因此该字段已经很少使用。</p>\n<p>cache-control中的max-age保存一个相对时间。例如Cache-Control: max-age &#x3D; 484200，表示浏览器收到文件后，缓存在484200s内均有效。 如果同时存在cache-control和Expires，浏览器总是优先使用cache-control。</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>协商缓存通过HTTP的last-modified，Etag字段进行判断。</p>\n<p>last-modified是第一次请求资源时，服务器返回的字段，表示最后一次更新的时间。下一次浏览器请求资源时就发送if-modified-since字段。服务器用本地Last-modified时间与if-modified-since时间比较，如果不一致则认为缓存已过期并返回新资源给浏览器；如果时间一致则发送304状态码，让浏览器继续使用缓存。</p>\n<p>Etag：资源的实体标识（哈希字符串），当资源内容更新时，Etag会改变。服务器会判断Etag是否发生变化(IfNoneMatch)，如果变化则返回新资源，否则返回304。</p>\n<h3 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h3><p>我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。</p>\n<p>首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。</p>\n<p>如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。</p>\n<p>如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。</p>\n<p>最后迭代查询，按根域服务器 -&gt;顶级域,.cn-&gt;第二层域，hb.cn -&gt;子域，<a href=\"http://www.hb.cn的顺序找到ip地址./\">www.hb.cn的顺序找到IP地址。</a></p>\n<h3 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h3><p>在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。</p>\n<p>第一次握手： 建立连接时，客户端发送syn包（syn&#x3D;j）到服务器，并进入SYN_SENT状态，等待服务器确认； </p>\n<p>第二次握手： 服务器收到syn包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<p>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<p> 完成三次握手，客户端与服务器开始传送数据。</p>\n<h3 id=\"发起HTTP请求\"><a href=\"#发起HTTP请求\" class=\"headerlink\" title=\"发起HTTP请求\"></a>发起HTTP请求</h3><p> 完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。</p>\n<h3 id=\"服务器返回请求内容\"><a href=\"#服务器返回请求内容\" class=\"headerlink\" title=\"服务器返回请求内容\"></a>服务器返回请求内容</h3><p> 服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。</p>\n<p>　　状态码主要包括以下部分</p>\n<p>　　1xx：指示信息–表示请求已接收，继续处理。</p>\n<p>　　2xx：成功–表示请求已被成功接收、理解、接受。</p>\n<p>　　3xx：重定向–要完成请求必须进行更进一步的操作。</p>\n<p>　　4xx：客户端错误–请求有语法错误或请求无法实现。</p>\n<p>　　5xx：服务器端错误–服务器未能实现合法的请求。</p>\n<p>　　响应头主要由Cache-Control、 Connection、Date、Pragma等组成。</p>\n<p>　　响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。</p>\n<h3 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h3><p>浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：</p>\n<p>  解析HTML，构建DOM树<br>  解析CSS，生成CSS规则树<br>  合并DOM树和CSS规则树，生成render树<br>  布局render树（layout&#x2F;reflow），负责各元素尺寸、位置的计算<br>  绘制render树（paint），绘制页面像素信息<br>  浏览器会将各层的信息发送给GUI，GUI会将各层合成（composite），显示在屏幕上</p>\n<p>  遇到CSS样式资源（特点）：</p>\n<pre><code>CSS下载时异步，不会阻塞浏览器构建DOM树，但是会阻塞渲染，也就是在构建render树时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）。有例外，media query声明的CSS是不会阻塞渲染的。\n</code></pre>\n<p>遇到JS脚本资源（特点）：</p>\n<pre><code>阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析html；\n浏览器的优化，在脚本阻塞时，也会继续下载其他资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已。defer（延迟执行）与async（异步执行），普通的脚本是会阻塞浏览器解析的，但是可以加上defer和async属性，这样脚本就变成异步了，可以等到解析完成后再执行。\n</code></pre>\n<p>遇到img图片类资源：</p>\n<p>遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方。</p>\n<p>　　如果说响应的内容是HTML文档的话，就需要浏览器进行解析渲染呈现给用户。整个过程涉及两个方面：解析和渲染。在渲染页面之前，需要构建DOM树和CSSOM树。</p>\n<p>　　在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。这里就涉及了两个重要概念：Reflow和Repaint。</p>\n<p>　　Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。</p>\n<p>　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。</p>\n<p>　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。</p>\n<p>　　下面这些动作有很大可能会是成本比较高的：</p>\n<p>增加、删除、修改DOM结点时，会导致Reflow或Repaint</p>\n<p>移动DOM的位置，或是搞个动画的时候</p>\n<p>内容发生变化</p>\n<p>修改CSS样式的时候</p>\n<p>Resize窗口的时候（移动端没有这个问题），或是滚动的时候</p>\n<p>修改网页的默认字体时</p>\n<p>　　基本上来说，reflow有如下的几个原因：</p>\n<p>Initial，网页初始化的时候</p>\n<p>Incremental，一些js在操作DOM树时</p>\n<p>Resize，其些元件的尺寸变了</p>\n<p>StyleChange，如果CSS的属性发生变化了</p>\n<p>Dirty，几个Incremental的reflow发生在同一个frame的子树上</p>\n<h3 id=\"关闭TCP连接或继续保持连接\"><a href=\"#关闭TCP连接或继续保持连接\" class=\"headerlink\" title=\"关闭TCP连接或继续保持连接\"></a>关闭TCP连接或继续保持连接</h3><p>通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。</p>"},{"title":"优化打包体积","date":"2022-01-24T14:50:05.000Z","_content":"\n最近发现项目打包体积竟然有20M了， 想了想项目确实有几张图片体积很大，还引入了echarts， 但不至于体积这么大吧，于是开始研究webpack打包了。\n<!-- more -->\n首先安装``webpack-bundle-analyzer` 插件， 找出最占用空间的文件有哪些。\n\n`npm install webpack-bundle-analyzer -D`\n\n我是用的`vue-cli4`， 所以在`vue.config.js`里面添加如下：\n```\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\n \n// 展示图形化信息\nchainWebpack: config => {\n  config\n    .plugin('webpack-bundle-analyzer')\n    .use(BundleAnalyzerPlugin)\n}\n```\n\n然后在`package.json`里面添加`\"analyzer\": \"use_analyzer=true npm run serve\"`\n可以看到如下图：\n\n!['打包分析'](https://static01.imgkr.com/temp/8589678b5bcd43cc9107f90eb60f701e.jpg)\n\n可以看到，echarts 可以说是罪魁祸首了，源码加上地图json文件，占用了很大一部分空间。elementUI的文件也很大。\n\n首先是elementUI 的按需加载：\n```\nmodule.exports = {\n  presets: [\n    '@vue/app'\n  ],\n  plugins: [\n    [\n      \"component\",\n      {\n        libraryName: \"element-ui\",\n        styleLibraryName: \"theme-chalk\"\n      }\n    ]\n  ]\n}\n```\n接着优化echarts按需加载：\n`npm install babel-plugin-equire -D`\n\n```const echarts = equire([\n    // 写上你需要的 echarts api\n    \"bar\",\n    \"line\",\n    \"map\"\n  ]);\n\n  export default echarts;\n```\n\n在`vue.config.js`里面添加\n```\nmodule.exports = {\n  presets: [\n    '@vue/app'\n  ],\n  plugins: [\n    [\n      \"component\",\n      {\n        libraryName: \"element-ui\",\n        styleLibraryName: \"theme-chalk\"\n      }\n    ],\n    \"equire\"\n  ]\n}\n```\n页面应用：\n```\n// 直接引用\n import echarts from '@/lib/util/echarts.js' \n \n this.myChart = echarts.init(this.$refs.chart) \n```\n\n删除无用的插件，避免加载多余的资源\n```\nchainWebpack: config => {\n    // 移除prefetch插件，避免加载多余的资源\n    config.plugins.delete('prefetch')\n    / 移除 preload 插件，避免加载多余的资源\n    config.plugins.delete('preload');\n}\n```\n\n图片按需加载:  `npm install image-webpack-loader -D `\n`vue.config.js`里面： \n```\nconfig.module.rule('images')\n    .test(/\\.(png|jpe?g|gif|webp)(\\?.*)?$/)\n    .use('image-webpack-loader')\n    .loader('image-webpack-loader')\n    .options({\n      bypassOnDebug: true\n    })\n    .end()\n```\n\n抽离 css 支持按需加载: `npm install mini-css-extract-plugin -D`\n```\nchainWebpack: config => {\n  let miniCssExtractPlugin = new MiniCssExtractPlugin({\n    filename: 'assets/[name].[hash:8].css',\n    chunkFilename: 'assets/[name].[hash:8].css'\n  })\n  config.plugin('extract-css').use(miniCssExtractPlugin)\n}\n```\n\ngzip压缩代码: `npm install compression-webpack-plugin -D`\n\n```\nconst CompressionWebpackPlugin = require('compression-webpack-plugin');\n\n// 开启gzip压缩\n  config.plugins.push(\n    new CompressionWebpackPlugin(\n      {\n        filename: info => {\n          return `${info.path}.gz${info.query}`\n        },\n        algorithm: 'gzip',\n        threshold: 10240, // 只有大小大于该值的资源会被处理 10240\n        test: new RegExp('\\\\.(' + ['js'].join('|') + ')$'\n        ),\n        minRatio: 0.8, // 只有压缩率小于这个值的资源才会被处理\n        deleteOriginalAssets: false // 删除原文件\n      }\n    )\n  )\n\n```\n\n","source":"_posts/优化打包体积.md","raw":"---\ntitle: 优化打包体积\ndate: 2022-01-24 22:50:05\ntags: ['webpack','打包']\n---\n\n最近发现项目打包体积竟然有20M了， 想了想项目确实有几张图片体积很大，还引入了echarts， 但不至于体积这么大吧，于是开始研究webpack打包了。\n<!-- more -->\n首先安装``webpack-bundle-analyzer` 插件， 找出最占用空间的文件有哪些。\n\n`npm install webpack-bundle-analyzer -D`\n\n我是用的`vue-cli4`， 所以在`vue.config.js`里面添加如下：\n```\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\n \n// 展示图形化信息\nchainWebpack: config => {\n  config\n    .plugin('webpack-bundle-analyzer')\n    .use(BundleAnalyzerPlugin)\n}\n```\n\n然后在`package.json`里面添加`\"analyzer\": \"use_analyzer=true npm run serve\"`\n可以看到如下图：\n\n!['打包分析'](https://static01.imgkr.com/temp/8589678b5bcd43cc9107f90eb60f701e.jpg)\n\n可以看到，echarts 可以说是罪魁祸首了，源码加上地图json文件，占用了很大一部分空间。elementUI的文件也很大。\n\n首先是elementUI 的按需加载：\n```\nmodule.exports = {\n  presets: [\n    '@vue/app'\n  ],\n  plugins: [\n    [\n      \"component\",\n      {\n        libraryName: \"element-ui\",\n        styleLibraryName: \"theme-chalk\"\n      }\n    ]\n  ]\n}\n```\n接着优化echarts按需加载：\n`npm install babel-plugin-equire -D`\n\n```const echarts = equire([\n    // 写上你需要的 echarts api\n    \"bar\",\n    \"line\",\n    \"map\"\n  ]);\n\n  export default echarts;\n```\n\n在`vue.config.js`里面添加\n```\nmodule.exports = {\n  presets: [\n    '@vue/app'\n  ],\n  plugins: [\n    [\n      \"component\",\n      {\n        libraryName: \"element-ui\",\n        styleLibraryName: \"theme-chalk\"\n      }\n    ],\n    \"equire\"\n  ]\n}\n```\n页面应用：\n```\n// 直接引用\n import echarts from '@/lib/util/echarts.js' \n \n this.myChart = echarts.init(this.$refs.chart) \n```\n\n删除无用的插件，避免加载多余的资源\n```\nchainWebpack: config => {\n    // 移除prefetch插件，避免加载多余的资源\n    config.plugins.delete('prefetch')\n    / 移除 preload 插件，避免加载多余的资源\n    config.plugins.delete('preload');\n}\n```\n\n图片按需加载:  `npm install image-webpack-loader -D `\n`vue.config.js`里面： \n```\nconfig.module.rule('images')\n    .test(/\\.(png|jpe?g|gif|webp)(\\?.*)?$/)\n    .use('image-webpack-loader')\n    .loader('image-webpack-loader')\n    .options({\n      bypassOnDebug: true\n    })\n    .end()\n```\n\n抽离 css 支持按需加载: `npm install mini-css-extract-plugin -D`\n```\nchainWebpack: config => {\n  let miniCssExtractPlugin = new MiniCssExtractPlugin({\n    filename: 'assets/[name].[hash:8].css',\n    chunkFilename: 'assets/[name].[hash:8].css'\n  })\n  config.plugin('extract-css').use(miniCssExtractPlugin)\n}\n```\n\ngzip压缩代码: `npm install compression-webpack-plugin -D`\n\n```\nconst CompressionWebpackPlugin = require('compression-webpack-plugin');\n\n// 开启gzip压缩\n  config.plugins.push(\n    new CompressionWebpackPlugin(\n      {\n        filename: info => {\n          return `${info.path}.gz${info.query}`\n        },\n        algorithm: 'gzip',\n        threshold: 10240, // 只有大小大于该值的资源会被处理 10240\n        test: new RegExp('\\\\.(' + ['js'].join('|') + ')$'\n        ),\n        minRatio: 0.8, // 只有压缩率小于这个值的资源才会被处理\n        deleteOriginalAssets: false // 删除原文件\n      }\n    )\n  )\n\n```\n\n","slug":"优化打包体积","published":1,"updated":"2025-03-20T03:56:32.443Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp700109cckdxj6aozj","content":"<p>最近发现项目打包体积竟然有20M了， 想了想项目确实有几张图片体积很大，还引入了echarts， 但不至于体积这么大吧，于是开始研究webpack打包了。</p>\n<span id=\"more\"></span>\n<p>首先安装&#96;&#96;webpack-bundle-analyzer&#96; 插件， 找出最占用空间的文件有哪些。</p>\n<p><code>npm install webpack-bundle-analyzer -D</code></p>\n<p>我是用的<code>vue-cli4</code>， 所以在<code>vue.config.js</code>里面添加如下：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">const</span> BundleAnalyzerPlugin = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&quot;webpack-bundle-analyzer&quot;</span>).BundleAnalyzerPlugin;<br> <br><span class=\"hljs-comment\">// 展示图形化信息</span><br>chainWebpack: config =&gt; &#123;<br>  config<br>    .plugin(<span class=\"hljs-string\">&#x27;webpack-bundle-analyzer&#x27;</span>)<br>    .<span class=\"hljs-keyword\">use</span>(BundleAnalyzerPlugin)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后在<code>package.json</code>里面添加<code>&quot;analyzer&quot;: &quot;use_analyzer=true npm run serve&quot;</code><br>可以看到如下图：</p>\n<p><img src=\"https://static01.imgkr.com/temp/8589678b5bcd43cc9107f90eb60f701e.jpg\" alt=\"&#39;打包分析&#39;\"></p>\n<p>可以看到，echarts 可以说是罪魁祸首了，源码加上地图json文件，占用了很大一部分空间。elementUI的文件也很大。</p>\n<p>首先是elementUI 的按需加载：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">m<span class=\"hljs-attr\">odule.exports</span> <span class=\"hljs-operator\">=</span> &#123;<br>  <span class=\"hljs-params\">presets:</span> [<br>    &#x27;@vue<span class=\"hljs-operator\">/</span>app&#x27;<br>  ],<br>  <span class=\"hljs-params\">plugins:</span> [<br>    [<br>      <span class=\"hljs-string\">&quot;component&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-params\">libraryName:</span> <span class=\"hljs-string\">&quot;element-ui&quot;</span>,<br>        <span class=\"hljs-params\">styleLibraryName:</span> <span class=\"hljs-string\">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着优化echarts按需加载：<br><code>npm install babel-plugin-equire -D</code></p>\n<figure class=\"highlight plaintext\"><figcaption><span>echarts </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs const\">  // 写上你需要的 echarts api<br>  &quot;bar&quot;,<br>  &quot;line&quot;,<br>  &quot;map&quot;<br>]);<br><br>export default echarts;<br></code></pre></td></tr></table></figure>\n\n<p>在<code>vue.config.js</code>里面添加</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">m<span class=\"hljs-attr\">odule.exports</span> <span class=\"hljs-operator\">=</span> &#123;<br>  <span class=\"hljs-params\">presets:</span> [<br>    &#x27;@vue<span class=\"hljs-operator\">/</span>app&#x27;<br>  ],<br>  <span class=\"hljs-params\">plugins:</span> [<br>    [<br>      <span class=\"hljs-string\">&quot;component&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-params\">libraryName:</span> <span class=\"hljs-string\">&quot;element-ui&quot;</span>,<br>        <span class=\"hljs-params\">styleLibraryName:</span> <span class=\"hljs-string\">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ],<br>    <span class=\"hljs-string\">&quot;equire&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>页面应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 直接引用</span><br> <span class=\"hljs-keyword\">import</span> echarts from <span class=\"hljs-string\">&#x27;@/lib/util/echarts.js&#x27;</span> <br> <br> <span class=\"hljs-keyword\">this</span>.myChart = echarts.<span class=\"hljs-keyword\">init</span>(<span class=\"hljs-keyword\">this</span>.$refs.chart) <br></code></pre></td></tr></table></figure>\n\n<p>删除无用的插件，避免加载多余的资源</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">chainWebpack: <span class=\"hljs-built_in\">config</span> =&gt; &#123;<br>    // 移除prefetch插件，避免加载多余的资源<br>    <span class=\"hljs-built_in\">config</span>.plugins.delete(<span class=\"hljs-string\">&#x27;prefetch&#x27;</span>)<br>    / 移除 <span class=\"hljs-built_in\">preload</span> 插件，避免加载多余的资源<br>    <span class=\"hljs-built_in\">config</span>.plugins.delete(<span class=\"hljs-string\">&#x27;preload&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>图片按需加载:  <code>npm install image-webpack-loader -D </code><br><code>vue.config.js</code>里面： </p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">config.module.rule(<span class=\"hljs-string\">&#x27;images&#x27;</span>)<br>    .test(/\\.(png|jpe?g|gif|webp)(\\?.*)?<span class=\"hljs-variable\">$/</span>)<br>    .<span class=\"hljs-keyword\">use</span>(<span class=\"hljs-string\">&#x27;image-webpack-loader&#x27;</span>)<br>    .loader(<span class=\"hljs-string\">&#x27;image-webpack-loader&#x27;</span>)<br>    .options(&#123;<br>      <span class=\"hljs-symbol\">bypassOnDebug:</span> <span class=\"hljs-literal\">true</span><br>    &#125;)<br>    .<span class=\"hljs-keyword\">end</span>()<br></code></pre></td></tr></table></figure>\n\n<p>抽离 css 支持按需加载: <code>npm install mini-css-extract-plugin -D</code></p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\">chainWebpack: config =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> miniCssExtractPlugin = new <span class=\"hljs-type\">MiniCssExtractPlugin</span>(&#123;<br>    filename: <span class=\"hljs-symbol\">&#x27;assets</span>/[name].[hash:<span class=\"hljs-number\">8</span>].css&#x27;,<br>    chunkFilename: <span class=\"hljs-symbol\">&#x27;assets</span>/[name].[hash:<span class=\"hljs-number\">8</span>].css&#x27;<br>  &#125;)<br>  config.plugin(<span class=\"hljs-symbol\">&#x27;extract</span>-css&#x27;).use(miniCssExtractPlugin)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gzip压缩代码: <code>npm install compression-webpack-plugin -D</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CompressionWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;compression-webpack-plugin&#x27;</span>);<br><br><span class=\"hljs-comment\">// 开启gzip压缩</span><br>  config.<span class=\"hljs-property\">plugins</span>.<span class=\"hljs-title function_\">push</span>(<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompressionWebpackPlugin</span>(<br>      &#123;<br>        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">info</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;info.path&#125;</span>.gz<span class=\"hljs-subst\">$&#123;info.query&#125;</span>`</span><br>        &#125;,<br>        <span class=\"hljs-attr\">algorithm</span>: <span class=\"hljs-string\">&#x27;gzip&#x27;</span>,<br>        <span class=\"hljs-attr\">threshold</span>: <span class=\"hljs-number\">10240</span>, <span class=\"hljs-comment\">// 只有大小大于该值的资源会被处理 10240</span><br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;\\\\.(&#x27;</span> + [<span class=\"hljs-string\">&#x27;js&#x27;</span>].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;|&#x27;</span>) + <span class=\"hljs-string\">&#x27;)$&#x27;</span><br>        ),<br>        <span class=\"hljs-attr\">minRatio</span>: <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-comment\">// 只有压缩率小于这个值的资源才会被处理</span><br>        <span class=\"hljs-attr\">deleteOriginalAssets</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// 删除原文件</span><br>      &#125;<br>    )<br>  )<br><br></code></pre></td></tr></table></figure>\n\n","excerpt":"<p>最近发现项目打包体积竟然有20M了， 想了想项目确实有几张图片体积很大，还引入了echarts， 但不至于体积这么大吧，于是开始研究webpack打包了。</p>","more":"<p>首先安装&#96;&#96;webpack-bundle-analyzer&#96; 插件， 找出最占用空间的文件有哪些。</p>\n<p><code>npm install webpack-bundle-analyzer -D</code></p>\n<p>我是用的<code>vue-cli4</code>， 所以在<code>vue.config.js</code>里面添加如下：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">const</span> BundleAnalyzerPlugin = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&quot;webpack-bundle-analyzer&quot;</span>).BundleAnalyzerPlugin;<br> <br><span class=\"hljs-comment\">// 展示图形化信息</span><br>chainWebpack: config =&gt; &#123;<br>  config<br>    .plugin(<span class=\"hljs-string\">&#x27;webpack-bundle-analyzer&#x27;</span>)<br>    .<span class=\"hljs-keyword\">use</span>(BundleAnalyzerPlugin)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后在<code>package.json</code>里面添加<code>&quot;analyzer&quot;: &quot;use_analyzer=true npm run serve&quot;</code><br>可以看到如下图：</p>\n<p><img src=\"https://static01.imgkr.com/temp/8589678b5bcd43cc9107f90eb60f701e.jpg\" alt=\"&#39;打包分析&#39;\"></p>\n<p>可以看到，echarts 可以说是罪魁祸首了，源码加上地图json文件，占用了很大一部分空间。elementUI的文件也很大。</p>\n<p>首先是elementUI 的按需加载：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">m<span class=\"hljs-attr\">odule.exports</span> <span class=\"hljs-operator\">=</span> &#123;<br>  <span class=\"hljs-params\">presets:</span> [<br>    &#x27;@vue<span class=\"hljs-operator\">/</span>app&#x27;<br>  ],<br>  <span class=\"hljs-params\">plugins:</span> [<br>    [<br>      <span class=\"hljs-string\">&quot;component&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-params\">libraryName:</span> <span class=\"hljs-string\">&quot;element-ui&quot;</span>,<br>        <span class=\"hljs-params\">styleLibraryName:</span> <span class=\"hljs-string\">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着优化echarts按需加载：<br><code>npm install babel-plugin-equire -D</code></p>\n<figure class=\"highlight plaintext\"><figcaption><span>echarts </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs const\">  // 写上你需要的 echarts api<br>  &quot;bar&quot;,<br>  &quot;line&quot;,<br>  &quot;map&quot;<br>]);<br><br>export default echarts;<br></code></pre></td></tr></table></figure>\n\n<p>在<code>vue.config.js</code>里面添加</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">m<span class=\"hljs-attr\">odule.exports</span> <span class=\"hljs-operator\">=</span> &#123;<br>  <span class=\"hljs-params\">presets:</span> [<br>    &#x27;@vue<span class=\"hljs-operator\">/</span>app&#x27;<br>  ],<br>  <span class=\"hljs-params\">plugins:</span> [<br>    [<br>      <span class=\"hljs-string\">&quot;component&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-params\">libraryName:</span> <span class=\"hljs-string\">&quot;element-ui&quot;</span>,<br>        <span class=\"hljs-params\">styleLibraryName:</span> <span class=\"hljs-string\">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ],<br>    <span class=\"hljs-string\">&quot;equire&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>页面应用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 直接引用</span><br> <span class=\"hljs-keyword\">import</span> echarts from <span class=\"hljs-string\">&#x27;@/lib/util/echarts.js&#x27;</span> <br> <br> <span class=\"hljs-keyword\">this</span>.myChart = echarts.<span class=\"hljs-keyword\">init</span>(<span class=\"hljs-keyword\">this</span>.$refs.chart) <br></code></pre></td></tr></table></figure>\n\n<p>删除无用的插件，避免加载多余的资源</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">chainWebpack: <span class=\"hljs-built_in\">config</span> =&gt; &#123;<br>    // 移除prefetch插件，避免加载多余的资源<br>    <span class=\"hljs-built_in\">config</span>.plugins.delete(<span class=\"hljs-string\">&#x27;prefetch&#x27;</span>)<br>    / 移除 <span class=\"hljs-built_in\">preload</span> 插件，避免加载多余的资源<br>    <span class=\"hljs-built_in\">config</span>.plugins.delete(<span class=\"hljs-string\">&#x27;preload&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>图片按需加载:  <code>npm install image-webpack-loader -D </code><br><code>vue.config.js</code>里面： </p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">config.module.rule(<span class=\"hljs-string\">&#x27;images&#x27;</span>)<br>    .test(/\\.(png|jpe?g|gif|webp)(\\?.*)?<span class=\"hljs-variable\">$/</span>)<br>    .<span class=\"hljs-keyword\">use</span>(<span class=\"hljs-string\">&#x27;image-webpack-loader&#x27;</span>)<br>    .loader(<span class=\"hljs-string\">&#x27;image-webpack-loader&#x27;</span>)<br>    .options(&#123;<br>      <span class=\"hljs-symbol\">bypassOnDebug:</span> <span class=\"hljs-literal\">true</span><br>    &#125;)<br>    .<span class=\"hljs-keyword\">end</span>()<br></code></pre></td></tr></table></figure>\n\n<p>抽离 css 支持按需加载: <code>npm install mini-css-extract-plugin -D</code></p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\">chainWebpack: config =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> miniCssExtractPlugin = new <span class=\"hljs-type\">MiniCssExtractPlugin</span>(&#123;<br>    filename: <span class=\"hljs-symbol\">&#x27;assets</span>/[name].[hash:<span class=\"hljs-number\">8</span>].css&#x27;,<br>    chunkFilename: <span class=\"hljs-symbol\">&#x27;assets</span>/[name].[hash:<span class=\"hljs-number\">8</span>].css&#x27;<br>  &#125;)<br>  config.plugin(<span class=\"hljs-symbol\">&#x27;extract</span>-css&#x27;).use(miniCssExtractPlugin)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gzip压缩代码: <code>npm install compression-webpack-plugin -D</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CompressionWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;compression-webpack-plugin&#x27;</span>);<br><br><span class=\"hljs-comment\">// 开启gzip压缩</span><br>  config.<span class=\"hljs-property\">plugins</span>.<span class=\"hljs-title function_\">push</span>(<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompressionWebpackPlugin</span>(<br>      &#123;<br>        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">info</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;info.path&#125;</span>.gz<span class=\"hljs-subst\">$&#123;info.query&#125;</span>`</span><br>        &#125;,<br>        <span class=\"hljs-attr\">algorithm</span>: <span class=\"hljs-string\">&#x27;gzip&#x27;</span>,<br>        <span class=\"hljs-attr\">threshold</span>: <span class=\"hljs-number\">10240</span>, <span class=\"hljs-comment\">// 只有大小大于该值的资源会被处理 10240</span><br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;\\\\.(&#x27;</span> + [<span class=\"hljs-string\">&#x27;js&#x27;</span>].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;|&#x27;</span>) + <span class=\"hljs-string\">&#x27;)$&#x27;</span><br>        ),<br>        <span class=\"hljs-attr\">minRatio</span>: <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-comment\">// 只有压缩率小于这个值的资源才会被处理</span><br>        <span class=\"hljs-attr\">deleteOriginalAssets</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// 删除原文件</span><br>      &#125;<br>    )<br>  )<br><br></code></pre></td></tr></table></figure>"},{"title":"你不知道的JS之作用域闭包","date":"2022-03-02T07:20:01.000Z","_content":"\n什么是闭包？从表现形式上来说，返回函数的函数就是一个闭包。如下面的代码所示：\n<!-- more -->\n```\nfunction foo() { var a = 2;\n  function bar() { \n    console.log( a );\n  }\n  return bar; \n}\nvar baz = foo();\n\nbaz(); // 2\n```\n\n函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作 一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。\n\n在 foo() 执行后，其返回值(也就是内部的 bar() 函数)赋值给变量 baz 并调用 baz()，实 际上只是通过不同的标识符引用调用了内部的函数 bar()。\n\nbar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。\n\n在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。\n\n而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。\n\n拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一 直存活，以供 bar() 在之后任何时间进行引用。\nbar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n\n因此，在几微秒之后变量 baz 被实际调用(调用内部函数 bar)，不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问变量 a。 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。\n","source":"_posts/你不知道的JS之作用域闭包.md","raw":"---\ntitle: 你不知道的JS之作用域闭包\ndate: 2022-03-02 15:20:01\ntags: ['JS', '闭包']\n---\n\n什么是闭包？从表现形式上来说，返回函数的函数就是一个闭包。如下面的代码所示：\n<!-- more -->\n```\nfunction foo() { var a = 2;\n  function bar() { \n    console.log( a );\n  }\n  return bar; \n}\nvar baz = foo();\n\nbaz(); // 2\n```\n\n函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作 一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。\n\n在 foo() 执行后，其返回值(也就是内部的 bar() 函数)赋值给变量 baz 并调用 baz()，实 际上只是通过不同的标识符引用调用了内部的函数 bar()。\n\nbar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。\n\n在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。\n\n而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。\n\n拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一 直存活，以供 bar() 在之后任何时间进行引用。\nbar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n\n因此，在几微秒之后变量 baz 被实际调用(调用内部函数 bar)，不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问变量 a。 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。\n","slug":"你不知道的JS之作用域闭包","published":1,"updated":"2025-03-20T03:56:32.444Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp700119cck062o6887","content":"<p>什么是闭包？从表现形式上来说，返回函数的函数就是一个闭包。如下面的代码所示：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123; <br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>( a );<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> bar; <br>&#125;<br><span class=\"hljs-keyword\">var</span> baz = foo();<br><br>baz(); <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p>函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作 一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。</p>\n<p>在 foo() 执行后，其返回值(也就是内部的 bar() 函数)赋值给变量 baz 并调用 baz()，实 际上只是通过不同的标识符引用调用了内部的函数 bar()。</p>\n<p>bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。</p>\n<p>在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。</p>\n<p>而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。</p>\n<p>拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一 直存活，以供 bar() 在之后任何时间进行引用。<br>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>\n<p>因此，在几微秒之后变量 baz 被实际调用(调用内部函数 bar)，不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问变量 a。 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p>\n","excerpt":"<p>什么是闭包？从表现形式上来说，返回函数的函数就是一个闭包。如下面的代码所示：</p>","more":"<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123; <br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>( a );<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> bar; <br>&#125;<br><span class=\"hljs-keyword\">var</span> baz = foo();<br><br>baz(); <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<p>函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作 一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。</p>\n<p>在 foo() 执行后，其返回值(也就是内部的 bar() 函数)赋值给变量 baz 并调用 baz()，实 际上只是通过不同的标识符引用调用了内部的函数 bar()。</p>\n<p>bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。</p>\n<p>在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。</p>\n<p>而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。</p>\n<p>拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一 直存活，以供 bar() 在之后任何时间进行引用。<br>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>\n<p>因此，在几微秒之后变量 baz 被实际调用(调用内部函数 bar)，不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问变量 a。 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p>"},{"title":"前端下载 excel","date":"2021-07-02T07:44:37.000Z","_content":"\n前端导出excel:\n\n```\nimport XLSX from 'xlsx'\n\n/**\n * 导出Excel的处理函数--针对table\n * @param {Array} headers: [{key: 'date', title: '日期'}, {key: 'name', title: '名称'}]\n * @param {Array} data   : [{date: '2019-05-31', name: 'megen.huang'}, {date: 'name', name: '小明'}]\n * @param {String} fileName: '导出结果.xlsx'\n * */\nexport default function Export2Excel (headers, data, fileName = '导出结果.xlsx') {\n  const _headers = headers.map((item, i) => Object.assign({}, { key: item.key, title: item.title, position: String.fromCharCode(65 + i) + 1 })).reduce((prev, next) => Object.assign({}, prev, { [next.position]: { key: next.key, v: next.title } }), {})\n\n  const _data = data.map((item, i) => headers.map((key, j) => Object.assign({}, { content: item[key.key], position: String.fromCharCode(65 + j) + (i + 2) })))\n  // 对刚才的结果进行降维处理（二维数组变成一维数组）\n    .reduce((prev, next) => prev.concat(next))\n    // 转换成 worksheet 需要的结构\n    .reduce((prev, next) => Object.assign({}, prev, { [next.position]: { v: next.content } }), {})\n\n  // 合并 headers 和 data\n  const output = Object.assign({}, _headers, _data)\n  // 获取所有单元格的位置\n  const outputPos = Object.keys(output)\n  // 计算出范围 ,[\"A1\",..., \"H2\"]\n  const ref = `${outputPos[0]}:${outputPos[outputPos.length - 1]}`\n  // 构建 workbook 对象\n  const wb = {\n    SheetNames: ['mySheet'],\n    Sheets: {\n      mySheet: Object.assign(\n        {},\n        output,\n        {\n          '!ref': ref,\n          // eslint-disable-next-line\n            '!cols': headers.map(item => ({wpx: 100}))\n        }\n      )\n    }\n  }\n  // 导出 Excel\n  XLSX.writeFile(wb, fileName)\n}\n\n```\n","source":"_posts/前端下载-excel.md","raw":"---\ntitle: 前端下载 excel\ndate: 2021-07-02 15:44:37\ntags: ['JS']\n---\n\n前端导出excel:\n\n```\nimport XLSX from 'xlsx'\n\n/**\n * 导出Excel的处理函数--针对table\n * @param {Array} headers: [{key: 'date', title: '日期'}, {key: 'name', title: '名称'}]\n * @param {Array} data   : [{date: '2019-05-31', name: 'megen.huang'}, {date: 'name', name: '小明'}]\n * @param {String} fileName: '导出结果.xlsx'\n * */\nexport default function Export2Excel (headers, data, fileName = '导出结果.xlsx') {\n  const _headers = headers.map((item, i) => Object.assign({}, { key: item.key, title: item.title, position: String.fromCharCode(65 + i) + 1 })).reduce((prev, next) => Object.assign({}, prev, { [next.position]: { key: next.key, v: next.title } }), {})\n\n  const _data = data.map((item, i) => headers.map((key, j) => Object.assign({}, { content: item[key.key], position: String.fromCharCode(65 + j) + (i + 2) })))\n  // 对刚才的结果进行降维处理（二维数组变成一维数组）\n    .reduce((prev, next) => prev.concat(next))\n    // 转换成 worksheet 需要的结构\n    .reduce((prev, next) => Object.assign({}, prev, { [next.position]: { v: next.content } }), {})\n\n  // 合并 headers 和 data\n  const output = Object.assign({}, _headers, _data)\n  // 获取所有单元格的位置\n  const outputPos = Object.keys(output)\n  // 计算出范围 ,[\"A1\",..., \"H2\"]\n  const ref = `${outputPos[0]}:${outputPos[outputPos.length - 1]}`\n  // 构建 workbook 对象\n  const wb = {\n    SheetNames: ['mySheet'],\n    Sheets: {\n      mySheet: Object.assign(\n        {},\n        output,\n        {\n          '!ref': ref,\n          // eslint-disable-next-line\n            '!cols': headers.map(item => ({wpx: 100}))\n        }\n      )\n    }\n  }\n  // 导出 Excel\n  XLSX.writeFile(wb, fileName)\n}\n\n```\n","slug":"前端下载-excel","published":1,"updated":"2025-03-20T03:56:32.444Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp800139cck3zlqcviy","content":"<p>前端导出excel:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">XLSX</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xlsx&#x27;</span><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 导出Excel的处理函数--针对table</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">Array</span>&#125; headers: [&#123;key: &#x27;date&#x27;, title: &#x27;日期&#x27;&#125;, &#123;key: &#x27;name&#x27;, title: &#x27;名称&#x27;&#125;]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">Array</span>&#125; data   : [&#123;date: &#x27;2019-05-31&#x27;, name: &#x27;megen.huang&#x27;&#125;, &#123;date: &#x27;name&#x27;, name: &#x27;小明&#x27;&#125;]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">String</span>&#125; fileName: &#x27;导出结果.xlsx&#x27;</span><br><span class=\"hljs-comment\"> * */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Export2Excel</span> (<span class=\"hljs-params\">headers, data, fileName = <span class=\"hljs-string\">&#x27;导出结果.xlsx&#x27;</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> _headers = headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, &#123; <span class=\"hljs-attr\">key</span>: item.<span class=\"hljs-property\">key</span>, <span class=\"hljs-attr\">title</span>: item.<span class=\"hljs-property\">title</span>, <span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">65</span> + i) + <span class=\"hljs-number\">1</span> &#125;)).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, prev, &#123; [next.<span class=\"hljs-property\">position</span>]: &#123; <span class=\"hljs-attr\">key</span>: next.<span class=\"hljs-property\">key</span>, <span class=\"hljs-attr\">v</span>: next.<span class=\"hljs-property\">title</span> &#125; &#125;), &#123;&#125;)<br><br>  <span class=\"hljs-keyword\">const</span> _data = data.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, j</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, &#123; <span class=\"hljs-attr\">content</span>: item[key.<span class=\"hljs-property\">key</span>], <span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">65</span> + j) + (i + <span class=\"hljs-number\">2</span>) &#125;)))<br>  <span class=\"hljs-comment\">// 对刚才的结果进行降维处理（二维数组变成一维数组）</span><br>    .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> prev.<span class=\"hljs-title function_\">concat</span>(next))<br>    <span class=\"hljs-comment\">// 转换成 worksheet 需要的结构</span><br>    .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, prev, &#123; [next.<span class=\"hljs-property\">position</span>]: &#123; <span class=\"hljs-attr\">v</span>: next.<span class=\"hljs-property\">content</span> &#125; &#125;), &#123;&#125;)<br><br>  <span class=\"hljs-comment\">// 合并 headers 和 data</span><br>  <span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, _headers, _data)<br>  <span class=\"hljs-comment\">// 获取所有单元格的位置</span><br>  <span class=\"hljs-keyword\">const</span> outputPos = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(output)<br>  <span class=\"hljs-comment\">// 计算出范围 ,[&quot;A1&quot;,..., &quot;H2&quot;]</span><br>  <span class=\"hljs-keyword\">const</span> ref = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;outputPos[<span class=\"hljs-number\">0</span>]&#125;</span>:<span class=\"hljs-subst\">$&#123;outputPos[outputPos.length - <span class=\"hljs-number\">1</span>]&#125;</span>`</span><br>  <span class=\"hljs-comment\">// 构建 workbook 对象</span><br>  <span class=\"hljs-keyword\">const</span> wb = &#123;<br>    <span class=\"hljs-title class_\">SheetNames</span>: [<span class=\"hljs-string\">&#x27;mySheet&#x27;</span>],<br>    <span class=\"hljs-title class_\">Sheets</span>: &#123;<br>      <span class=\"hljs-attr\">mySheet</span>: <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(<br>        &#123;&#125;,<br>        output,<br>        &#123;<br>          <span class=\"hljs-string\">&#x27;!ref&#x27;</span>: ref,<br>          <span class=\"hljs-comment\">// eslint-disable-next-line</span><br>            <span class=\"hljs-string\">&#x27;!cols&#x27;</span>: headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> (&#123;<span class=\"hljs-attr\">wpx</span>: <span class=\"hljs-number\">100</span>&#125;))<br>        &#125;<br>      )<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 导出 Excel</span><br>  <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">writeFile</span>(wb, fileName)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>前端导出excel:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">XLSX</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xlsx&#x27;</span><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 导出Excel的处理函数--针对table</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">Array</span>&#125; headers: [&#123;key: &#x27;date&#x27;, title: &#x27;日期&#x27;&#125;, &#123;key: &#x27;name&#x27;, title: &#x27;名称&#x27;&#125;]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">Array</span>&#125; data   : [&#123;date: &#x27;2019-05-31&#x27;, name: &#x27;megen.huang&#x27;&#125;, &#123;date: &#x27;name&#x27;, name: &#x27;小明&#x27;&#125;]</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &#123;<span class=\"hljs-type\">String</span>&#125; fileName: &#x27;导出结果.xlsx&#x27;</span><br><span class=\"hljs-comment\"> * */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Export2Excel</span> (<span class=\"hljs-params\">headers, data, fileName = <span class=\"hljs-string\">&#x27;导出结果.xlsx&#x27;</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> _headers = headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, &#123; <span class=\"hljs-attr\">key</span>: item.<span class=\"hljs-property\">key</span>, <span class=\"hljs-attr\">title</span>: item.<span class=\"hljs-property\">title</span>, <span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">65</span> + i) + <span class=\"hljs-number\">1</span> &#125;)).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, prev, &#123; [next.<span class=\"hljs-property\">position</span>]: &#123; <span class=\"hljs-attr\">key</span>: next.<span class=\"hljs-property\">key</span>, <span class=\"hljs-attr\">v</span>: next.<span class=\"hljs-property\">title</span> &#125; &#125;), &#123;&#125;)<br><br>  <span class=\"hljs-keyword\">const</span> _data = data.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, j</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, &#123; <span class=\"hljs-attr\">content</span>: item[key.<span class=\"hljs-property\">key</span>], <span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">65</span> + j) + (i + <span class=\"hljs-number\">2</span>) &#125;)))<br>  <span class=\"hljs-comment\">// 对刚才的结果进行降维处理（二维数组变成一维数组）</span><br>    .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> prev.<span class=\"hljs-title function_\">concat</span>(next))<br>    <span class=\"hljs-comment\">// 转换成 worksheet 需要的结构</span><br>    .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, next</span>) =&gt;</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, prev, &#123; [next.<span class=\"hljs-property\">position</span>]: &#123; <span class=\"hljs-attr\">v</span>: next.<span class=\"hljs-property\">content</span> &#125; &#125;), &#123;&#125;)<br><br>  <span class=\"hljs-comment\">// 合并 headers 和 data</span><br>  <span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, _headers, _data)<br>  <span class=\"hljs-comment\">// 获取所有单元格的位置</span><br>  <span class=\"hljs-keyword\">const</span> outputPos = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(output)<br>  <span class=\"hljs-comment\">// 计算出范围 ,[&quot;A1&quot;,..., &quot;H2&quot;]</span><br>  <span class=\"hljs-keyword\">const</span> ref = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;outputPos[<span class=\"hljs-number\">0</span>]&#125;</span>:<span class=\"hljs-subst\">$&#123;outputPos[outputPos.length - <span class=\"hljs-number\">1</span>]&#125;</span>`</span><br>  <span class=\"hljs-comment\">// 构建 workbook 对象</span><br>  <span class=\"hljs-keyword\">const</span> wb = &#123;<br>    <span class=\"hljs-title class_\">SheetNames</span>: [<span class=\"hljs-string\">&#x27;mySheet&#x27;</span>],<br>    <span class=\"hljs-title class_\">Sheets</span>: &#123;<br>      <span class=\"hljs-attr\">mySheet</span>: <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(<br>        &#123;&#125;,<br>        output,<br>        &#123;<br>          <span class=\"hljs-string\">&#x27;!ref&#x27;</span>: ref,<br>          <span class=\"hljs-comment\">// eslint-disable-next-line</span><br>            <span class=\"hljs-string\">&#x27;!cols&#x27;</span>: headers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> (&#123;<span class=\"hljs-attr\">wpx</span>: <span class=\"hljs-number\">100</span>&#125;))<br>        &#125;<br>      )<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 导出 Excel</span><br>  <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">writeFile</span>(wb, fileName)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"前端面试","date":"2025-03-20T02:54:55.000Z","index_img":"https://fluid.s3.bitiful.net/fluid-vscode-plugin/cover.png?w=480&fmt=webp","_content":"\n前端面试题\n<!-- more -->\n\n#### 1. vue2、vue3的双向绑定原理\n\n\n\n#### 2. 讲一下什么是闭包\n\n#### 3.vue的自定义指令\n\n#### 4. 讲一下promise\n\n#### 5. 手写一个sleep函数\n\n#### 6. 项目的难点\n\n#### 7. vue2 vue3的diff算法\n\n#### 8. vue3 升级了哪些\n\n#### 9. 怎么从0到1搭建项目\n\n#### 10. webpack的构建流程\n\n#### 11. 手写webpack插件\n\n","source":"_posts/前端面试.md","raw":"---\ntitle: 前端面试\ndate: 2025-03-20 10:54:55\ntags: ['面试']\nindex_img: https://fluid.s3.bitiful.net/fluid-vscode-plugin/cover.png?w=480&fmt=webp\n---\n\n前端面试题\n<!-- more -->\n\n#### 1. vue2、vue3的双向绑定原理\n\n\n\n#### 2. 讲一下什么是闭包\n\n#### 3.vue的自定义指令\n\n#### 4. 讲一下promise\n\n#### 5. 手写一个sleep函数\n\n#### 6. 项目的难点\n\n#### 7. vue2 vue3的diff算法\n\n#### 8. vue3 升级了哪些\n\n#### 9. 怎么从0到1搭建项目\n\n#### 10. webpack的构建流程\n\n#### 11. 手写webpack插件\n\n","slug":"前端面试","published":1,"updated":"2025-03-20T04:23:23.970Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp800149cck173w6u6e","content":"<p>前端面试题</p>\n<span id=\"more\"></span>\n\n<h4 id=\"1-vue2、vue3的双向绑定原理\"><a href=\"#1-vue2、vue3的双向绑定原理\" class=\"headerlink\" title=\"1. vue2、vue3的双向绑定原理\"></a>1. vue2、vue3的双向绑定原理</h4><h4 id=\"2-讲一下什么是闭包\"><a href=\"#2-讲一下什么是闭包\" class=\"headerlink\" title=\"2. 讲一下什么是闭包\"></a>2. 讲一下什么是闭包</h4><h4 id=\"3-vue的自定义指令\"><a href=\"#3-vue的自定义指令\" class=\"headerlink\" title=\"3.vue的自定义指令\"></a>3.vue的自定义指令</h4><h4 id=\"4-讲一下promise\"><a href=\"#4-讲一下promise\" class=\"headerlink\" title=\"4. 讲一下promise\"></a>4. 讲一下promise</h4><h4 id=\"5-手写一个sleep函数\"><a href=\"#5-手写一个sleep函数\" class=\"headerlink\" title=\"5. 手写一个sleep函数\"></a>5. 手写一个sleep函数</h4><h4 id=\"6-项目的难点\"><a href=\"#6-项目的难点\" class=\"headerlink\" title=\"6. 项目的难点\"></a>6. 项目的难点</h4><h4 id=\"7-vue2-vue3的diff算法\"><a href=\"#7-vue2-vue3的diff算法\" class=\"headerlink\" title=\"7. vue2 vue3的diff算法\"></a>7. vue2 vue3的diff算法</h4><h4 id=\"8-vue3-升级了哪些\"><a href=\"#8-vue3-升级了哪些\" class=\"headerlink\" title=\"8. vue3 升级了哪些\"></a>8. vue3 升级了哪些</h4><h4 id=\"9-怎么从0到1搭建项目\"><a href=\"#9-怎么从0到1搭建项目\" class=\"headerlink\" title=\"9. 怎么从0到1搭建项目\"></a>9. 怎么从0到1搭建项目</h4><h4 id=\"10-webpack的构建流程\"><a href=\"#10-webpack的构建流程\" class=\"headerlink\" title=\"10. webpack的构建流程\"></a>10. webpack的构建流程</h4><h4 id=\"11-手写webpack插件\"><a href=\"#11-手写webpack插件\" class=\"headerlink\" title=\"11. 手写webpack插件\"></a>11. 手写webpack插件</h4>","excerpt":"<p>前端面试题</p>","more":"<h4 id=\"1-vue2、vue3的双向绑定原理\"><a href=\"#1-vue2、vue3的双向绑定原理\" class=\"headerlink\" title=\"1. vue2、vue3的双向绑定原理\"></a>1. vue2、vue3的双向绑定原理</h4><h4 id=\"2-讲一下什么是闭包\"><a href=\"#2-讲一下什么是闭包\" class=\"headerlink\" title=\"2. 讲一下什么是闭包\"></a>2. 讲一下什么是闭包</h4><h4 id=\"3-vue的自定义指令\"><a href=\"#3-vue的自定义指令\" class=\"headerlink\" title=\"3.vue的自定义指令\"></a>3.vue的自定义指令</h4><h4 id=\"4-讲一下promise\"><a href=\"#4-讲一下promise\" class=\"headerlink\" title=\"4. 讲一下promise\"></a>4. 讲一下promise</h4><h4 id=\"5-手写一个sleep函数\"><a href=\"#5-手写一个sleep函数\" class=\"headerlink\" title=\"5. 手写一个sleep函数\"></a>5. 手写一个sleep函数</h4><h4 id=\"6-项目的难点\"><a href=\"#6-项目的难点\" class=\"headerlink\" title=\"6. 项目的难点\"></a>6. 项目的难点</h4><h4 id=\"7-vue2-vue3的diff算法\"><a href=\"#7-vue2-vue3的diff算法\" class=\"headerlink\" title=\"7. vue2 vue3的diff算法\"></a>7. vue2 vue3的diff算法</h4><h4 id=\"8-vue3-升级了哪些\"><a href=\"#8-vue3-升级了哪些\" class=\"headerlink\" title=\"8. vue3 升级了哪些\"></a>8. vue3 升级了哪些</h4><h4 id=\"9-怎么从0到1搭建项目\"><a href=\"#9-怎么从0到1搭建项目\" class=\"headerlink\" title=\"9. 怎么从0到1搭建项目\"></a>9. 怎么从0到1搭建项目</h4><h4 id=\"10-webpack的构建流程\"><a href=\"#10-webpack的构建流程\" class=\"headerlink\" title=\"10. webpack的构建流程\"></a>10. webpack的构建流程</h4><h4 id=\"11-手写webpack插件\"><a href=\"#11-手写webpack插件\" class=\"headerlink\" title=\"11. 手写webpack插件\"></a>11. 手写webpack插件</h4>"},{"title":"加油!","date":"2022-02-11T16:02:15.000Z","_content":"\n\n最近面试不太顺利，再一次感叹平时真的没有好好准备，遇到好的工作机会最后只能感叹，机会是留给有准备的人的。\n不过，不要气馁，加油吧！好好总结，接着干！！！\n\n很久没有写日记了，感觉可以经常写写，记录平时的一些感想，多年后再看应该很有趣吧😁\n","source":"_posts/加油.md","raw":"---\ntitle: 加油!\ndate: 2022-02-12 00:02:15\ntags:\n---\n\n\n最近面试不太顺利，再一次感叹平时真的没有好好准备，遇到好的工作机会最后只能感叹，机会是留给有准备的人的。\n不过，不要气馁，加油吧！好好总结，接着干！！！\n\n很久没有写日记了，感觉可以经常写写，记录平时的一些感想，多年后再看应该很有趣吧😁\n","slug":"加油","published":1,"updated":"2025-03-20T03:56:32.445Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mp900179cck1k1h7gkg","content":"<p>最近面试不太顺利，再一次感叹平时真的没有好好准备，遇到好的工作机会最后只能感叹，机会是留给有准备的人的。<br>不过，不要气馁，加油吧！好好总结，接着干！！！</p>\n<p>很久没有写日记了，感觉可以经常写写，记录平时的一些感想，多年后再看应该很有趣吧😁</p>\n","excerpt":"","more":"<p>最近面试不太顺利，再一次感叹平时真的没有好好准备，遇到好的工作机会最后只能感叹，机会是留给有准备的人的。<br>不过，不要气馁，加油吧！好好总结，接着干！！！</p>\n<p>很久没有写日记了，感觉可以经常写写，记录平时的一些感想，多年后再看应该很有趣吧😁</p>\n"},{"title":"多条件判断的另一种写法","date":"2020-02-23T13:51:13.000Z","_content":"\n在写业务逻辑到时候，我们经常会碰到写很多if, 少数还好，多个的话可能会用switch, 随着业务逻辑越来越复杂，代码可能越来越臃肿，这个时候我们需要另一种写法简化代码。\n<!-- more -->\n\n### ES6 Map\n从阮一峰老师的基础教程里可以知道 Map 的大致用法： \n\nMap 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。\n\n```\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。\n\n上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。\n\n```\nconst map = new Map([\n  ['name', '张三'],\n  ['title', 'Author']\n]);\n\nmap.size // 2\nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"Author\"\n```\n利用以上这一点，我们就可以重构多个 if 。\n\n```\n    //将判断条件作为对象的属性名，将处理逻辑作为对象的属性值\n    var Statistics = function(){\n      console.log('执行')\n    }\n    const comparativeTotles = new Map([\n        [0,Statistics],\n        [1,Statistics],\n        [2,Statistics],\n        [3,Statistics]\n     ])\n    let map = function(val){\n          return comparativeTotles.get(val)\n    } \n    let getMap  = map(1); //如果查找不到返回undefined\n    if(!getMap){\n          console.log('查找不到')\n    }else{\n        concaozuole.log('执行操作')\n          getMap()\n    }\n\n```","source":"_posts/多条件判断的另一种写法.md","raw":"---\ntitle: 多条件判断的另一种写法\ndate: 2020-02-23 21:51:13\ntags: JS\n---\n\n在写业务逻辑到时候，我们经常会碰到写很多if, 少数还好，多个的话可能会用switch, 随着业务逻辑越来越复杂，代码可能越来越臃肿，这个时候我们需要另一种写法简化代码。\n<!-- more -->\n\n### ES6 Map\n从阮一峰老师的基础教程里可以知道 Map 的大致用法： \n\nMap 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。\n\n```\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。\n\n上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。\n\n```\nconst map = new Map([\n  ['name', '张三'],\n  ['title', 'Author']\n]);\n\nmap.size // 2\nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"Author\"\n```\n利用以上这一点，我们就可以重构多个 if 。\n\n```\n    //将判断条件作为对象的属性名，将处理逻辑作为对象的属性值\n    var Statistics = function(){\n      console.log('执行')\n    }\n    const comparativeTotles = new Map([\n        [0,Statistics],\n        [1,Statistics],\n        [2,Statistics],\n        [3,Statistics]\n     ])\n    let map = function(val){\n          return comparativeTotles.get(val)\n    } \n    let getMap  = map(1); //如果查找不到返回undefined\n    if(!getMap){\n          console.log('查找不到')\n    }else{\n        concaozuole.log('执行操作')\n          getMap()\n    }\n\n```","slug":"多条件判断的另一种写法","published":1,"updated":"2025-03-20T03:56:32.445Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpa00199cck5zx72hu0","content":"<p>在写业务逻辑到时候，我们经常会碰到写很多if, 少数还好，多个的话可能会用switch, 随着业务逻辑越来越复杂，代码可能越来越臃肿，这个时候我们需要另一种写法简化代码。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"ES6-Map\"><a href=\"#ES6-Map\" class=\"headerlink\" title=\"ES6 Map\"></a>ES6 Map</h3><p>从阮一峰老师的基础教程里可以知道 Map 的大致用法： </p>\n<p>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br><span class=\"hljs-keyword\">const</span> o = &#123;p: <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>&#125;;<br><br>m.<span class=\"hljs-keyword\">set</span>(o, <span class=\"hljs-string\">&#x27;content&#x27;</span>)<br>m.<span class=\"hljs-keyword\">get</span>(o) <span class=\"hljs-comment\">// &quot;content&quot;</span><br><br>m.has(o) <span class=\"hljs-comment\">// true</span><br>m.delete(o) <span class=\"hljs-comment\">// true</span><br>m.has(o) <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n<p>上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。</p>\n<p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">const <span class=\"hljs-built_in\">map</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>  [<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;张三&#x27;</span>],<br>  [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;Author&#x27;</span>]<br>]);<br><br><span class=\"hljs-built_in\">map</span>.size <span class=\"hljs-comment\">// 2</span><br><span class=\"hljs-built_in\">map</span>.has(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">map</span>.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// &quot;张三&quot;</span><br><span class=\"hljs-built_in\">map</span>.has(<span class=\"hljs-string\">&#x27;title&#x27;</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">map</span>.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>) <span class=\"hljs-comment\">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure>\n<p>利用以上这一点，我们就可以重构多个 if 。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//将判断条件作为对象的属性名，将处理逻辑作为对象的属性值</span><br><span class=\"hljs-keyword\">var</span> Statistics = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;执行&#x27;</span>)<br>&#125;<br>const comparativeTotles = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>    [<span class=\"hljs-number\">0</span>,Statistics],<br>    [<span class=\"hljs-number\">1</span>,Statistics],<br>    [<span class=\"hljs-number\">2</span>,Statistics],<br>    [<span class=\"hljs-number\">3</span>,Statistics]<br> ])<br>let <span class=\"hljs-built_in\">map</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> comparativeTotles.get(val)<br>&#125; <br>let getMap  = <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//如果查找不到返回undefined</span><br><span class=\"hljs-keyword\">if</span>(!getMap)&#123;<br>      <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;查找不到&#x27;</span>)<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    concaozuole.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;执行操作&#x27;</span>)<br>      getMap()<br>&#125;<br><br></code></pre></td></tr></table></figure>","excerpt":"<p>在写业务逻辑到时候，我们经常会碰到写很多if, 少数还好，多个的话可能会用switch, 随着业务逻辑越来越复杂，代码可能越来越臃肿，这个时候我们需要另一种写法简化代码。</p>","more":"<h3 id=\"ES6-Map\"><a href=\"#ES6-Map\" class=\"headerlink\" title=\"ES6 Map\"></a>ES6 Map</h3><p>从阮一峰老师的基础教程里可以知道 Map 的大致用法： </p>\n<p>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br><span class=\"hljs-keyword\">const</span> o = &#123;p: <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>&#125;;<br><br>m.<span class=\"hljs-keyword\">set</span>(o, <span class=\"hljs-string\">&#x27;content&#x27;</span>)<br>m.<span class=\"hljs-keyword\">get</span>(o) <span class=\"hljs-comment\">// &quot;content&quot;</span><br><br>m.has(o) <span class=\"hljs-comment\">// true</span><br>m.delete(o) <span class=\"hljs-comment\">// true</span><br>m.has(o) <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n<p>上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。</p>\n<p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">const <span class=\"hljs-built_in\">map</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>  [<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;张三&#x27;</span>],<br>  [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;Author&#x27;</span>]<br>]);<br><br><span class=\"hljs-built_in\">map</span>.size <span class=\"hljs-comment\">// 2</span><br><span class=\"hljs-built_in\">map</span>.has(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">map</span>.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>) <span class=\"hljs-comment\">// &quot;张三&quot;</span><br><span class=\"hljs-built_in\">map</span>.has(<span class=\"hljs-string\">&#x27;title&#x27;</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">map</span>.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>) <span class=\"hljs-comment\">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure>\n<p>利用以上这一点，我们就可以重构多个 if 。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//将判断条件作为对象的属性名，将处理逻辑作为对象的属性值</span><br><span class=\"hljs-keyword\">var</span> Statistics = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;执行&#x27;</span>)<br>&#125;<br>const comparativeTotles = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>    [<span class=\"hljs-number\">0</span>,Statistics],<br>    [<span class=\"hljs-number\">1</span>,Statistics],<br>    [<span class=\"hljs-number\">2</span>,Statistics],<br>    [<span class=\"hljs-number\">3</span>,Statistics]<br> ])<br>let <span class=\"hljs-built_in\">map</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> comparativeTotles.get(val)<br>&#125; <br>let getMap  = <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//如果查找不到返回undefined</span><br><span class=\"hljs-keyword\">if</span>(!getMap)&#123;<br>      <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;查找不到&#x27;</span>)<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    concaozuole.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;执行操作&#x27;</span>)<br>      getMap()<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"手写instanceof","date":"2022-03-14T17:04:21.000Z","_content":"\n其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。\n\n<!-- more -->\n\n```\nfunction new_instance_of(leftVaule, rightVaule) { \n    let rightProto = rightVaule.prototype; // 取右表达式的 prototype 值\n    leftVaule = leftVaule.__proto__; // 取左表达式的__proto__值\n    while (true) {\n        if (leftVaule === null) {\n            return false;    \n        }\n        if (leftVaule === rightProto) {\n            return true;    \n        } \n        leftVaule = leftVaule.__proto__ \n    }\n}\n```\n","source":"_posts/手写instanceof.md","raw":"---\ntitle: 手写instanceof\ndate: 2022-03-15 01:04:21\ntags: ['JS']\n---\n\n其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。\n\n<!-- more -->\n\n```\nfunction new_instance_of(leftVaule, rightVaule) { \n    let rightProto = rightVaule.prototype; // 取右表达式的 prototype 值\n    leftVaule = leftVaule.__proto__; // 取左表达式的__proto__值\n    while (true) {\n        if (leftVaule === null) {\n            return false;    \n        }\n        if (leftVaule === rightProto) {\n            return true;    \n        } \n        leftVaule = leftVaule.__proto__ \n    }\n}\n```\n","slug":"手写instanceof","published":1,"updated":"2025-03-20T03:56:32.446Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpa001b9cckgvpdfthl","content":"<p>其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">new_instance_of</span>(<span class=\"hljs-params\">leftVaule, rightVaule</span>) &#123; <br>    <span class=\"hljs-keyword\">let</span> rightProto = rightVaule.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>; <span class=\"hljs-comment\">// 取右表达式的 prototype 值</span><br>    leftVaule = leftVaule.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// 取左表达式的__proto__值</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (leftVaule === <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;    <br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (leftVaule === rightProto) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;    <br>        &#125; <br>        leftVaule = leftVaule.<span class=\"hljs-property\">__proto__</span> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","excerpt":"<p>其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">new_instance_of</span>(<span class=\"hljs-params\">leftVaule, rightVaule</span>) &#123; <br>    <span class=\"hljs-keyword\">let</span> rightProto = rightVaule.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>; <span class=\"hljs-comment\">// 取右表达式的 prototype 值</span><br>    leftVaule = leftVaule.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// 取左表达式的__proto__值</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (leftVaule === <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;    <br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (leftVaule === rightProto) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;    <br>        &#125; <br>        leftVaule = leftVaule.<span class=\"hljs-property\">__proto__</span> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"数组与树互转","date":"2022-03-08T13:59:36.000Z","_content":"\n数组与树结构互相转变，平时也用的比较多，主要是用递归实现\n\n<!-- more -->\n\n### 数组转树\n\n```\nconst arr = [\n  {\n    id: 1,\n    pid: null,\n    name: '研发部'\n  },\n  {\n    id: 2,\n    pid: null,\n    name: '管理部'\n  },\n  {\n    id: 3,\n    pid: 2,\n    name: '行政管理部'\n  },\n  {\n    id: 4,\n    pid: 2,\n    name: '财务管理部'\n  },\n  {\n    id: 5,\n    pid: 1,\n    name: '前端研发部'\n  },\n   {\n    id: 6,\n    pid: 1,\n    name: '后端研发部'\n  },\n  {\n    id: 7,\n    pid: 2,\n    name: '人力资源管理部'\n  },\n  {\n    id: 8,\n    pid: null,\n    name: '设备管理部'\n  }\n]\n\n\nconst arrayToTree = (array, pid=null) => {\n  return array.reduce((prev, cur) => {\n    if(cur.pid === pid) {\n      const children = arrayToTree(array, cur.id)\n      if (children.length){\n        cur.children = children\n      } \n      prev.push(cur)\n    }\n    return prev\n  }, [])\n}\n\narrayToTree(arr)\n```\n\n### 树转数组\n\n```\nconst arr = [\n  {\n    id: 1,\n    pid: null,\n    name: '研发部',\n    children: [\n      {\n        id: 5,\n        pid: 1,\n        name: '前端研发部'\n      },\n      {\n        id: 6,\n        pid: 1,\n        name: '后端研发部'\n      }\n    ]\n  },\n  {\n    id: 2,\n    pid: null,\n    name: '管理部',\n    children: [\n      {\n        id: 3,\n        pid: 2,\n        name: '行政管理部'\n      },\n      {\n        id: 4,\n        pid: 2,\n        name: '财务管理部'\n      },\n      \n      {\n        id: 7,\n        pid: 2,\n        name: '人力资源管理部'\n      }\n    ]\n  },\n  {\n    id: 8,\n    pid: null,\n    name: '设备管理部'\n  }\n]\n\n\nconst treeToArray = (array) => {\n  return array.reduce((prev, cur) => {\n    if(!cur.children){\n      prev.push(cur)\n    }else{\n      const arrList = treeToArray(cur.children)\n      delete cur.children\n      prev.push(cur, ...arrList)\n    }\n    return prev\n  }, [])\n}\n\ntreeToArray(arr)\n\n```\n","source":"_posts/数组与树互转.md","raw":"---\ntitle: 数组与树互转\ndate: 2022-03-08 21:59:36\ntags: ['JS']\n---\n\n数组与树结构互相转变，平时也用的比较多，主要是用递归实现\n\n<!-- more -->\n\n### 数组转树\n\n```\nconst arr = [\n  {\n    id: 1,\n    pid: null,\n    name: '研发部'\n  },\n  {\n    id: 2,\n    pid: null,\n    name: '管理部'\n  },\n  {\n    id: 3,\n    pid: 2,\n    name: '行政管理部'\n  },\n  {\n    id: 4,\n    pid: 2,\n    name: '财务管理部'\n  },\n  {\n    id: 5,\n    pid: 1,\n    name: '前端研发部'\n  },\n   {\n    id: 6,\n    pid: 1,\n    name: '后端研发部'\n  },\n  {\n    id: 7,\n    pid: 2,\n    name: '人力资源管理部'\n  },\n  {\n    id: 8,\n    pid: null,\n    name: '设备管理部'\n  }\n]\n\n\nconst arrayToTree = (array, pid=null) => {\n  return array.reduce((prev, cur) => {\n    if(cur.pid === pid) {\n      const children = arrayToTree(array, cur.id)\n      if (children.length){\n        cur.children = children\n      } \n      prev.push(cur)\n    }\n    return prev\n  }, [])\n}\n\narrayToTree(arr)\n```\n\n### 树转数组\n\n```\nconst arr = [\n  {\n    id: 1,\n    pid: null,\n    name: '研发部',\n    children: [\n      {\n        id: 5,\n        pid: 1,\n        name: '前端研发部'\n      },\n      {\n        id: 6,\n        pid: 1,\n        name: '后端研发部'\n      }\n    ]\n  },\n  {\n    id: 2,\n    pid: null,\n    name: '管理部',\n    children: [\n      {\n        id: 3,\n        pid: 2,\n        name: '行政管理部'\n      },\n      {\n        id: 4,\n        pid: 2,\n        name: '财务管理部'\n      },\n      \n      {\n        id: 7,\n        pid: 2,\n        name: '人力资源管理部'\n      }\n    ]\n  },\n  {\n    id: 8,\n    pid: null,\n    name: '设备管理部'\n  }\n]\n\n\nconst treeToArray = (array) => {\n  return array.reduce((prev, cur) => {\n    if(!cur.children){\n      prev.push(cur)\n    }else{\n      const arrList = treeToArray(cur.children)\n      delete cur.children\n      prev.push(cur, ...arrList)\n    }\n    return prev\n  }, [])\n}\n\ntreeToArray(arr)\n\n```\n","slug":"数组与树互转","published":1,"updated":"2025-03-20T03:56:32.446Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpb001e9cck5863g1a6","content":"<p>数组与树结构互相转变，平时也用的比较多，主要是用递归实现</p>\n<span id=\"more\"></span>\n\n<h3 id=\"数组转树\"><a href=\"#数组转树\" class=\"headerlink\" title=\"数组转树\"></a>数组转树</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">const</span> arr = [<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;研发部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;行政管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 4,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;财务管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 5,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;前端研发部&#x27;</span><br>  &#125;,<br>   &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 6,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;后端研发部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 7,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;人力资源管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 8,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;设备管理部&#x27;</span><br>  &#125;<br>]<br><br><br><span class=\"hljs-keyword\">const</span> arrayToTree = (array, pid=<span class=\"hljs-literal\">null</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> array.reduce((prev, cur) =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span>(cur.pid === pid) &#123;<br>      <span class=\"hljs-keyword\">const</span> children = arrayToTree(array, cur.id)<br>      <span class=\"hljs-keyword\">if</span> (children.length)&#123;<br>        cur.children = children<br>      &#125; <br>      prev.push(cur)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> prev<br>  &#125;, [])<br>&#125;<br><br>arrayToTree(arr)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"树转数组\"><a href=\"#树转数组\" class=\"headerlink\" title=\"树转数组\"></a>树转数组</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">const</span> arr = [<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;研发部&#x27;</span>,<br>    <span class=\"hljs-attribute\">children</span>: [<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 5,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;前端研发部&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 6,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;后端研发部&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;管理部&#x27;</span>,<br>    <span class=\"hljs-attribute\">children</span>: [<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;行政管理部&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 4,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;财务管理部&#x27;</span><br>      &#125;,<br>      <br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 7,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;人力资源管理部&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 8,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;设备管理部&#x27;</span><br>  &#125;<br>]<br><br><br><span class=\"hljs-keyword\">const</span> treeToArray = (array) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> array.reduce((prev, cur) =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span>(!cur.children)&#123;<br>      prev.push(cur)<br>    &#125;<span class=\"hljs-title\">else</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> arrList = treeToArray(cur.children)<br>      <span class=\"hljs-keyword\">delete</span> cur.children<br>      prev.push(cur, ...arrList)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> prev<br>  &#125;, [])<br>&#125;<br><br>treeToArray(arr)<br><br></code></pre></td></tr></table></figure>\n","excerpt":"<p>数组与树结构互相转变，平时也用的比较多，主要是用递归实现</p>","more":"<h3 id=\"数组转树\"><a href=\"#数组转树\" class=\"headerlink\" title=\"数组转树\"></a>数组转树</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">const</span> arr = [<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;研发部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;行政管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 4,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;财务管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 5,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;前端研发部&#x27;</span><br>  &#125;,<br>   &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 6,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;后端研发部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 7,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;人力资源管理部&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 8,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;设备管理部&#x27;</span><br>  &#125;<br>]<br><br><br><span class=\"hljs-keyword\">const</span> arrayToTree = (array, pid=<span class=\"hljs-literal\">null</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> array.reduce((prev, cur) =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span>(cur.pid === pid) &#123;<br>      <span class=\"hljs-keyword\">const</span> children = arrayToTree(array, cur.id)<br>      <span class=\"hljs-keyword\">if</span> (children.length)&#123;<br>        cur.children = children<br>      &#125; <br>      prev.push(cur)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> prev<br>  &#125;, [])<br>&#125;<br><br>arrayToTree(arr)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"树转数组\"><a href=\"#树转数组\" class=\"headerlink\" title=\"树转数组\"></a>树转数组</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">const</span> arr = [<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;研发部&#x27;</span>,<br>    <span class=\"hljs-attribute\">children</span>: [<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 5,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;前端研发部&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 6,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;后端研发部&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;管理部&#x27;</span>,<br>    <span class=\"hljs-attribute\">children</span>: [<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;行政管理部&#x27;</span><br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 4,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;财务管理部&#x27;</span><br>      &#125;,<br>      <br>      &#123;<br>        <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 7,</span><br><span class=\"hljs-string\">        pid</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;人力资源管理部&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 8,</span><br><span class=\"hljs-string\">    pid</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">&#x27;设备管理部&#x27;</span><br>  &#125;<br>]<br><br><br><span class=\"hljs-keyword\">const</span> treeToArray = (array) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> array.reduce((prev, cur) =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span>(!cur.children)&#123;<br>      prev.push(cur)<br>    &#125;<span class=\"hljs-title\">else</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> arrList = treeToArray(cur.children)<br>      <span class=\"hljs-keyword\">delete</span> cur.children<br>      prev.push(cur, ...arrList)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> prev<br>  &#125;, [])<br>&#125;<br><br>treeToArray(arr)<br><br></code></pre></td></tr></table></figure>"},{"title":"根据子节点寻找父节点路径","date":"2020-05-03T15:04:08.000Z","_content":"\n最近项目遇到一个需求，在一个树结构里，根据子节点寻找父节点的路径，这里记录一下。\n<!--more -->\n\n#### 方法一：\n\n```\nfunction getParent(array, nodeCode){\n  let stack = [];\n  let going = true;\n  \n  let walker = (array, nodeCode) => {\n      array.forEach(item => {\n          if (!going) return;\n          stack.push(item['nodeCode']);\n          if (item['nodeCode'] === nodeCode) {\n              going = false;\n          } else if (item['child']) {\n              walker(item['child'], nodeCode);\n          } else {\n              stack.pop();\n          }\n      });\n      if (going) stack.pop();\n  }\n\n  walker(array, nodeCode);\n\n  return stack.join(',');\n}\n\n```\n#### 方法二：\n```\nfunction getParent(data, target){\n\n  const get = (children, target, record = []) => (\n    children.reduce((result, { nodeCode, child: innerChildren }) => {\n      if (nodeCode === target) {\n        return [...record, target]\n      }\n      if (innerChildren) {\n        return [...result, ...get(innerChildren, target, [...record, nodeCode])]\n      }\n      return result\n    }, []))\n\n  return get(data, target).join(',')\n}\n\n```\n","source":"_posts/根据子节点寻找父节点路径.md","raw":"---\ntitle: 根据子节点寻找父节点路径\ndate: 2020-05-03 23:04:08\ntags: ['JS']\n---\n\n最近项目遇到一个需求，在一个树结构里，根据子节点寻找父节点的路径，这里记录一下。\n<!--more -->\n\n#### 方法一：\n\n```\nfunction getParent(array, nodeCode){\n  let stack = [];\n  let going = true;\n  \n  let walker = (array, nodeCode) => {\n      array.forEach(item => {\n          if (!going) return;\n          stack.push(item['nodeCode']);\n          if (item['nodeCode'] === nodeCode) {\n              going = false;\n          } else if (item['child']) {\n              walker(item['child'], nodeCode);\n          } else {\n              stack.pop();\n          }\n      });\n      if (going) stack.pop();\n  }\n\n  walker(array, nodeCode);\n\n  return stack.join(',');\n}\n\n```\n#### 方法二：\n```\nfunction getParent(data, target){\n\n  const get = (children, target, record = []) => (\n    children.reduce((result, { nodeCode, child: innerChildren }) => {\n      if (nodeCode === target) {\n        return [...record, target]\n      }\n      if (innerChildren) {\n        return [...result, ...get(innerChildren, target, [...record, nodeCode])]\n      }\n      return result\n    }, []))\n\n  return get(data, target).join(',')\n}\n\n```\n","slug":"根据子节点寻找父节点路径","published":1,"updated":"2025-03-20T03:56:32.447Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpb001g9cckc1hbfog5","content":"<p>最近项目遇到一个需求，在一个树结构里，根据子节点寻找父节点的路径，这里记录一下。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-keyword\">function</span> getParent(<span class=\"hljs-keyword\">array</span>, nodeCode)&#123;<br>  <span class=\"hljs-keyword\">let</span> stack = [];<br>  <span class=\"hljs-keyword\">let</span> going =<span class=\"hljs-built_in\"> true</span>;<br>  <br>  <span class=\"hljs-keyword\">let</span> walker = (<span class=\"hljs-keyword\">array</span>, nodeCode) =&gt; &#123;<br>      <span class=\"hljs-keyword\">array</span>.forEach(<span class=\"hljs-type\">item</span> =&gt; &#123;<br>          <span class=\"hljs-keyword\">if</span> (!going) <span class=\"hljs-keyword\">return</span>;<br>          stack.push(<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;nodeCode&#x27;</span>]);<br>          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;nodeCode&#x27;</span>] === nodeCode) &#123;<br>              going =<span class=\"hljs-built_in\"> false</span>;<br>          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;child&#x27;</span>]) &#123;<br>              walker(<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;child&#x27;</span>], nodeCode);<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>              stack.pop();<br>          &#125;<br>      &#125;);<br>      <span class=\"hljs-keyword\">if</span> (going) stack.pop();<br>  &#125;<br><br>  walker(<span class=\"hljs-keyword\">array</span>, nodeCode);<br><br>  <span class=\"hljs-keyword\">return</span> stack.join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">function getParent(<span class=\"hljs-keyword\">data</span>, target)&#123;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">get</span> = (children, target, record = []) =&gt; (<br>    children.reduce((result, &#123; nodeCode, child: innerChildren &#125;) =&gt; &#123;<br>      <span class=\"hljs-keyword\">if</span> (nodeCode === target) &#123;<br>        <span class=\"hljs-keyword\">return</span> [...record, target]<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (innerChildren) &#123;<br>        <span class=\"hljs-keyword\">return</span> [...result, ...<span class=\"hljs-keyword\">get</span>(innerChildren, target, [...record, nodeCode])]<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> result<br>    &#125;, []))<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">data</span>, target).join(<span class=\"hljs-string\">&#x27;,&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","excerpt":"<p>最近项目遇到一个需求，在一个树结构里，根据子节点寻找父节点的路径，这里记录一下。</p>","more":"<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-keyword\">function</span> getParent(<span class=\"hljs-keyword\">array</span>, nodeCode)&#123;<br>  <span class=\"hljs-keyword\">let</span> stack = [];<br>  <span class=\"hljs-keyword\">let</span> going =<span class=\"hljs-built_in\"> true</span>;<br>  <br>  <span class=\"hljs-keyword\">let</span> walker = (<span class=\"hljs-keyword\">array</span>, nodeCode) =&gt; &#123;<br>      <span class=\"hljs-keyword\">array</span>.forEach(<span class=\"hljs-type\">item</span> =&gt; &#123;<br>          <span class=\"hljs-keyword\">if</span> (!going) <span class=\"hljs-keyword\">return</span>;<br>          stack.push(<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;nodeCode&#x27;</span>]);<br>          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;nodeCode&#x27;</span>] === nodeCode) &#123;<br>              going =<span class=\"hljs-built_in\"> false</span>;<br>          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;child&#x27;</span>]) &#123;<br>              walker(<span class=\"hljs-type\">item</span>[<span class=\"hljs-string\">&#x27;child&#x27;</span>], nodeCode);<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>              stack.pop();<br>          &#125;<br>      &#125;);<br>      <span class=\"hljs-keyword\">if</span> (going) stack.pop();<br>  &#125;<br><br>  walker(<span class=\"hljs-keyword\">array</span>, nodeCode);<br><br>  <span class=\"hljs-keyword\">return</span> stack.join(<span class=\"hljs-string\">&#x27;,&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">function getParent(<span class=\"hljs-keyword\">data</span>, target)&#123;<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">get</span> = (children, target, record = []) =&gt; (<br>    children.reduce((result, &#123; nodeCode, child: innerChildren &#125;) =&gt; &#123;<br>      <span class=\"hljs-keyword\">if</span> (nodeCode === target) &#123;<br>        <span class=\"hljs-keyword\">return</span> [...record, target]<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (innerChildren) &#123;<br>        <span class=\"hljs-keyword\">return</span> [...result, ...<span class=\"hljs-keyword\">get</span>(innerChildren, target, [...record, nodeCode])]<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> result<br>    &#125;, []))<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">data</span>, target).join(<span class=\"hljs-string\">&#x27;,&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"测试持续集成","date":"2020-09-27T15:45:29.000Z","_content":"\n添加了travis的一个脚本，这样每次只要提交一下博客文件就行了，打包的工作就交还给travis了。持续集成真的很好用，极大地提升了效率。\n","source":"_posts/测试持续集成.md","raw":"---\ntitle: 测试持续集成\ndate: 2020-09-27 23:45:29\ntags: ['持续集成','测试']\n---\n\n添加了travis的一个脚本，这样每次只要提交一下博客文件就行了，打包的工作就交还给travis了。持续集成真的很好用，极大地提升了效率。\n","slug":"测试持续集成","published":1,"updated":"2025-03-20T03:56:32.447Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpc001j9cck4p3a2wdq","content":"<p>添加了travis的一个脚本，这样每次只要提交一下博客文件就行了，打包的工作就交还给travis了。持续集成真的很好用，极大地提升了效率。</p>\n","excerpt":"","more":"<p>添加了travis的一个脚本，这样每次只要提交一下博客文件就行了，打包的工作就交还给travis了。持续集成真的很好用，极大地提升了效率。</p>\n"},{"title":"深拷贝","date":"2022-02-14T16:41:02.000Z","_content":"\nJS实现深拷贝：\n\n```\nfunction deepCopy(obj){\n  let newObj = null\n  if(typeof obj === 'object' && obj){\n    for(let key in obj){\n      newObj = obj[key] instanceof Array ? [] : {}\n      newObj[key] = deepCopy(obj[key])\n    }\n  } else {\n    newObj = obj\n  }\n  return newObj\n}\n```\n","source":"_posts/深拷贝.md","raw":"---\ntitle: 深拷贝\ndate: 2022-02-15 00:41:02\ntags: ['JS', '深拷贝']\n---\n\nJS实现深拷贝：\n\n```\nfunction deepCopy(obj){\n  let newObj = null\n  if(typeof obj === 'object' && obj){\n    for(let key in obj){\n      newObj = obj[key] instanceof Array ? [] : {}\n      newObj[key] = deepCopy(obj[key])\n    }\n  } else {\n    newObj = obj\n  }\n  return newObj\n}\n```\n","slug":"深拷贝","published":1,"updated":"2025-03-20T03:56:32.448Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpd001l9cck914g5o07","content":"<p>JS实现深拷贝：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">deepCopy</span>(<span class=\"hljs-params\">obj</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> newObj = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; obj)&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> obj)&#123;<br>      newObj = obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span> ? [] : &#123;&#125;<br>      newObj[key] = <span class=\"hljs-title function_\">deepCopy</span>(obj[key])<br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    newObj = obj<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> newObj<br>&#125;<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>JS实现深拷贝：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">deepCopy</span>(<span class=\"hljs-params\">obj</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> newObj = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; obj)&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> obj)&#123;<br>      newObj = obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span> ? [] : &#123;&#125;<br>      newObj[key] = <span class=\"hljs-title function_\">deepCopy</span>(obj[key])<br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    newObj = obj<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> newObj<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"算法之数组(一)","date":"2020-04-24T17:27:02.000Z","_content":"\n给定一个数组，排序后实现第一大的值放在最左边，同时把第二大的值放在最右边，第三大的值放在左边第二位，第四大的值放在右边第二位，依次排序，比如给定<code>[1, 2, 3, 4]</code>，期望结果: <code>[4, 2, 1, 3]</code>\n<!-- more -->\n#### 解法一：\n\n先把数组降序，然后索引为偶数的放左边，为奇数的放右边\n\n```\nvar sortArr = (nums) => {\n  let arr = nums.sort((x,y) => {\n    return y - x\n  })\n  let a= []\n  let b = []\n  arr.forEach((element,i) => {\n    if(i%2 === 0){\n      a.push(element)\n    }else{\n      b.push(element)\n    }\n  })\n  return a.concat(b.reverse())\n}\n\nconsole.log(sortArr([2,1,4,100,50,13,8,6,23]))//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]\n```\n#### 解法二\n\n分别从数组的头和尾迭代数组，找出最大值，并与之交换位置，继续在剩下的数组里重复上一步做法。\n\n```\nconst getArrMaxIndex = (nums,start,end) => {\n  const max = Math.max.apply(null, nums.slice(start,end))\n  return nums.findIndex(i=>i===max)\n}\n    \nconst sortArr = (nums) => {\n  let [start, temp, end] = [0, 1, nums.length]\n  while(start !== end-1){\n    let maxIndex = getArrMaxIndex(nums,start,end)\n    if(temp%2 === 0){\n      [nums[end-1], nums[maxIndex]] = [nums[maxIndex], nums[end-1]]\n      end--\n    }else{\n      [nums[start], nums[maxIndex]] = [nums[maxIndex], nums[start]]\n      start++\n    }\n    temp++\n  }\n  return nums\n}\n\nconsole.log(sortArr([2,1,4,100,50,13,8,6,23]))//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]\n```\n","source":"_posts/算法之数组-一.md","raw":"---\ntitle: 算法之数组(一)\ndate: 2020-04-25 01:27:02\ntags: ['js','算法']\n---\n\n给定一个数组，排序后实现第一大的值放在最左边，同时把第二大的值放在最右边，第三大的值放在左边第二位，第四大的值放在右边第二位，依次排序，比如给定<code>[1, 2, 3, 4]</code>，期望结果: <code>[4, 2, 1, 3]</code>\n<!-- more -->\n#### 解法一：\n\n先把数组降序，然后索引为偶数的放左边，为奇数的放右边\n\n```\nvar sortArr = (nums) => {\n  let arr = nums.sort((x,y) => {\n    return y - x\n  })\n  let a= []\n  let b = []\n  arr.forEach((element,i) => {\n    if(i%2 === 0){\n      a.push(element)\n    }else{\n      b.push(element)\n    }\n  })\n  return a.concat(b.reverse())\n}\n\nconsole.log(sortArr([2,1,4,100,50,13,8,6,23]))//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]\n```\n#### 解法二\n\n分别从数组的头和尾迭代数组，找出最大值，并与之交换位置，继续在剩下的数组里重复上一步做法。\n\n```\nconst getArrMaxIndex = (nums,start,end) => {\n  const max = Math.max.apply(null, nums.slice(start,end))\n  return nums.findIndex(i=>i===max)\n}\n    \nconst sortArr = (nums) => {\n  let [start, temp, end] = [0, 1, nums.length]\n  while(start !== end-1){\n    let maxIndex = getArrMaxIndex(nums,start,end)\n    if(temp%2 === 0){\n      [nums[end-1], nums[maxIndex]] = [nums[maxIndex], nums[end-1]]\n      end--\n    }else{\n      [nums[start], nums[maxIndex]] = [nums[maxIndex], nums[start]]\n      start++\n    }\n    temp++\n  }\n  return nums\n}\n\nconsole.log(sortArr([2,1,4,100,50,13,8,6,23]))//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]\n```\n","slug":"算法之数组-一","published":1,"updated":"2025-03-20T03:56:32.448Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpd001o9cckbpf38szh","content":"<p>给定一个数组，排序后实现第一大的值放在最左边，同时把第二大的值放在最右边，第三大的值放在左边第二位，第四大的值放在右边第二位，依次排序，比如给定<code>[1, 2, 3, 4]</code>，期望结果: <code>[4, 2, 1, 3]</code></p>\n<span id=\"more\"></span>\n<h4 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h4><p>先把数组降序，然后索引为偶数的放左边，为奇数的放右边</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> sortArr = <span class=\"hljs-function\">(<span class=\"hljs-params\">nums</span>) =&gt;</span> &#123;<br>  let arr = nums.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> y - x<br>  &#125;)<br>  let a= []<br>  let b = []<br>  arr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">element,i</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)&#123;<br>      a.<span class=\"hljs-built_in\">push</span>(element)<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      b.<span class=\"hljs-built_in\">push</span>(element)<br>    &#125;<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> a.concat(b.<span class=\"hljs-built_in\">reverse</span>())<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(sortArr([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">23</span>]))<span class=\"hljs-comment\">//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h4><p>分别从数组的头和尾迭代数组，找出最大值，并与之交换位置，继续在剩下的数组里重复上一步做法。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">const getArrMaxIndex = (nums,<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>) =&gt; &#123;<br>  const max = Math.max.apply(<span class=\"hljs-keyword\">null</span>, nums.<span class=\"hljs-keyword\">slice</span>(<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>))<br>  <span class=\"hljs-keyword\">return</span> nums.findIndex(i=&gt;i===max)<br>&#125;<br>    <br>const sortArr = (nums) =&gt; &#123;<br>  let [<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">temp</span>, <span class=\"hljs-keyword\">end</span>] = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, nums.length]<br>  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">start</span> !== <span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>)&#123;<br>    let maxIndex = getArrMaxIndex(nums,<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>)<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">temp</span>%<span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)&#123;<br>      [nums[<span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>], nums[maxIndex]] = [nums[maxIndex], nums[<span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>]]<br>      <span class=\"hljs-keyword\">end</span><span class=\"hljs-comment\">--</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      [nums[<span class=\"hljs-keyword\">start</span>], nums[maxIndex]] = [nums[maxIndex], nums[<span class=\"hljs-keyword\">start</span>]]<br>      <span class=\"hljs-keyword\">start</span>++<br>    &#125;<br>    <span class=\"hljs-keyword\">temp</span>++<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> nums<br>&#125;<br><br>console.log(sortArr([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">23</span>]))//[ <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">23</span>,  <span class=\"hljs-number\">8</span>,  <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">50</span> ]<br></code></pre></td></tr></table></figure>\n","excerpt":"<p>给定一个数组，排序后实现第一大的值放在最左边，同时把第二大的值放在最右边，第三大的值放在左边第二位，第四大的值放在右边第二位，依次排序，比如给定<code>[1, 2, 3, 4]</code>，期望结果: <code>[4, 2, 1, 3]</code></p>","more":"<h4 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h4><p>先把数组降序，然后索引为偶数的放左边，为奇数的放右边</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> sortArr = <span class=\"hljs-function\">(<span class=\"hljs-params\">nums</span>) =&gt;</span> &#123;<br>  let arr = nums.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> y - x<br>  &#125;)<br>  let a= []<br>  let b = []<br>  arr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">element,i</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)&#123;<br>      a.<span class=\"hljs-built_in\">push</span>(element)<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      b.<span class=\"hljs-built_in\">push</span>(element)<br>    &#125;<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> a.concat(b.<span class=\"hljs-built_in\">reverse</span>())<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(sortArr([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">23</span>]))<span class=\"hljs-comment\">//[ 100, 23,  8,  4, 1, 2,  6, 13, 50 ]</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h4><p>分别从数组的头和尾迭代数组，找出最大值，并与之交换位置，继续在剩下的数组里重复上一步做法。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">const getArrMaxIndex = (nums,<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>) =&gt; &#123;<br>  const max = Math.max.apply(<span class=\"hljs-keyword\">null</span>, nums.<span class=\"hljs-keyword\">slice</span>(<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>))<br>  <span class=\"hljs-keyword\">return</span> nums.findIndex(i=&gt;i===max)<br>&#125;<br>    <br>const sortArr = (nums) =&gt; &#123;<br>  let [<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">temp</span>, <span class=\"hljs-keyword\">end</span>] = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, nums.length]<br>  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">start</span> !== <span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>)&#123;<br>    let maxIndex = getArrMaxIndex(nums,<span class=\"hljs-keyword\">start</span>,<span class=\"hljs-keyword\">end</span>)<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">temp</span>%<span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)&#123;<br>      [nums[<span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>], nums[maxIndex]] = [nums[maxIndex], nums[<span class=\"hljs-keyword\">end</span><span class=\"hljs-number\">-1</span>]]<br>      <span class=\"hljs-keyword\">end</span><span class=\"hljs-comment\">--</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      [nums[<span class=\"hljs-keyword\">start</span>], nums[maxIndex]] = [nums[maxIndex], nums[<span class=\"hljs-keyword\">start</span>]]<br>      <span class=\"hljs-keyword\">start</span>++<br>    &#125;<br>    <span class=\"hljs-keyword\">temp</span>++<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> nums<br>&#125;<br><br>console.log(sortArr([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">23</span>]))//[ <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">23</span>,  <span class=\"hljs-number\">8</span>,  <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">50</span> ]<br></code></pre></td></tr></table></figure>"},{"title":"箭头函数this","date":"2022-02-17T08:00:54.000Z","_content":"\n箭头函数的this在定义时就确定，就是箭头函数所在作用域的this, 且不会被call, apply, bind改变。\n<!-- more -->\n```\nlet foo = () => {\n  console.log(this.id)\n}\n\nlet id = 21\n\nfoo.call({ id: 42 }) //  21\n```\n\n如果箭头函数改成function，则会被改变，因为function的this只有调用时能确定\n\n```\nlet foo = function(){\n  console.log(this.id)\n}\n\nlet id = 21\n\nfoo.call({ id: 42 }) // 42\n```\n\n","source":"_posts/箭头函数this.md","raw":"---\ntitle: 箭头函数this\ndate: 2022-02-17 16:00:54\ntags: ['JS', '箭头函数']\n---\n\n箭头函数的this在定义时就确定，就是箭头函数所在作用域的this, 且不会被call, apply, bind改变。\n<!-- more -->\n```\nlet foo = () => {\n  console.log(this.id)\n}\n\nlet id = 21\n\nfoo.call({ id: 42 }) //  21\n```\n\n如果箭头函数改成function，则会被改变，因为function的this只有调用时能确定\n\n```\nlet foo = function(){\n  console.log(this.id)\n}\n\nlet id = 21\n\nfoo.call({ id: 42 }) // 42\n```\n\n","slug":"箭头函数this","published":1,"updated":"2025-03-20T03:56:32.448Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpe001q9cck4xyabrwd","content":"<p>箭头函数的this在定义时就确定，就是箭头函数所在作用域的this, 且不会被call, apply, bind改变。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">let</span> foo <span class=\"hljs-operator\">=</span> () <span class=\"hljs-operator\">=&gt;</span> &#123;<br>  console.log(this.<span class=\"hljs-built_in\">id</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">21</span><br><br>foo.call(&#123; <span class=\"hljs-built_in\">id</span><span class=\"hljs-operator\">:</span> 42 &#125;) <span class=\"hljs-comment\">//  21</span><br></code></pre></td></tr></table></figure>\n\n<p>如果箭头函数改成function，则会被改变，因为function的this只有调用时能确定</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">let</span> foo <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">function</span>()&#123;<br>  console.log(this.<span class=\"hljs-built_in\">id</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">21</span><br><br>foo.call(&#123; <span class=\"hljs-built_in\">id</span><span class=\"hljs-operator\">:</span> 42 &#125;) <span class=\"hljs-comment\">// 42</span><br></code></pre></td></tr></table></figure>\n\n","excerpt":"<p>箭头函数的this在定义时就确定，就是箭头函数所在作用域的this, 且不会被call, apply, bind改变。</p>","more":"<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">let</span> foo <span class=\"hljs-operator\">=</span> () <span class=\"hljs-operator\">=&gt;</span> &#123;<br>  console.log(this.<span class=\"hljs-built_in\">id</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">21</span><br><br>foo.call(&#123; <span class=\"hljs-built_in\">id</span><span class=\"hljs-operator\">:</span> 42 &#125;) <span class=\"hljs-comment\">//  21</span><br></code></pre></td></tr></table></figure>\n\n<p>如果箭头函数改成function，则会被改变，因为function的this只有调用时能确定</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">let</span> foo <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">function</span>()&#123;<br>  console.log(this.<span class=\"hljs-built_in\">id</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">21</span><br><br>foo.call(&#123; <span class=\"hljs-built_in\">id</span><span class=\"hljs-operator\">:</span> 42 &#125;) <span class=\"hljs-comment\">// 42</span><br></code></pre></td></tr></table></figure>"},{"title":"终于看完老友记了","date":"2020-04-12T15:06:46.000Z","_content":"!['老友记海报'](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1586704138&di=4329bb6a517364a9577b7c3f3bae641e&src=http://i2.hdslb.com/bfs/archive/5339b0aee51f6be61ff127d1a7f9e085ca893104.jpg)\n\n大学时就开始看老友记了，但是断断续续看了几季后又没看了，直到今天终于看完。看完发现，老友记真的好多荤段子啊😝，真的是少儿不宜2333。最开始我看海报，就是上面这张，我以为乔伊会和菲比在一起，最后看完竟然不是，哈哈哈哈。总之看完还是有点伤感的，有追完剧的空虚，也想起了大学时代那些日子，时间过得可真快啊。。。\n\n","source":"_posts/终于看完老友记了.md","raw":"---\ntitle: 终于看完老友记了\ndate: 2020-04-12 23:06:46\ntags: ['老友记','美剧']\n---\n!['老友记海报'](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1586704138&di=4329bb6a517364a9577b7c3f3bae641e&src=http://i2.hdslb.com/bfs/archive/5339b0aee51f6be61ff127d1a7f9e085ca893104.jpg)\n\n大学时就开始看老友记了，但是断断续续看了几季后又没看了，直到今天终于看完。看完发现，老友记真的好多荤段子啊😝，真的是少儿不宜2333。最开始我看海报，就是上面这张，我以为乔伊会和菲比在一起，最后看完竟然不是，哈哈哈哈。总之看完还是有点伤感的，有追完剧的空虚，也想起了大学时代那些日子，时间过得可真快啊。。。\n\n","slug":"终于看完老友记了","published":1,"updated":"2025-03-20T03:56:32.449Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpf001t9cck7hzh1t2a","content":"<p><img src=\"https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1586704138&di=4329bb6a517364a9577b7c3f3bae641e&src=http://i2.hdslb.com/bfs/archive/5339b0aee51f6be61ff127d1a7f9e085ca893104.jpg\" alt=\"&#39;老友记海报&#39;\"></p>\n<p>大学时就开始看老友记了，但是断断续续看了几季后又没看了，直到今天终于看完。看完发现，老友记真的好多荤段子啊😝，真的是少儿不宜2333。最开始我看海报，就是上面这张，我以为乔伊会和菲比在一起，最后看完竟然不是，哈哈哈哈。总之看完还是有点伤感的，有追完剧的空虚，也想起了大学时代那些日子，时间过得可真快啊。。。</p>\n","excerpt":"","more":"<p><img src=\"https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1586704138&di=4329bb6a517364a9577b7c3f3bae641e&src=http://i2.hdslb.com/bfs/archive/5339b0aee51f6be61ff127d1a7f9e085ca893104.jpg\" alt=\"&#39;老友记海报&#39;\"></p>\n<p>大学时就开始看老友记了，但是断断续续看了几季后又没看了，直到今天终于看完。看完发现，老友记真的好多荤段子啊😝，真的是少儿不宜2333。最开始我看海报，就是上面这张，我以为乔伊会和菲比在一起，最后看完竟然不是，哈哈哈哈。总之看完还是有点伤感的，有追完剧的空虚，也想起了大学时代那些日子，时间过得可真快啊。。。</p>\n"},{"title":"递归实现1-100求和","date":"2022-02-11T16:52:18.000Z","_content":"\n面试遇到这样一道题，平时没怎么准备算法，当时就卡壳了。后来回来想想其实很简单。要做的其实就是，用递归实现每次加1或者减1。\n\n真的要好好看看算法了呀。\n<!-- more -->\n减1：\n\n```\nfunction sum(n){\n  if(n === 1) return 1\n  return sum(n - 1) + n\n}\n\nsum(100) // 5050\n```\n\n加1：\n\n```\nfunction sum(num, start) {\n  num += start\n  start++;\n  if (start > 100) {\n    return num\n  }\n  else {\n    sum(num, start)\n  }\n}\nsum(0, 1) // 5050\n```","source":"_posts/递归实现1-100求和.md","raw":"---\ntitle: 递归实现1-100求和\ndate: 2022-02-12 00:52:18\ntags: ['算法', '递归']\n---\n\n面试遇到这样一道题，平时没怎么准备算法，当时就卡壳了。后来回来想想其实很简单。要做的其实就是，用递归实现每次加1或者减1。\n\n真的要好好看看算法了呀。\n<!-- more -->\n减1：\n\n```\nfunction sum(n){\n  if(n === 1) return 1\n  return sum(n - 1) + n\n}\n\nsum(100) // 5050\n```\n\n加1：\n\n```\nfunction sum(num, start) {\n  num += start\n  start++;\n  if (start > 100) {\n    return num\n  }\n  else {\n    sum(num, start)\n  }\n}\nsum(0, 1) // 5050\n```","slug":"递归实现1-100求和","published":1,"updated":"2025-03-20T03:56:32.449Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpf001v9cck192zbxvd","content":"<p>面试遇到这样一道题，平时没怎么准备算法，当时就卡壳了。后来回来想想其实很简单。要做的其实就是，用递归实现每次加1或者减1。</p>\n<p>真的要好好看看算法了呀。</p>\n<span id=\"more\"></span>\n<p>减1：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">function <span class=\"hljs-built_in\">sum</span>(n)&#123;<br>  <span class=\"hljs-built_in\">if</span>(n === <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">1</span><br>  return <span class=\"hljs-built_in\">sum</span>(n - <span class=\"hljs-number\">1</span>) + n<br>&#125;<br><br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\">// 5050</span><br></code></pre></td></tr></table></figure>\n\n<p>加1：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">function</span> sum(num, <span class=\"hljs-keyword\">start</span>) &#123;<br>  num += <span class=\"hljs-keyword\">start</span><br>  <span class=\"hljs-keyword\">start</span>++;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">start</span> &gt; <span class=\"hljs-number\">100</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> num<br>  &#125;<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    sum(num, <span class=\"hljs-keyword\">start</span>)<br>  &#125;<br>&#125;<br>sum(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">5050</span><br></code></pre></td></tr></table></figure>","excerpt":"<p>面试遇到这样一道题，平时没怎么准备算法，当时就卡壳了。后来回来想想其实很简单。要做的其实就是，用递归实现每次加1或者减1。</p>\n<p>真的要好好看看算法了呀。</p>","more":"<p>减1：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">function <span class=\"hljs-built_in\">sum</span>(n)&#123;<br>  <span class=\"hljs-built_in\">if</span>(n === <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">1</span><br>  return <span class=\"hljs-built_in\">sum</span>(n - <span class=\"hljs-number\">1</span>) + n<br>&#125;<br><br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\">// 5050</span><br></code></pre></td></tr></table></figure>\n\n<p>加1：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">function</span> sum(num, <span class=\"hljs-keyword\">start</span>) &#123;<br>  num += <span class=\"hljs-keyword\">start</span><br>  <span class=\"hljs-keyword\">start</span>++;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">start</span> &gt; <span class=\"hljs-number\">100</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> num<br>  &#125;<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    sum(num, <span class=\"hljs-keyword\">start</span>)<br>  &#125;<br>&#125;<br>sum(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">5050</span><br></code></pre></td></tr></table></figure>"},{"title":"锚点导航","date":"2021-03-16T02:42:44.000Z","_content":"\n导航锚点跟随页面滚动\n\n```\n$(\"#work_info\").on('scroll', function (){\n    var flag = 0;\n    var w_top = $(this).scrollTop();\n    var len = arr.length\n    for(var i=0;i<len;i++){\n        var linkText = arr[i];\n            if(w_top >= topObj[linkText] && w_top <= topObj[[arr[i+1]]]){\n                flag = i\n                    break;\n            }\n    }\n    if (topObj[arr[flag+1]] - w_top < w_top -  topObj[arr[flag]]){\n        flag += 1\n    }\n    if (w_top > arr[len - 1]) {\n        flag = len - 1;\n    }\n    $('.anchor-link[value='+arr[flag]+']').siblings().removeClass('anchor-active');\n    $('.anchor-link[value='+arr[flag]+']').addClass('anchor-active')                     \n})\n```","source":"_posts/锚点导航.md","raw":"---\ntitle: 锚点导航\ndate: 2021-03-16 10:42:44\ntags: ['JS']\n---\n\n导航锚点跟随页面滚动\n\n```\n$(\"#work_info\").on('scroll', function (){\n    var flag = 0;\n    var w_top = $(this).scrollTop();\n    var len = arr.length\n    for(var i=0;i<len;i++){\n        var linkText = arr[i];\n            if(w_top >= topObj[linkText] && w_top <= topObj[[arr[i+1]]]){\n                flag = i\n                    break;\n            }\n    }\n    if (topObj[arr[flag+1]] - w_top < w_top -  topObj[arr[flag]]){\n        flag += 1\n    }\n    if (w_top > arr[len - 1]) {\n        flag = len - 1;\n    }\n    $('.anchor-link[value='+arr[flag]+']').siblings().removeClass('anchor-active');\n    $('.anchor-link[value='+arr[flag]+']').addClass('anchor-active')                     \n})\n```","slug":"锚点导航","published":1,"updated":"2025-03-20T03:56:32.450Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mpg001x9ccke0eqcxaa","content":"<p>导航锚点跟随页面滚动</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">$(<span class=\"hljs-string\">&quot;#work_info&quot;</span>).on(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> flag = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">var</span> w_top = $(this).scrollTop();<br>    <span class=\"hljs-keyword\">var</span> len = arr.<span class=\"hljs-built_in\">length</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)&#123;<br>        <span class=\"hljs-keyword\">var</span> linkText = arr[i];<br>            <span class=\"hljs-keyword\">if</span>(w_top &gt;= topObj[linkText] &amp;&amp; w_top &lt;= topObj[[arr[i+<span class=\"hljs-number\">1</span>]]])&#123;<br>                flag = i<br>                    <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (topObj[arr[flag+<span class=\"hljs-number\">1</span>]] - w_top &lt; w_top -  topObj[arr[flag]])&#123;<br>        flag += <span class=\"hljs-number\">1</span><br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (w_top &gt; arr[len - <span class=\"hljs-number\">1</span>]) &#123;<br>        flag = len - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    $(<span class=\"hljs-string\">&#x27;.anchor-link[value=&#x27;</span>+arr[flag]+<span class=\"hljs-string\">&#x27;]&#x27;</span>).siblings().removeClass(<span class=\"hljs-string\">&#x27;anchor-active&#x27;</span>);<br>    $(<span class=\"hljs-string\">&#x27;.anchor-link[value=&#x27;</span>+arr[flag]+<span class=\"hljs-string\">&#x27;]&#x27;</span>).addClass(<span class=\"hljs-string\">&#x27;anchor-active&#x27;</span>)                     <br>&#125;)<br></code></pre></td></tr></table></figure>","excerpt":"","more":"<p>导航锚点跟随页面滚动</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">$(<span class=\"hljs-string\">&quot;#work_info&quot;</span>).on(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> flag = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">var</span> w_top = $(this).scrollTop();<br>    <span class=\"hljs-keyword\">var</span> len = arr.<span class=\"hljs-built_in\">length</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)&#123;<br>        <span class=\"hljs-keyword\">var</span> linkText = arr[i];<br>            <span class=\"hljs-keyword\">if</span>(w_top &gt;= topObj[linkText] &amp;&amp; w_top &lt;= topObj[[arr[i+<span class=\"hljs-number\">1</span>]]])&#123;<br>                flag = i<br>                    <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (topObj[arr[flag+<span class=\"hljs-number\">1</span>]] - w_top &lt; w_top -  topObj[arr[flag]])&#123;<br>        flag += <span class=\"hljs-number\">1</span><br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (w_top &gt; arr[len - <span class=\"hljs-number\">1</span>]) &#123;<br>        flag = len - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    $(<span class=\"hljs-string\">&#x27;.anchor-link[value=&#x27;</span>+arr[flag]+<span class=\"hljs-string\">&#x27;]&#x27;</span>).siblings().removeClass(<span class=\"hljs-string\">&#x27;anchor-active&#x27;</span>);<br>    $(<span class=\"hljs-string\">&#x27;.anchor-link[value=&#x27;</span>+arr[flag]+<span class=\"hljs-string\">&#x27;]&#x27;</span>).addClass(<span class=\"hljs-string\">&#x27;anchor-active&#x27;</span>)                     <br>&#125;)<br></code></pre></td></tr></table></figure>"},{"title":"防抖节流","date":"2022-02-11T16:09:45.000Z","_content":"\n在处理高频事件，类似于window的resize或者scorll，或者input输入校验等操作时。如果直接执行事件处理器，会增大浏览器的负担，严重的直接卡死，用户体验非常不好。\n\n面对这种情况，我们一般可以采用防抖和节流的方式减少调用频率。\n<!-- more -->\n防抖：在单位时间内执行函数， 如果在这个时间内触发，则重新开始计时。\n场景：滚动条滚动， 提交按钮\n\n```\nfunction debounce(fn, delay){\n  let timer\n  return function(){\n    if(timer) clearTimeout(timer)\n\n    timer = setTimeout(fn, delay)\n  }\n}\n```\n\n防抖：在单位时间内执行函数， 如果在这个时间内触发，则忽略，直到时间结束，函数开始执行\n场景：输入框输入\n\n第一种实现：\n```\nfunction throttle(fn, delay){\n  let timer\n  return function(){\n    if(timer) return\n    timer = setTimeout(function(){\n      fn()\n      clearTimeout(timer)\n    }, delay)\n  }\n}\n```\n\n第二种实现：\n```\nfunction throttle(fn, delay){\n  let prev = Date.now()\n  return function(){\n    if(Date.now() - prev < delay) {\n      return\n    }\n    fn()\n    prev = Date.now()\n  }\n}\n```\n\n\n\n\n","source":"_posts/防抖节流.md","raw":"---\ntitle: 防抖节流\ndate: 2022-02-12 00:09:45\ntags: ['JS', '防抖', '节流']\n---\n\n在处理高频事件，类似于window的resize或者scorll，或者input输入校验等操作时。如果直接执行事件处理器，会增大浏览器的负担，严重的直接卡死，用户体验非常不好。\n\n面对这种情况，我们一般可以采用防抖和节流的方式减少调用频率。\n<!-- more -->\n防抖：在单位时间内执行函数， 如果在这个时间内触发，则重新开始计时。\n场景：滚动条滚动， 提交按钮\n\n```\nfunction debounce(fn, delay){\n  let timer\n  return function(){\n    if(timer) clearTimeout(timer)\n\n    timer = setTimeout(fn, delay)\n  }\n}\n```\n\n防抖：在单位时间内执行函数， 如果在这个时间内触发，则忽略，直到时间结束，函数开始执行\n场景：输入框输入\n\n第一种实现：\n```\nfunction throttle(fn, delay){\n  let timer\n  return function(){\n    if(timer) return\n    timer = setTimeout(function(){\n      fn()\n      clearTimeout(timer)\n    }, delay)\n  }\n}\n```\n\n第二种实现：\n```\nfunction throttle(fn, delay){\n  let prev = Date.now()\n  return function(){\n    if(Date.now() - prev < delay) {\n      return\n    }\n    fn()\n    prev = Date.now()\n  }\n}\n```\n\n\n\n\n","slug":"防抖节流","published":1,"updated":"2025-03-20T03:56:32.450Z","comments":1,"layout":"post","photos":[],"_id":"cm8gy8mph00209cckdgfh0nwe","content":"<p>在处理高频事件，类似于window的resize或者scorll，或者input输入校验等操作时。如果直接执行事件处理器，会增大浏览器的负担，严重的直接卡死，用户体验非常不好。</p>\n<p>面对这种情况，我们一般可以采用防抖和节流的方式减少调用频率。</p>\n<span id=\"more\"></span>\n<p>防抖：在单位时间内执行函数， 如果在这个时间内触发，则重新开始计时。<br>场景：滚动条滚动， 提交按钮</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(timer) <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br><br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(fn, delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>防抖：在单位时间内执行函数， 如果在这个时间内触发，则忽略，直到时间结束，函数开始执行<br>场景：输入框输入</p>\n<p>第一种实现：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span><span class=\"hljs-params\">(fn, delay)</span></span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(timer) <span class=\"hljs-keyword\">return</span><br>    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">      <span class=\"hljs-title\">clearTimeout</span><span class=\"hljs-params\">(timer)</span></span><br><span class=\"hljs-function\">    &#125;, <span class=\"hljs-title\">delay</span>)</span><br><span class=\"hljs-function\">  &#125;</span><br><span class=\"hljs-function\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>第二种实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>() - prev &lt; delay) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-title function_\">fn</span>()<br>    prev = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n","excerpt":"<p>在处理高频事件，类似于window的resize或者scorll，或者input输入校验等操作时。如果直接执行事件处理器，会增大浏览器的负担，严重的直接卡死，用户体验非常不好。</p>\n<p>面对这种情况，我们一般可以采用防抖和节流的方式减少调用频率。</p>","more":"<p>防抖：在单位时间内执行函数， 如果在这个时间内触发，则重新开始计时。<br>场景：滚动条滚动， 提交按钮</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(timer) <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br><br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(fn, delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>防抖：在单位时间内执行函数， 如果在这个时间内触发，则忽略，直到时间结束，函数开始执行<br>场景：输入框输入</p>\n<p>第一种实现：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span><span class=\"hljs-params\">(fn, delay)</span></span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(timer) <span class=\"hljs-keyword\">return</span><br>    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">      <span class=\"hljs-title\">clearTimeout</span><span class=\"hljs-params\">(timer)</span></span><br><span class=\"hljs-function\">    &#125;, <span class=\"hljs-title\">delay</span>)</span><br><span class=\"hljs-function\">  &#125;</span><br><span class=\"hljs-function\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>第二种实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>() - prev &lt; delay) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-title function_\">fn</span>()<br>    prev = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm8gy8moi00009cck7lgpg3bp","tag_id":"cm8gy8mou00029cck1q5g3i1d","_id":"cm8gy8mp0000b9cck5f8y4yd5"},{"post_id":"cm8gy8moi00009cck7lgpg3bp","tag_id":"cm8gy8mox00069cck53rbhaeu","_id":"cm8gy8mp1000d9cck8b588ul3"},{"post_id":"cm8gy8mp0000c9cckffn7cbe4","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp2000g9cck5xaxf11p"},{"post_id":"cm8gy8mos00019cck97mrgxy6","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp3000k9cck104lb9vz"},{"post_id":"cm8gy8mos00019cck97mrgxy6","tag_id":"cm8gy8mp1000e9ccke5q68gtl","_id":"cm8gy8mp4000m9cck6inl8mb2"},{"post_id":"cm8gy8mp2000h9cckdjirglvl","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp4000p9cckfm691au7"},{"post_id":"cm8gy8mp2000h9cckdjirglvl","tag_id":"cm8gy8mou00029cck1q5g3i1d","_id":"cm8gy8mp5000r9cckacsnde3w"},{"post_id":"cm8gy8mp4000o9cck79pph43i","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp6000u9cckeei46x8m"},{"post_id":"cm8gy8mov00039cck635mb5f8","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp6000w9cck1qyz8n1k"},{"post_id":"cm8gy8mov00039cck635mb5f8","tag_id":"cm8gy8mp4000n9cckf4f3dll3","_id":"cm8gy8mp7000z9ccke18r7vtu"},{"post_id":"cm8gy8mp800139cck3zlqcviy","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mp900159cckcnmbggkw"},{"post_id":"cm8gy8mow00049cck4dg68s94","tag_id":"cm8gy8mp5000t9cckcchkejs0","_id":"cm8gy8mpa00189cckg24k8te0"},{"post_id":"cm8gy8mow00049cck4dg68s94","tag_id":"cm8gy8mp7000y9cck7i0obcsf","_id":"cm8gy8mpa001a9ccka64d9s75"},{"post_id":"cm8gy8mow00049cck4dg68s94","tag_id":"cm8gy8mp800129cck4vjqdp0g","_id":"cm8gy8mpb001d9cckaca3d7bo"},{"post_id":"cm8gy8mp800149cck173w6u6e","tag_id":"cm8gy8mou00029cck1q5g3i1d","_id":"cm8gy8mpb001f9cckcvdlcwl9"},{"post_id":"cm8gy8mpa00199cck5zx72hu0","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpc001i9cckeinodlfu"},{"post_id":"cm8gy8mpa001b9cckgvpdfthl","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpc001k9cckebn6fzzd"},{"post_id":"cm8gy8mpb001e9cck5863g1a6","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpd001n9cckaj7w15nw"},{"post_id":"cm8gy8mpb001g9cckc1hbfog5","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpe001p9cck9gc9admw"},{"post_id":"cm8gy8moy00089cck9z3jcfn4","tag_id":"cm8gy8mp900169cck78bzbsdc","_id":"cm8gy8mpe001r9cck4j7w3p83"},{"post_id":"cm8gy8moy00089cck9z3jcfn4","tag_id":"cm8gy8mpb001c9cck3r8s22b7","_id":"cm8gy8mpf001u9cckc0yogafy"},{"post_id":"cm8gy8moy00089cck9z3jcfn4","tag_id":"cm8gy8mpc001h9cckbmrrfm09","_id":"cm8gy8mpg001w9cckbl5o8snt"},{"post_id":"cm8gy8moz000a9cckhxqc3pa5","tag_id":"cm8gy8mpd001m9cck7uahe9db","_id":"cm8gy8mpg001z9cckhaxo6cam"},{"post_id":"cm8gy8moz000a9cckhxqc3pa5","tag_id":"cm8gy8mpe001s9cckg5vu94o8","_id":"cm8gy8mph00219ccka8uk2pd2"},{"post_id":"cm8gy8mpg001x9ccke0eqcxaa","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mph00239cck5zqw6udj"},{"post_id":"cm8gy8mp1000f9cckde426nn5","tag_id":"cm8gy8mpg001y9cck8zj93kwc","_id":"cm8gy8mph00249cckef08hkb3"},{"post_id":"cm8gy8mp2000j9cckgo6b1khn","tag_id":"cm8gy8mph00229cck1t233awm","_id":"cm8gy8mpi00269cck99mq9vdp"},{"post_id":"cm8gy8mp3000l9cck3wq9dxb3","tag_id":"cm8gy8mph00259cckbxyf4p8z","_id":"cm8gy8mpi00299cckdlkug171"},{"post_id":"cm8gy8mp3000l9cck3wq9dxb3","tag_id":"cm8gy8mpc001h9cckbmrrfm09","_id":"cm8gy8mpi002a9cck01cxcp15"},{"post_id":"cm8gy8mp5000q9cckdb0za2l9","tag_id":"cm8gy8mpi00289cck2sr71coi","_id":"cm8gy8mpj002d9cckhddwdh9e"},{"post_id":"cm8gy8mp5000q9cckdb0za2l9","tag_id":"cm8gy8mpi002b9cckanvk26wh","_id":"cm8gy8mpj002e9cck98to6uyg"},{"post_id":"cm8gy8mp5000s9cck9jeyfqto","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpj002h9cckdrxg3vyf"},{"post_id":"cm8gy8mp5000s9cck9jeyfqto","tag_id":"cm8gy8mpj002c9cck6nbpfyek","_id":"cm8gy8mpj002i9cck2hup9bbb"},{"post_id":"cm8gy8mp5000s9cck9jeyfqto","tag_id":"cm8gy8mpj002f9cck6gkd52d3","_id":"cm8gy8mpk002k9cck61f3ew4j"},{"post_id":"cm8gy8mp6000v9cckcl2j7odv","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpk002l9cckg70o5dij"},{"post_id":"cm8gy8mp6000v9cckcl2j7odv","tag_id":"cm8gy8mp7000y9cck7i0obcsf","_id":"cm8gy8mpk002n9cck18zzeivp"},{"post_id":"cm8gy8mp6000x9cck8s1t9sfl","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpk002o9cckfkvec6tc"},{"post_id":"cm8gy8mp6000x9cck8s1t9sfl","tag_id":"cm8gy8mpj002j9cck3hwkerkt","_id":"cm8gy8mpk002q9cck5uvghdpk"},{"post_id":"cm8gy8mp700109cckdxj6aozj","tag_id":"cm8gy8mpk002m9ccke15oftf0","_id":"cm8gy8mpk002s9cckfhl6bjev"},{"post_id":"cm8gy8mp700109cckdxj6aozj","tag_id":"cm8gy8mpk002p9cck3jifg6be","_id":"cm8gy8mpk002t9cckfayp5jqu"},{"post_id":"cm8gy8mp700119cck062o6887","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpl002v9ccka7et3oub"},{"post_id":"cm8gy8mp700119cck062o6887","tag_id":"cm8gy8mpk002r9cck1e5wfr9b","_id":"cm8gy8mpl002w9cck431wfrk1"},{"post_id":"cm8gy8mpc001j9cck4p3a2wdq","tag_id":"cm8gy8mpc001h9cckbmrrfm09","_id":"cm8gy8mpl002y9cckevxpe59x"},{"post_id":"cm8gy8mpc001j9cck4p3a2wdq","tag_id":"cm8gy8mpk002u9cckbo6ufo10","_id":"cm8gy8mpl002z9cck9hcp8pny"},{"post_id":"cm8gy8mpd001l9cck914g5o07","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpl00319cck25qr4vax"},{"post_id":"cm8gy8mpd001l9cck914g5o07","tag_id":"cm8gy8mpl002x9cck57uj3qnn","_id":"cm8gy8mpl00329cck6tn773eo"},{"post_id":"cm8gy8mpd001o9cckbpf38szh","tag_id":"cm8gy8mpl00309cck2uiqa7qo","_id":"cm8gy8mpl00349cck36bm398o"},{"post_id":"cm8gy8mpd001o9cckbpf38szh","tag_id":"cm8gy8mp7000y9cck7i0obcsf","_id":"cm8gy8mpl00359cck18k86gt5"},{"post_id":"cm8gy8mpe001q9cck4xyabrwd","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpm00379cck4vqz515u"},{"post_id":"cm8gy8mpe001q9cck4xyabrwd","tag_id":"cm8gy8mpl00339cck43wo5gv1","_id":"cm8gy8mpm00389cck5m43bypi"},{"post_id":"cm8gy8mpf001t9cck7hzh1t2a","tag_id":"cm8gy8mpm00369cck310x4g34","_id":"cm8gy8mpm003b9cckbi7q6omt"},{"post_id":"cm8gy8mpf001t9cck7hzh1t2a","tag_id":"cm8gy8mpm00399cckgslic321","_id":"cm8gy8mpm003c9cck3cxc6als"},{"post_id":"cm8gy8mpf001v9cck192zbxvd","tag_id":"cm8gy8mp7000y9cck7i0obcsf","_id":"cm8gy8mpm003e9ccke6lv4gia"},{"post_id":"cm8gy8mpf001v9cck192zbxvd","tag_id":"cm8gy8mpm003a9cckaxib8wc5","_id":"cm8gy8mpm003f9cckb6tc2uu4"},{"post_id":"cm8gy8mph00209cckdgfh0nwe","tag_id":"cm8gy8moz00099cck6s2h581l","_id":"cm8gy8mpn003h9cckfaiv20ww"},{"post_id":"cm8gy8mph00209cckdgfh0nwe","tag_id":"cm8gy8mpm003d9cck0024hiaq","_id":"cm8gy8mpn003i9cckgtcx2kmm"},{"post_id":"cm8gy8mph00209cckdgfh0nwe","tag_id":"cm8gy8mpm003g9cck9kgahy71","_id":"cm8gy8mpn003j9cckg8uk486k"}],"Tag":[{"name":"面试","_id":"cm8gy8mou00029cck1q5g3i1d"},{"name":"vue","_id":"cm8gy8mox00069cck53rbhaeu"},{"name":"JS","_id":"cm8gy8moz00099cck6s2h581l"},{"name":"reduce","_id":"cm8gy8mp1000e9ccke5q68gtl"},{"name":"js类型","_id":"cm8gy8mp4000n9cckf4f3dll3"},{"name":"LeetCode","_id":"cm8gy8mp5000t9cckcchkejs0"},{"name":"算法","_id":"cm8gy8mp7000y9cck7i0obcsf"},{"name":"两数之和","_id":"cm8gy8mp800129cck4vjqdp0g"},{"name":"CI","_id":"cm8gy8mp900169cck78bzbsdc"},{"name":"部署","_id":"cm8gy8mpb001c9cck3r8s22b7"},{"name":"持续集成","_id":"cm8gy8mpc001h9cckbmrrfm09"},{"name":"http","_id":"cm8gy8mpd001m9cck7uahe9db"},{"name":"https","_id":"cm8gy8mpe001s9cckg5vu94o8"},{"name":"JSONP","_id":"cm8gy8mpg001y9cck8zj93kwc"},{"name":"promise","_id":"cm8gy8mph00229cck1t233awm"},{"name":"github actions","_id":"cm8gy8mph00259cckbxyf4p8z"},{"name":"vps","_id":"cm8gy8mpi00289cck2sr71coi"},{"name":"ss","_id":"cm8gy8mpi002b9cckanvk26wh"},{"name":"事件捕获","_id":"cm8gy8mpj002c9cck6nbpfyek"},{"name":"事件冒泡","_id":"cm8gy8mpj002f9cck6gkd52d3"},{"name":"浏览器","_id":"cm8gy8mpj002j9cck3hwkerkt"},{"name":"webpack","_id":"cm8gy8mpk002m9ccke15oftf0"},{"name":"打包","_id":"cm8gy8mpk002p9cck3jifg6be"},{"name":"闭包","_id":"cm8gy8mpk002r9cck1e5wfr9b"},{"name":"测试","_id":"cm8gy8mpk002u9cckbo6ufo10"},{"name":"深拷贝","_id":"cm8gy8mpl002x9cck57uj3qnn"},{"name":"js","_id":"cm8gy8mpl00309cck2uiqa7qo"},{"name":"箭头函数","_id":"cm8gy8mpl00339cck43wo5gv1"},{"name":"老友记","_id":"cm8gy8mpm00369cck310x4g34"},{"name":"美剧","_id":"cm8gy8mpm00399cckgslic321"},{"name":"递归","_id":"cm8gy8mpm003a9cckaxib8wc5"},{"name":"防抖","_id":"cm8gy8mpm003d9cck0024hiaq"},{"name":"节流","_id":"cm8gy8mpm003g9cck9kgahy71"}]}}